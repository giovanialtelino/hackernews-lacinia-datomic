{:objects
 {:User
  {:description "User of the system"
   :fields
                {:id        {:type String}
                 :name      {:type String}
                 :email     {:type String}
                 :error     {:type String}
                 :links     {:type (list :Link)}
                 :createdat {:type String}
                 :karma     {:type Int}}}
  :UserDescription
  {:description "User info to be returned on the user page, no sensitive information"
   :fields      {:username  {:type String}
                 :createdat {:type String}
                 :karma     {:type String}}}

  :Link
  {:description "Link of an article"
   :fields
                {:id          {:type String}
                 :description {:type        String
                               :description "Description of an article"}
                 :url         {:type        String
                               :description "URL of an article"}
                 :postedBy    {:type        String
                               :description "User who posted the article"}
                 :votes       {:type        Int
                               :description "Votes the article got"}
                 :comments    {:type        Int
                               :description "Comments numbers"}
                 :commentList {:type        (list :Comment)
                               :description "All the comment from the link. Only avaliable in the Link Page, not on the Feed"}
                 :order       {:type        Int
                               :description "Order added"}
                 :error       {:type String}
                 :createdAt   {:type        String
                               :description "Instant of the creation"}}}

  :Comment
  {:description "Comments of an article"
   :fields      {:id         {:type String}
                 :text       {:type        String
                              :description "Comment text"}
                 :postedBy   {:type        String
                              :description "User visualization name"}
                 :createdAt  {:type        String
                              :description "Time since the comment were posted until now"}
                 :votes      {:type        Int
                              :description "Votes on the comment"}
                 :position   {:type        Int
                              :description "Position to print the comment on the screen"}
                 :depth      {:type        Int
                              :description "Depth of the comment"}
                 :fatherName {:type        String
                              :description "Used in the user comments page"}
                 :error      {:type        String
                              :description "Used if there's a error"}
                 :link       {:type        String
                              :description "Main link for return purposes"}
                 :linkText   {:type String}
                 :linkId     {:type String}
                 :father     {:type        String
                              :description "Who is my father? Used to organize the comments since GraphQL can't query itself until null to load all comments levels"}}}

  :AuthPayload
  {:description "Auth payload for a user"
   :fields
                {:token   {:type String}
                 :refresh {:type String}
                 :error   {:type String}
                 :user    {:type :User}}}

  :Vote
  {:description "Vote in the system"
   :fields
                {:id    {:type (non-null String)}
                 :link  {:type (non-null :Link)}
                 :error {:type String}
                 :user  {:type (non-null :User)}}}}

 :queries
 {:feed
  {:type        (list :Link)
   :description "Feed query"
   :args
                {:skip    {:type Int}
                 :first   {:type Int}
                 :orderby {:type String}}
   :resolve     :query/feed}

  :comments
  {:type        (list :Comment)
   :description "Get the comment list"
   :args        {:father {:type (non-null String)}}
   :resolve     :query/comments}

  :user_comments
  {:type        (list :Comment)
   :description "Get the user comment list"
   :args        {:user {:type (non-null String)}}
   :resolve     :query/user_comments}

  :user_posts
  {:type        (list :Link)
   :description "Get the user posts list"
   :args        {:user {:type (non-null String)}}
   :resolve     :query/user_posts}

  :link
  {:type        :Link
   :description "Get the Link by Id"
   :args
                {:id {:type (non-null String)}}
   :resolve     :query/link}

  :comment
  {:type        :Comment
   :description "Get the Comment by Id"
   :args
                {:id {:type (non-null String)}}
   :resolve     :query/comment}

  :userdescription
  {:type        :UserDescription
   :description "Get public user info, no filter here"
   :args        {:name {:type (non-null String)}}
   :resolve     :query/user_description}}

 :mutations
 {:post
  {:type        :Link
   :description "Post a new link"
   :args
                {:url         {:type (non-null String)}
                 :description {:type (non-null String)}}
   :resolve     :mutation/post}

  :edit
  {:type        :Link
   :description "Edit existing link"
   :args        {:id          {:type (non-null String)}
                 :url         {:type (non-null String)}
                 :description {:type (non-null String)}}
   :resolve     :mutation/update}

  :delete
  {:type        String
   :description "Delete a existing link"
   :args
                {:id {:type (non-null String)}}
   :resolve     :mutation/delete}

  :signup
  {:type        :AuthPayload
   :description "Returns the authorization payload for the user"
   :args
                {:email    {:type (non-null String)}
                 :password {:type (non-null String)}
                 :name     {:type (non-null String)}}
   :resolve     :mutation/signup}

  :login
  {:type        :AuthPayload
   :description "Return the authorization for the user, if if valid"
   :args
                {:email    {:type (non-null String)}
                 :password {:type (non-null String)}}
   :resolve     :mutation/login}

  :refresh
  {:type        :AuthPayload
   :description "Return the authorization for the user, if if valid"
   :resolve     :mutation/refresh}

  :vote
  {:type        Int
   :description "Return current votes"
   :args        {:id {:type (non-null String)}}
   :resolve     :mutation/vote}

  :comment_post
  {:type        :Comment
   :description "Post a new link"
   :args
                {:father  {:type        (non-null String)
                           :description "Id of the item you are commenting"}
                 :link    {:type        (non-null String)
                           :description "Id of the main link you are commenting"}
                 :comment {:type        (non-null String)
                           :description "Comment string"}
                 :type    {:type        (non-null String)
                           :description "Should be 'comment' or 'link', to identify what you are replying"}}
   :resolve     :mutation/post_comment}

  :comment_vote
  {:type        Int
   :description "Return current votes from comment"
   :args        {:id {:type (non-null String)}}
   :resolve     :mutation/vote_comment}

  :comment_delete
  {:type        String
   :description "Delete a existing comment"
   :args
                {:id {:type (non-null String)}}
   :resolve     :mutation/delete_comment}

  :comment_edit
  {:type        String
   :description "Delete a existing comment"
   :args
                {:id      {:type (non-null String)}
                 :comment {:type (non-null String)}}
   :resolve     :mutation/edit_comment}
  }
 }