{"version":3,"sources":["re_graph/internals.cljc"],"mappings":"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","names":["re-graph.internals/default-instance-name","re-graph.internals/destroyed-instance","re-graph.internals/cons-interceptor","ctx","interceptor","p1__63003#","cljs.core.update","cljs.core.into","re-frame.interop/empty-queue","re-graph.internals/encode","obj","js/JSON.stringify","cljs.core/clj->js","re-graph.internals/message->data","m","js/JSON.parse","cljs.core.js__GT_clj","re-graph.internals/generate-query-id","Math/random","re-graph.internals/ensure-query-id","event-name","trimmed-event","cljs.core/contains?","cljs.core._EQ_","cljs.core/count","cljs.core/vec","cljs.core/cons","re-graph.internals/re-graph-instance","re_frame.interceptor.__GT_interceptor","re-graph","re_frame.interceptor.get_coeffect","event","provided-instance-name","cljs.core/first","instance-name","instance","cljs.core.get","cljs.core.subvec","re-frame.interceptor/assoc-coeffect","re_frame.std_interceptors.path","re_graph.logging.error","cljs.core/keys","re-graph.internals/interceptors","re-frame.core/trim-v","re-graph.internals/valid-graphql-errors?","response","cljs.core/map?","cljs.core/vector?","cljs.core/seq","cljs.core/every?","re-graph.internals/insert-http-status","status","f","errors","cljs.core.mapv","error","p1__63013#","cljs.core.update_in","or__4126__auto__","default-errors","cljs.core.merge","re_frame.core.reg_event_fx","p__63014","p__63015","map__63016","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","vec__63017","cljs.core.nth","db","query-id","payload","callback-event","cljs.core.get_in","cljs.core/dissoc","cljs.core.conj","G__63021","G__63022","re-frame.core/reg-fx","abort-fn","re_frame.core.reg_event_db","p__63023","vec__63024","cljs.core/assoc-in","G__63027","G__63028","p__63029","vec__63030","map__63033","http-url","request","response-chan","cljs_http.client.post","cljs.core.assoc","G__63035","re-frame.core/dispatch","cljs-http.core/abort!","c__56581__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__56582__auto__","switch__56532__auto__","state_63074","state_val_63075","statearr-63076","cljs.core.async.impl.ioc-helpers/take!","statearr-63077","inst_63060","inst_63061","inst_63067","statearr-63078","statearr-63079","inst_63038","inst_63043","inst_63044","inst_63045","inst_63046","inst_63047","statearr-63080","statearr-63081","statearr-63089","inst_63040","inst_63041","cljs.core/not","statearr-63090","statearr-63091","statearr-63092","inst_63059","inst_63062","inst_63063","cljs.core/PersistentVector","inst_63064","statearr-63093","statearr-63094","statearr-63095","inst_63056","statearr-63096","inst_63054","statearr-63101","statearr-63103","inst_63069","inst_63070","inst_63071","inst_63072","cljs.core.async.impl.ioc-helpers/return-chan","statearr-63113","inst_63051","statearr-63114","statearr-63119","state-machine__56533__auto__","ret-value__56534__auto__","result__56535__auto__","cljs.core/keyword-identical?","ex__56536__auto__","e63120","statearr-63121","statearr-63122","state__56583__auto__","statearr-63123","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","G__63124","G__63125","p__63126","vec__63127","websocket","G__63130","G__63131","p__63132","vec__63133","callback-fn","p__63136","vec__63137","_","p__63140","p__63141","map__63142","vec__63143","cofx","subscription-id","temp__5733__auto__","cljs.core/name","re_graph.logging.warn","p__63147","vec__63148","p__63151","map__63152","ws","p__63157","p__63158","map__63159","vec__63160","cljs.core/assoc","resume?","subscriptions","cljs.core/vals","cljs.core.map","queue","to-send","cljs.core.concat","re-graph.internals/deactivate-subscriptions","cljs.core/reduce-kv","subs","sub-id","sub","p__63164","map__63165","new-db","temp__5735__auto__","reconnect-timeout","re-graph.internals/on-ws-message","map__63167","type","id","data","pred__63169","expr__63170","cljs.core/=","G__63172","G__63173","G__63174","re_graph.logging.debug","var_args","G__63179","re-graph.internals/on-open","js/Error","fexpr__63182","re_graph.internals.on_open","G__63184","re-graph.internals/on-close","args","G__63185","re-graph.internals/on-error","e","p__63188","map__63189","G__63191","G__63192","p__63194","vec__63195","ws-url","sub-protocol","js/WebSocket","G__63198","G__63199","p__63200","vec__63203","re-graph.internals/default-ws-url","js/window","host-and-port","js/window.location","ssl?","cljs.core/re-find"],"sourcesContent":["(ns re-graph.internals\n  (:require [re-frame.core :as re-frame]\n            [re-frame.interceptor :refer [->interceptor get-coeffect assoc-coeffect update-coeffect enqueue]]\n            [re-frame.std-interceptors :as rfi]\n            [re-frame.interop :refer [empty-queue]]\n            [re-graph.logging :as log]\n            #?@(:cljs [[cljs-http.client :as http]\n                       [cljs-http.core :as http-core]]\n                :clj  [[clj-http.client :as http]])\n            #?(:cljs [clojure.core.async :as a]\n               :clj  [clojure.core.async :refer [go] :as a])\n            #?(:clj [gniazdo.core :as ws])\n            #?(:clj [cheshire.core :as json]))\n  #?(:cljs (:require-macros [cljs.core.async.macros :refer [go]]))\n  #?(:clj (:import [java.util UUID])))\n\n(def default-instance-name ::default)\n\n(def destroyed-instance ::destroyed-instance)\n\n(defn- cons-interceptor [ctx interceptor]\n  (update ctx :queue #(into (into empty-queue [interceptor]) %)))\n\n(defn- encode [obj]\n  #?(:cljs (js/JSON.stringify (clj->js obj))\n     :clj (json/encode obj)))\n\n(defn- message->data [m]\n  #?(:cljs (-> (aget m \"data\")\n               (js/JSON.parse)\n               (js->clj :keywordize-keys true))\n     :clj (json/decode m keyword)))\n\n(defn generate-query-id []\n  #?(:cljs (.substr (.toString (Math/random) 36) 2 8)\n     :clj (str (UUID/randomUUID))))\n\n(defn- ensure-query-id [event-name trimmed-event]\n  (if (contains? #{:re-graph.core/query :re-graph.core/mutate} event-name)\n    (if (= 3 (count trimmed-event)) ;; query, variables, callback-event\n      (vec (cons (generate-query-id) trimmed-event))\n      trimmed-event)\n    trimmed-event))\n\n(def re-graph-instance\n  (->interceptor\n   :id ::instance\n   :before (fn [ctx]\n             (let [re-graph  (:re-graph (get-coeffect ctx :db))\n                   event (get-coeffect ctx :event)\n                   provided-instance-name (first event)\n                   instance-name (if (contains? re-graph provided-instance-name) provided-instance-name default-instance-name)\n                   instance (get re-graph instance-name)\n                   event-name (first (get-coeffect ctx ::rfi/untrimmed-event))\n                   trimmed-event (->> (if (= provided-instance-name instance-name)\n                                        (subvec event 1)\n                                        event)\n                                      (ensure-query-id event-name))]\n\n               (cond\n                 (= instance ::destroyed-instance)\n                 ctx\n\n                 instance\n                 (-> ctx\n                     (assoc-coeffect :instance instance)\n                     (assoc-coeffect :instance-name instance-name)\n                     (assoc-coeffect :dispatchable-event (into [event-name instance-name] trimmed-event))\n                     (cons-interceptor (rfi/path :re-graph instance-name))\n                     (assoc-coeffect :event trimmed-event))\n\n                 :default\n                 (do (log/error \"No default instance of re-graph found but no valid instance name was provided. Valid instance names are:\" (keys re-graph)\n                                \"but was provided with\" provided-instance-name\n                                \"handling event\" event-name)\n                     ctx))))))\n\n(def interceptors\n  [re-frame/trim-v re-graph-instance])\n\n(defn- valid-graphql-errors?\n  \"Validates that response has a valid GraphQL errors map\"\n  [response]\n  (and (map? response)\n       (vector? (:errors response))\n       (seq (:errors response))\n       (every? map? (:errors response))))\n\n(defn- insert-http-status\n  \"Inserts the HTTP status into the response for 3 conditions:\n   1. Response contains a valid GraphQL errors map: update the map with HTTP status\n   2. Response is a map but does not contain a valid errors map: merge in default errors\n   3. Response is anything else: return default errors map\"\n  [response status]\n  (let [f (fn [errors] (mapv (fn [error] (update-in error [:extensions :status] #(or % status))) errors))\n        default-errors {:errors [{:message \"The HTTP call failed.\"\n                                  :extensions {:status status}}]}]\n    (cond\n      (valid-graphql-errors? response) (update response :errors f)\n      (map? response) (merge response default-errors)\n      :else default-errors)))\n\n(re-frame/reg-event-fx\n ::http-complete\n interceptors\n (fn [{:keys [db]} [query-id payload]]\n   (let [callback-event (get-in db [:http-requests query-id :callback])]\n     {:db (-> db\n              (update :subscriptions dissoc query-id)\n              (update :http-requests dissoc query-id))\n      :dispatch (conj callback-event payload)})))\n\n(re-frame/reg-fx\n ::call-abort\n (fn [abort-fn]\n   (abort-fn)))\n\n(re-frame/reg-event-db\n ::register-abort\n interceptors\n (fn [db [query-id abort-fn]]\n   (assoc-in db [:http-requests query-id :abort] abort-fn)))\n\n(re-frame/reg-fx\n ::send-http\n (fn [[instance-name query-id http-url {:keys [request payload]}]]\n   #?(:cljs (let [response-chan (http/post http-url (assoc request :json-params payload))]\n              (re-frame/dispatch [::register-abort instance-name query-id #(http-core/abort! response-chan)])\n\n              (go (let [{:keys [status body error-code]} (a/<! response-chan)]\n                    (re-frame/dispatch [::http-complete\n                                        instance-name\n                                        query-id\n                                        (if (= :no-error error-code)\n                                          body\n                                          (insert-http-status body status))]))))\n\n      :clj (let [future (http/post http-url\n                                   (-> request\n                                       (update :headers merge {\"Content-Type\" \"application/json\"\n                                                               \"Accept\" \"application/json\"})\n                                       (merge {:body (encode payload)\n                                               :as :json\n                                               :coerce :always\n                                               :async? true\n                                               :throw-exceptions false\n                                               :throw-entire-message? true}))\n                                   (fn [{:keys [status body]}]\n                                     (re-frame/dispatch [::http-complete\n                                                         instance-name\n                                                         query-id\n                                                         (if (http/unexceptional-status? status)\n                                                           body\n                                                           (insert-http-status body status))]))\n                                   (fn [exception]\n                                     (let [{:keys [status body]} (ex-data exception)]\n                                       (re-frame/dispatch [::http-complete instance-name query-id (insert-http-status body status)]))))]\n             (re-frame/dispatch [::register-abort instance-name query-id #(.cancel future)])))))\n\n(re-frame/reg-fx\n ::send-ws\n (fn [[websocket payload]]\n   #?(:cljs (.send websocket (encode payload))\n      :clj (ws/send-msg websocket (encode payload)))))\n\n(re-frame/reg-fx\n ::call-callback\n (fn [[callback-fn payload]]\n   (callback-fn payload)))\n\n(re-frame/reg-event-fx\n ::callback\n (fn [_ [_ callback-fn payload]]\n   {::call-callback [callback-fn payload]}))\n\n(re-frame/reg-event-fx\n ::on-ws-data\n interceptors\n (fn [{:keys [db] :as cofx} [subscription-id payload :as event]]\n   (if-let [callback-event (get-in db [:subscriptions (name subscription-id) :callback])]\n     {:dispatch (conj callback-event payload)}\n     (log/warn \"No callback-event found for subscription\" subscription-id))))\n\n(re-frame/reg-event-db\n ::on-ws-complete\n interceptors\n (fn [db [subscription-id]]\n   (update-in db [:subscriptions] dissoc (name subscription-id))))\n\n(re-frame/reg-event-fx\n ::connection-init\n interceptors\n  (fn [{:keys [db]} _]\n    (let [ws (get-in db [:websocket :connection])\n          payload (get-in db [:websocket :connection-init-payload])]\n      (when payload\n        {::send-ws [ws {:type \"connection_init\"\n                        :payload payload}]}))))\n\n(re-frame/reg-event-fx\n ::on-ws-open\n interceptors\n (fn [{:keys [db instance-name]} [ws]]\n   (merge\n    {:db (update db :websocket\n                    assoc\n                    :connection ws\n                    :ready? true\n                    :queue [])}\n\n    (let [resume? (get-in db [:websocket :resume-subscriptions?])\n          subscriptions (when resume? (->> db :subscriptions vals (map :event)))\n          queue (get-in db [:websocket :queue])\n          to-send (concat [[::connection-init instance-name]] subscriptions queue)]\n      {:dispatch-n to-send}))))\n\n(defn- deactivate-subscriptions [subscriptions]\n  (reduce-kv (fn [subs sub-id sub]\n               (assoc subs sub-id (assoc sub :active? false)))\n             {}\n             subscriptions))\n\n(re-frame/reg-event-fx\n ::on-ws-close\n interceptors\n (fn [{:keys [db instance-name]} _]\n   (merge\n    {:db (let [new-db (-> db\n                          (assoc-in [:websocket :ready?] false)\n                          (update :subscriptions deactivate-subscriptions))]\n           new-db)}\n    (when-let [reconnect-timeout (get-in db [:websocket :reconnect-timeout])]\n      {:dispatch-later [{:ms reconnect-timeout\n                         :dispatch [::reconnect-ws instance-name]}]}))))\n\n(defn- on-ws-message [instance-name]\n  (fn [m]\n    (let [{:keys [type id payload] :as data} (message->data m)]\n      (condp = type\n        \"data\"\n        (re-frame/dispatch [::on-ws-data instance-name id payload])\n\n        \"complete\"\n        (re-frame/dispatch [::on-ws-complete instance-name id])\n\n        \"error\"\n        (re-frame/dispatch [::on-ws-data instance-name id {:errors payload}])\n\n        (log/debug \"Ignoring graphql-ws event \" instance-name \" - \" type)))))\n\n(defn- on-open\n  ([instance-name]\n   (fn [ws]\n     ((on-open instance-name ws))))\n  ([instance-name ws]\n   (fn []\n     (re-frame/dispatch [::on-ws-open instance-name ws]))))\n\n(defn- on-close [instance-name]\n  (fn [& args]\n    (re-frame/dispatch [::on-ws-close instance-name])))\n\n(defn- on-error [instance-name]\n  (fn [e]\n    (log/warn \"GraphQL websocket error\" instance-name e)))\n\n(re-frame/reg-event-fx\n ::reconnect-ws\n interceptors\n (fn [{:keys [db instance-name]} _]\n   (when-not (get-in db [:websocket :ready?])\n     {::connect-ws [instance-name (get-in db [:websocket :url]) (get-in db [:websocket :sub-protocol])]})))\n\n(re-frame/reg-fx\n ::connect-ws\n (fn [[instance-name ws-url sub-protocol]]\n   #?(:cljs (let [ws (cond\n                       (nil? sub-protocol)\n                       (js/WebSocket. ws-url)\n                       :else ;; non-nil sub protocol\n                       (js/WebSocket. ws-url sub-protocol))]\n              (aset ws \"onmessage\" (on-ws-message instance-name))\n              (aset ws \"onopen\" (on-open instance-name ws))\n              (aset ws \"onclose\" (on-close instance-name))\n              (aset ws \"onerror\" (on-error instance-name)))\n      :clj (let [ws (apply ws/connect ws-url\n                           (into [:on-receive (on-ws-message instance-name)\n                                  :on-close (on-close instance-name)\n                                  :on-error (on-error instance-name)]\n                                  (when sub-protocol\n                                    [:subprotocols [sub-protocol]])))]\n             ((on-open instance-name ws))))))\n\n(re-frame/reg-fx\n ::disconnect-ws\n (fn [[ws]]\n   #?(:cljs (.close ws)\n      :clj (ws/close ws))))\n\n(defn default-ws-url []\n  #?(:cljs\n     (when (and (exists? js/window) (exists? (.-location js/window)))\n       (let [host-and-port (.-host js/window.location)\n             ssl? (re-find #\"^https\" (.-origin js/window.location))]\n         (str (if ssl? \"wss\" \"ws\") \"://\" host-and-port \"/graphql-ws\")))\n     :clj nil))\n\n#?(:clj\n   (defn sync-wrapper\n     \"Wraps the given function to allow the GraphQL result to be returned\n      synchronously. Will return a GraphQL error response if no response is\n      received before the timeout (default 3000ms) expires. Will throw if the\n      call returns an exception.\"\n     [f & args]\n     (let [timeout  (when (int? (last args)) (last args))\n           timeout' (or timeout 3000)\n           p        (promise)\n           callback (fn [result] (deliver p result))\n           args'    (conj (vec (if timeout (butlast args) args))\n                          callback)]\n       (apply f args')\n\n       ;; explicit timeout to avoid unreliable aborts from underlying implementations\n       (let [result (deref p timeout' ::timeout)]\n         (if (= ::timeout result)\n           {:errors [{:message \"re-graph did not receive response from server\"\n                      :timeout timeout'\n                      :args args}]}\n           result)))))\n"]}