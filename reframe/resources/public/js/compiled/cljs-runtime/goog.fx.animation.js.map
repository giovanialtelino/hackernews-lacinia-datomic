{
"version":3,
"file":"goog.fx.animation.js",
"lineCount":263,
"mappings":"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",
"sources":["goog/fx/animation.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Classes for doing animations and visual effects.\n *\n * (Based loosly on my animation code for 13thparallel.org, with extra\n * inspiration from the DojoToolkit's modifications to my code)\n * @author arv@google.com (Erik Arvidsson)\n */\n\ngoog.provide('goog.fx.Animation');\ngoog.provide('goog.fx.Animation.EventType');\ngoog.provide('goog.fx.Animation.State');\ngoog.provide('goog.fx.AnimationEvent');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.events.Event');\ngoog.require('goog.fx.Transition');\ngoog.require('goog.fx.TransitionBase');\ngoog.require('goog.fx.anim');\ngoog.require('goog.fx.anim.Animated');\n\n\n\n/**\n * Constructor for an animation object.\n * @param {Array<number>} start Array for start coordinates.\n * @param {Array<number>} end Array for end coordinates.\n * @param {number} duration Length of animation in milliseconds.\n * @param {Function=} opt_acc Acceleration function, returns 0-1 for inputs 0-1.\n * @constructor\n * @struct\n * @implements {goog.fx.anim.Animated}\n * @implements {goog.fx.Transition}\n * @extends {goog.fx.TransitionBase}\n */\ngoog.fx.Animation = function(start, end, duration, opt_acc) {\n  goog.fx.Animation.base(this, 'constructor');\n\n  if (!goog.isArray(start) || !goog.isArray(end)) {\n    throw new Error('Start and end parameters must be arrays');\n  }\n\n  if (start.length != end.length) {\n    throw new Error('Start and end points must be the same length');\n  }\n\n  /**\n   * Start point.\n   * @type {Array<number>}\n   * @protected\n   */\n  this.startPoint = start;\n\n  /**\n   * End point.\n   * @type {Array<number>}\n   * @protected\n   */\n  this.endPoint = end;\n\n  /**\n   * Duration of animation in milliseconds.\n   * @type {number}\n   * @protected\n   */\n  this.duration = duration;\n\n  /**\n   * Acceleration function, which must return a number between 0 and 1 for\n   * inputs between 0 and 1.\n   * @type {Function|undefined}\n   * @private\n   */\n  this.accel_ = opt_acc;\n\n  /**\n   * Current coordinate for animation.\n   * @type {Array<number>}\n   * @protected\n   */\n  this.coords = [];\n\n  /**\n   * Whether the animation should use \"right\" rather than \"left\" to position\n   * elements in RTL.  This is a temporary flag to allow clients to transition\n   * to the new behavior at their convenience.  At some point it will be the\n   * default.\n   * @type {boolean}\n   * @private\n   */\n  this.useRightPositioningForRtl_ = false;\n\n  /**\n   * Current frame rate.\n   * @private {number}\n   */\n  this.fps_ = 0;\n\n  /**\n   * Percent of the way through the animation.\n   * @protected {number}\n   */\n  this.progress = 0;\n\n  /**\n   * Timestamp for when last frame was run.\n   * @protected {?number}\n   */\n  this.lastFrame = null;\n};\ngoog.inherits(goog.fx.Animation, goog.fx.TransitionBase);\n\n\n/**\n * @return {number} The duration of this animation in milliseconds.\n */\ngoog.fx.Animation.prototype.getDuration = function() {\n  return this.duration;\n};\n\n\n/**\n * Sets whether the animation should use \"right\" rather than \"left\" to position\n * elements.  This is a temporary flag to allow clients to transition\n * to the new component at their convenience.  At some point \"right\" will be\n * used for RTL elements by default.\n * @param {boolean} useRightPositioningForRtl True if \"right\" should be used for\n *     positioning, false if \"left\" should be used for positioning.\n */\ngoog.fx.Animation.prototype.enableRightPositioningForRtl = function(\n    useRightPositioningForRtl) {\n  this.useRightPositioningForRtl_ = useRightPositioningForRtl;\n};\n\n\n/**\n * Whether the animation should use \"right\" rather than \"left\" to position\n * elements.  This is a temporary flag to allow clients to transition\n * to the new component at their convenience.  At some point \"right\" will be\n * used for RTL elements by default.\n * @return {boolean} True if \"right\" should be used for positioning, false if\n *     \"left\" should be used for positioning.\n */\ngoog.fx.Animation.prototype.isRightPositioningForRtlEnabled = function() {\n  return this.useRightPositioningForRtl_;\n};\n\n\n/**\n * Events fired by the animation.\n * @enum {string}\n */\ngoog.fx.Animation.EventType = {\n  /**\n   * Dispatched when played for the first time OR when it is resumed.\n   * @deprecated Use goog.fx.Transition.EventType.PLAY.\n   */\n  PLAY: goog.fx.Transition.EventType.PLAY,\n\n  /**\n   * Dispatched only when the animation starts from the beginning.\n   * @deprecated Use goog.fx.Transition.EventType.BEGIN.\n   */\n  BEGIN: goog.fx.Transition.EventType.BEGIN,\n\n  /**\n   * Dispatched only when animation is restarted after a pause.\n   * @deprecated Use goog.fx.Transition.EventType.RESUME.\n   */\n  RESUME: goog.fx.Transition.EventType.RESUME,\n\n  /**\n   * Dispatched when animation comes to the end of its duration OR stop\n   * is called.\n   * @deprecated Use goog.fx.Transition.EventType.END.\n   */\n  END: goog.fx.Transition.EventType.END,\n\n  /**\n   * Dispatched only when stop is called.\n   * @deprecated Use goog.fx.Transition.EventType.STOP.\n   */\n  STOP: goog.fx.Transition.EventType.STOP,\n\n  /**\n   * Dispatched only when animation comes to its end naturally.\n   * @deprecated Use goog.fx.Transition.EventType.FINISH.\n   */\n  FINISH: goog.fx.Transition.EventType.FINISH,\n\n  /**\n   * Dispatched when an animation is paused.\n   * @deprecated Use goog.fx.Transition.EventType.PAUSE.\n   */\n  PAUSE: goog.fx.Transition.EventType.PAUSE,\n\n  /**\n   * Dispatched each frame of the animation.  This is where the actual animator\n   * will listen.\n   */\n  ANIMATE: 'animate',\n\n  /**\n   * Dispatched when the animation is destroyed.\n   */\n  DESTROY: 'destroy'\n};\n\n\n/**\n * @deprecated Use goog.fx.anim.TIMEOUT.\n */\ngoog.fx.Animation.TIMEOUT = goog.fx.anim.TIMEOUT;\n\n\n/**\n * Enum for the possible states of an animation.\n * @deprecated Use goog.fx.Transition.State instead.\n * @enum {number}\n */\ngoog.fx.Animation.State = goog.fx.TransitionBase.State;\n\n\n/**\n * @deprecated Use goog.fx.anim.setAnimationWindow.\n * @param {Window} animationWindow The window in which to animate elements.\n */\ngoog.fx.Animation.setAnimationWindow = function(animationWindow) {\n  goog.fx.anim.setAnimationWindow(animationWindow);\n};\n\n\n/**\n * Starts or resumes an animation.\n * @param {boolean=} opt_restart Whether to restart the\n *     animation from the beginning if it has been paused.\n * @return {boolean} Whether animation was started.\n * @override\n */\ngoog.fx.Animation.prototype.play = function(opt_restart) {\n  if (opt_restart || this.isStopped()) {\n    this.progress = 0;\n    this.coords = this.startPoint;\n  } else if (this.isPlaying()) {\n    return false;\n  }\n\n  goog.fx.anim.unregisterAnimation(this);\n\n  var now = /** @type {number} */ (goog.now());\n\n  this.startTime = now;\n  if (this.isPaused()) {\n    this.startTime -= this.duration * this.progress;\n  }\n\n  this.endTime = this.startTime + this.duration;\n  this.lastFrame = this.startTime;\n\n  if (!this.progress) {\n    this.onBegin();\n  }\n\n  this.onPlay();\n\n  if (this.isPaused()) {\n    this.onResume();\n  }\n\n  this.setStatePlaying();\n\n  goog.fx.anim.registerAnimation(this);\n  this.cycle(now);\n\n  return true;\n};\n\n\n/**\n * Stops the animation.\n * @param {boolean=} opt_gotoEnd If true the animation will move to the\n *     end coords.\n * @override\n */\ngoog.fx.Animation.prototype.stop = function(opt_gotoEnd) {\n  goog.fx.anim.unregisterAnimation(this);\n  this.setStateStopped();\n\n  if (opt_gotoEnd) {\n    this.progress = 1;\n  }\n\n  this.updateCoords_(this.progress);\n\n  this.onStop();\n  this.onEnd();\n};\n\n\n/**\n * Pauses the animation (iff it's playing).\n * @override\n */\ngoog.fx.Animation.prototype.pause = function() {\n  if (this.isPlaying()) {\n    goog.fx.anim.unregisterAnimation(this);\n    this.setStatePaused();\n    this.onPause();\n  }\n};\n\n\n/**\n * @return {number} The current progress of the animation, the number\n *     is between 0 and 1 inclusive.\n */\ngoog.fx.Animation.prototype.getProgress = function() {\n  return this.progress;\n};\n\n\n/**\n * Sets the progress of the animation.\n * @param {number} progress The new progress of the animation.\n */\ngoog.fx.Animation.prototype.setProgress = function(progress) {\n  this.progress = progress;\n  if (this.isPlaying()) {\n    var now = goog.now();\n    // If the animation is already playing, we recompute startTime and endTime\n    // such that the animation plays consistently, that is:\n    // now = startTime + progress * duration.\n    this.startTime = now - this.duration * this.progress;\n    this.endTime = this.startTime + this.duration;\n  }\n};\n\n\n/**\n * Disposes of the animation.  Stops an animation, fires a 'destroy' event and\n * then removes all the event handlers to clean up memory.\n * @override\n * @protected\n */\ngoog.fx.Animation.prototype.disposeInternal = function() {\n  if (!this.isStopped()) {\n    this.stop(false);\n  }\n  this.onDestroy();\n  goog.fx.Animation.base(this, 'disposeInternal');\n};\n\n\n/**\n * Stops an animation, fires a 'destroy' event and then removes all the event\n * handlers to clean up memory.\n * @deprecated Use dispose() instead.\n */\ngoog.fx.Animation.prototype.destroy = function() {\n  this.dispose();\n};\n\n\n/** @override */\ngoog.fx.Animation.prototype.onAnimationFrame = function(now) {\n  this.cycle(now);\n};\n\n\n/**\n * Handles the actual iteration of the animation in a timeout\n * @param {number} now The current time.\n */\ngoog.fx.Animation.prototype.cycle = function(now) {\n  goog.asserts.assertNumber(this.startTime);\n  goog.asserts.assertNumber(this.endTime);\n  goog.asserts.assertNumber(this.lastFrame);\n  // Happens in rare system clock reset.\n  if (now < this.startTime) {\n    this.endTime = now + this.endTime - this.startTime;\n    this.startTime = now;\n  }\n  this.progress = (now - this.startTime) / (this.endTime - this.startTime);\n\n  if (this.progress > 1) {\n    this.progress = 1;\n  }\n\n  this.fps_ = 1000 / (now - this.lastFrame);\n  this.lastFrame = now;\n\n  this.updateCoords_(this.progress);\n\n  // Animation has finished.\n  if (this.progress == 1) {\n    this.setStateStopped();\n    goog.fx.anim.unregisterAnimation(this);\n\n    this.onFinish();\n    this.onEnd();\n\n    // Animation is still under way.\n  } else if (this.isPlaying()) {\n    this.onAnimate();\n  }\n};\n\n\n/**\n * Calculates current coordinates, based on the current state.  Applies\n * the acceleration function if it exists.\n * @param {number} t Percentage of the way through the animation as a decimal.\n * @private\n */\ngoog.fx.Animation.prototype.updateCoords_ = function(t) {\n  if (goog.isFunction(this.accel_)) {\n    t = this.accel_(t);\n  }\n  this.coords = new Array(this.startPoint.length);\n  for (var i = 0; i < this.startPoint.length; i++) {\n    this.coords[i] =\n        (this.endPoint[i] - this.startPoint[i]) * t + this.startPoint[i];\n  }\n};\n\n\n/**\n * Dispatches the ANIMATE event. Sub classes should override this instead\n * of listening to the event.\n * @protected\n */\ngoog.fx.Animation.prototype.onAnimate = function() {\n  this.dispatchAnimationEvent(goog.fx.Animation.EventType.ANIMATE);\n};\n\n\n/**\n * Dispatches the DESTROY event. Sub classes should override this instead\n * of listening to the event.\n * @protected\n */\ngoog.fx.Animation.prototype.onDestroy = function() {\n  this.dispatchAnimationEvent(goog.fx.Animation.EventType.DESTROY);\n};\n\n\n/** @override */\ngoog.fx.Animation.prototype.dispatchAnimationEvent = function(type) {\n  this.dispatchEvent(new goog.fx.AnimationEvent(type, this));\n};\n\n\n\n/**\n * Class for an animation event object.\n * @param {string} type Event type.\n * @param {goog.fx.Animation} anim An animation object.\n * @constructor\n * @struct\n * @extends {goog.events.Event}\n */\ngoog.fx.AnimationEvent = function(type, anim) {\n  goog.fx.AnimationEvent.base(this, 'constructor', type);\n\n  /**\n   * The current coordinates.\n   * @type {Array<number>}\n   */\n  this.coords = anim.coords;\n\n  /**\n   * The x coordinate.\n   * @type {number}\n   */\n  this.x = anim.coords[0];\n\n  /**\n   * The y coordinate.\n   * @type {number}\n   */\n  this.y = anim.coords[1];\n\n  /**\n   * The z coordinate.\n   * @type {number}\n   */\n  this.z = anim.coords[2];\n\n  /**\n   * The current duration.\n   * @type {number}\n   */\n  this.duration = anim.duration;\n\n  /**\n   * The current progress.\n   * @type {number}\n   */\n  this.progress = anim.getProgress();\n\n  /**\n   * Frames per second so far.\n   */\n  this.fps = anim.fps_;\n\n  /**\n   * The state of the animation.\n   * @type {number}\n   */\n  this.state = anim.getStateInternal();\n\n  /**\n   * The animation object.\n   * @type {goog.fx.Animation}\n   */\n  // TODO(arv): This can be removed as this is the same as the target\n  this.anim = anim;\n};\ngoog.inherits(goog.fx.AnimationEvent, goog.events.Event);\n\n\n/**\n * Returns the coordinates as integers (rounded to nearest integer).\n * @return {!Array<number>} An array of the coordinates rounded to\n *     the nearest integer.\n */\ngoog.fx.AnimationEvent.prototype.coordsAsInts = function() {\n  return goog.array.map(this.coords, Math.round);\n};\n"],
"names":["goog","provide","require","fx","Animation","goog.fx.Animation","start","end","duration","opt_acc","base","isArray","Error","length","startPoint","endPoint","accel_","coords","useRightPositioningForRtl_","fps_","progress","lastFrame","inherits","TransitionBase","prototype","getDuration","goog.fx.Animation.prototype.getDuration","enableRightPositioningForRtl","goog.fx.Animation.prototype.enableRightPositioningForRtl","useRightPositioningForRtl","isRightPositioningForRtlEnabled","goog.fx.Animation.prototype.isRightPositioningForRtlEnabled","EventType","PLAY","Transition","BEGIN","RESUME","END","STOP","FINISH","PAUSE","ANIMATE","DESTROY","TIMEOUT","anim","State","setAnimationWindow","goog.fx.Animation.setAnimationWindow","animationWindow","play","goog.fx.Animation.prototype.play","opt_restart","isStopped","isPlaying","unregisterAnimation","now","startTime","isPaused","endTime","onBegin","onPlay","onResume","setStatePlaying","registerAnimation","cycle","stop","goog.fx.Animation.prototype.stop","opt_gotoEnd","setStateStopped","updateCoords_","onStop","onEnd","pause","goog.fx.Animation.prototype.pause","setStatePaused","onPause","getProgress","goog.fx.Animation.prototype.getProgress","setProgress","goog.fx.Animation.prototype.setProgress","disposeInternal","goog.fx.Animation.prototype.disposeInternal","onDestroy","destroy","goog.fx.Animation.prototype.destroy","dispose","onAnimationFrame","goog.fx.Animation.prototype.onAnimationFrame","goog.fx.Animation.prototype.cycle","asserts","assertNumber","onFinish","onAnimate","goog.fx.Animation.prototype.updateCoords_","t","isFunction","Array","i","goog.fx.Animation.prototype.onAnimate","dispatchAnimationEvent","goog.fx.Animation.prototype.onDestroy","goog.fx.Animation.prototype.dispatchAnimationEvent","type","dispatchEvent","AnimationEvent","goog.fx.AnimationEvent","x","y","z","fps","state","getStateInternal","events","Event","coordsAsInts","goog.fx.AnimationEvent.prototype.coordsAsInts","array","map","Math","round"]
}
