{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$less.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/less.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$less\"] = function(global,require,module,exports) {\nmodule.exports = function(hljs) {\n  var IDENT_RE        = '[\\\\w-]+'; // yes, Less identifiers may begin with a digit\n  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';\n\n  /* Generic Modes */\n\n  var RULES = [], VALUE = []; // forward def. for recursive modes\n\n  var STRING_MODE = function(c) { return {\n    // Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\n    className: 'string', begin: '~?' + c + '.*?' + c\n  };};\n\n  var IDENT_MODE = function(name, begin, relevance) { return {\n    className: name, begin: begin, relevance: relevance\n  };};\n\n  var PARENS_MODE = {\n    // used only to properly balance nested parens inside mixin call, def. arg list\n    begin: '\\\\(', end: '\\\\)', contains: VALUE, relevance: 0\n  };\n\n  // generic Less highlighter (used almost everywhere except selectors):\n  VALUE.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    STRING_MODE(\"'\"),\n    STRING_MODE('\"'),\n    hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(\n    {\n      begin: '(url|data-uri)\\\\(',\n      starts: {className: 'string', end: '[\\\\)\\\\n]', excludeEnd: true}\n    },\n    IDENT_MODE('number', '#[0-9A-Fa-f]+\\\\b'),\n    PARENS_MODE,\n    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),\n    IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),\n    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string\n    { // @media features (it\u2019s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):\n      className: 'attribute', begin: IDENT_RE + '\\\\s*:', end: ':', returnBegin: true, excludeEnd: true\n    },\n    {\n      className: 'meta',\n      begin: '!important'\n    }\n  );\n\n  var VALUE_WITH_RULESETS = VALUE.concat({\n    begin: '{', end: '}', contains: RULES\n  });\n\n  var MIXIN_GUARD_MODE = {\n    beginKeywords: 'when', endsWithParent: true,\n    contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE\u2019s 'function' match\n  };\n\n  /* Rule-Level Modes */\n\n  var RULE_MODE = {\n    begin: INTERP_IDENT_RE + '\\\\s*:', returnBegin: true, end: '[;}]',\n    relevance: 0,\n    contains: [\n      {\n        className: 'attribute',\n        begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,\n        starts: {\n          endsWithParent: true, illegal: '[<=$]',\n          relevance: 0,\n          contains: VALUE\n        }\n      }\n    ]\n  };\n\n  var AT_RULE_MODE = {\n    className: 'keyword',\n    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b',\n    starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}\n  };\n\n  // variable definitions and calls\n  var VAR_RULE_MODE = {\n    className: 'variable',\n    variants: [\n      // using more strict pattern for higher relevance to increase chances of Less detection.\n      // this is *the only* Less specific statement used in most of the sources, so...\n      // (we\u2019ll still often loose to the css-parser unless there's '//' comment,\n      // simply because 1 variable just can't beat 99 properties :)\n      {begin: '@' + IDENT_RE + '\\\\s*:', relevance: 15},\n      {begin: '@' + IDENT_RE}\n    ],\n    starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}\n  };\n\n  var SELECTOR_MODE = {\n    // first parse unambiguous selectors (i.e. those not starting with tag)\n    // then fall into the scary lookahead-discriminator variant.\n    // this mode also handles mixin definitions and calls\n    variants: [{\n      begin: '[\\\\.#:&\\\\[>]', end: '[;{}]'  // mixin calls end with ';'\n      }, {\n      begin: INTERP_IDENT_RE, end: '{'\n    }],\n    returnBegin: true,\n    returnEnd:   true,\n    illegal: '[<=\\'$\"]',\n    relevance: 0,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      MIXIN_GUARD_MODE,\n      IDENT_MODE('keyword',  'all\\\\b'),\n      IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),     // otherwise it\u2019s identified as tag\n      IDENT_MODE('selector-tag',  INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes \"tags\"\n      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),\n      IDENT_MODE('selector-class', '\\\\.' + INTERP_IDENT_RE, 0),\n      IDENT_MODE('selector-tag',  '&', 0),\n      {className: 'selector-attr', begin: '\\\\[', end: '\\\\]'},\n      {className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\"'.]+/},\n      {begin: '\\\\(', end: '\\\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins\n      {begin: '!important'} // eat !important after mixin call or it will be colored as tag\n    ]\n  };\n\n  RULES.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    AT_RULE_MODE,\n    VAR_RULE_MODE,\n    RULE_MODE,\n    SELECTOR_MODE\n  );\n\n  return {\n    case_insensitive: true,\n    illegal: '[=>\\'/<($\"]',\n    contains: RULES\n  };\n};\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","hljs","RULES","VALUE","STRING_MODE","c","className","begin","IDENT_MODE","name","relevance","PARENS_MODE","end","contains","push","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","CSS_NUMBER_MODE","starts","excludeEnd","returnBegin","VALUE_WITH_RULESETS","concat","MIXIN_GUARD_MODE","beginKeywords","endsWithParent","RULE_MODE","INTERP_IDENT_RE","illegal","AT_RULE_MODE","returnEnd","VAR_RULE_MODE","variants","SELECTOR_MODE","case_insensitive"]
}
