{
"version":3,
"file":"goog.debug.formatter.js",
"lineCount":262,
"mappings":"AAqBAA,IAAAC,QAAA,CAAa,sBAAb,CAAA;AACAD,IAAAC,QAAA,CAAa,0BAAb,CAAA;AACAD,IAAAC,QAAA,CAAa,0BAAb,CAAA;AAEAD,IAAAE,QAAA,CAAa,YAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,mBAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,iCAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,oBAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,mBAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,gCAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,mBAAb,CAAA;AAWA;;;;AAAAF,IAAAG,MAAAC,UAAA,GAAuBC,QAAQ,CAACC,UAAD,CAAa;AAC1C,MAAAC,QAAA,GAAeD,UAAf,IAA6B,EAA7B;AAOA,0DAAA,IAAAE,mBAAA,GACIR,IAAAG,MAAAM,qBAAAC,mBAAA,EADJ;AAR0C,CAA5C;AAiBA,uBAAAV,IAAAG,MAAAC,UAAAO,UAAAC,cAAA,GAA+C,IAA/C;AAOA,uBAAAZ,IAAAG,MAAAC,UAAAO,UAAAE,iBAAA,GAAkD,IAAlD;AAOA,uBAAAb,IAAAG,MAAAC,UAAAO,UAAAG,iBAAA,GAAkD,IAAlD;AAOA,uBAAAd,IAAAG,MAAAC,UAAAO,UAAAI,eAAA,GAAgD,IAAhD;AAOA,uBAAAf,IAAAG,MAAAC,UAAAO,UAAAK,kBAAA,GAAmD,KAAnD;AAOA,uBAAAhB,IAAAG,MAAAC,UAAAO,UAAAM,kBAAA,GAAmD,KAAnD;AAQA;;;;AAAAjB,IAAAG,MAAAC,UAAAO,UAAAO,aAAA,GAA8ClB,IAAAmB,eAA9C;AAQA;;;;AAAAnB,IAAAG,MAAAC,UAAAO,UAAAS,mBAAA,GAAoDpB,IAAAmB,eAApD;AAQA;;;AAAAnB,IAAAG,MAAAC,UAAAO,UAAAU,qBAAA,GAAsDC,QAAQ,CAACC,QAAD,CAAW;AACvE,MAAAf,mBAAA,GAA0Be,QAA1B;AADuE,CAAzE;AAUA;;;AAAAvB,IAAAG,MAAAC,UAAAO,UAAAa,qBAAA,GAAsDC,QAAQ,EAAG;AAC/D,SAAO,IAAAjB,mBAAP;AAD+D,CAAjE;AAQAR,IAAAG,MAAAC,UAAAO,UAAAe,uBAAA,GAAwDC,QAAQ,EAAG;AACjE,MAAAnB,mBAAAoB,MAAA,EAAA;AADiE,CAAnE;AAWA;;;;;AAAA5B,IAAAG,MAAAC,UAAAyB,kBAAA,GAAyCC,QAAQ,CAACC,SAAD,CAAY;AAC3D,MAAIC,OAAO,IAAIC,IAAJ,CAASF,SAAAG,UAAA,EAAT,CAAX;AACA,SAAOlC,IAAAG,MAAAC,UAAA+B,mBAAA,CAAyCH,IAAAI,YAAA,EAAzC,GAA8D,IAA9D,CAAP,GACIpC,IAAAG,MAAAC,UAAA+B,mBAAA,CAAyCH,IAAAK,SAAA,EAAzC,GAA2D,CAA3D,CADJ,GAEIrC,IAAAG,MAAAC,UAAA+B,mBAAA,CAAwCH,IAAAM,QAAA,EAAxC,CAFJ,GAE8D,GAF9D,GAGItC,IAAAG,MAAAC,UAAA+B,mBAAA,CAAwCH,IAAAO,SAAA,EAAxC,CAHJ,GAG+D,GAH/D,GAIIvC,IAAAG,MAAAC,UAAA+B,mBAAA,CAAwCH,IAAAQ,WAAA,EAAxC,CAJJ,GAIiE,GAJjE,GAKIxC,IAAAG,MAAAC,UAAA+B,mBAAA,CAAwCH,IAAAS,WAAA,EAAxC,CALJ,GAKiE,GALjE,GAMIzC,IAAAG,MAAAC,UAAA+B,mBAAA,CACIO,IAAAC,MAAA,CAAWX,IAAAY,gBAAA,EAAX,GAAoC,EAApC,CADJ,CANJ;AAF2D,CAA7D;AAoBA;;;;;AAAA5C,IAAAG,MAAAC,UAAA+B,mBAAA,GAA0CU,QAAQ,CAACC,CAAD,CAAI;AACpD,MAAIA,CAAJ,GAAQ,EAAR;AACE,WAAO,GAAP,GAAaA,CAAb;AADF;AAGA,SAAOC,MAAA,CAAOD,CAAP,CAAP;AAJoD,CAAtD;AAkBA;;;;;;AAAA9C,IAAAG,MAAAC,UAAA4C,iBAAA,GAAwCC,QAAQ,CAAClB,SAAD,EAAYmB,iBAAZ,CAA+B;AAC7E,MAAIC,KAAKpB,SAAAG,UAAA,EAALiB,GAA6BD,iBAAjC;AACA,MAAIE,MAAMD,EAANC,GAAW,IAAf;AACA,MAAIC,MAAMD,GAAAE,QAAA,CAAY,CAAZ,CAAV;AAEA,MAAIC,kBAAkB,CAAtB;AACA,MAAIH,GAAJ,GAAU,CAAV;AACEG,mBAAA,GAAkB,CAAlB;AADF;AAGE,WAAOH,GAAP,GAAa,GAAb,CAAkB;AAChBG,qBAAA,EAAA;AACAH,SAAA,IAAO,EAAP;AAFgB;AAHpB;AAQA,SAAOG,eAAA,EAAP,GAA2B,CAA3B;AACEF,OAAA,GAAM,GAAN,GAAYA,GAAZ;AADF;AAGA,SAAOA,GAAP;AAjB6E,CAA/E;AA8BA;;;;;AAAArD,IAAAG,MAAAqD,cAAA,GAA2BC,QAAQ,CAACnD,UAAD,CAAa;AAC9CN,MAAAG,MAAAC,UAAAsD,KAAA,CAA0B,IAA1B,EAAgCpD,UAAhC,CAAA;AAD8C,CAAhD;AAGAN,IAAA2D,SAAA,CAAc3D,IAAAG,MAAAqD,cAAd,EAAwCxD,IAAAG,MAAAC,UAAxC,CAAA;AAaA;;;;;AAAAJ,IAAAG,MAAAqD,cAAAI,gBAAA,GAA2CC,QAAQ,CAACC,GAAD,EAAMC,EAAN,CAAU;AAC3D,MAAIC,OAAOhE,IAAAG,MAAAqD,cAAAS,sBAAA,CAA+CH,GAA/C,EAAoDC,EAApD,CAAX;AACA,SAAO/D,IAAAgE,KAAAE,SAAAC,OAAA,CAA0BH,IAA1B,CAAP;AAF2D,CAA7D;AAgBA;;;;;AAAAhE,IAAAG,MAAAqD,cAAAS,sBAAA,GAAiDG,QAAQ,CAACN,GAAD,EAAMC,EAAN,CAAU;AACjE,KAAI;AACF,QAAIM,IAAIrE,IAAAG,MAAAmE,qBAAA,CAAgCR,GAAhC,CAAR;AAEA,QAAIS,gBACAvE,IAAAG,MAAAqD,cAAAgB,qBAAA,CAA8CH,CAAAI,SAA9C,CADJ;AAEA,QAAIC,QAAQ1E,IAAAgE,KAAAE,SAAAS,OAAA,CACR3E,IAAAgE,KAAAE,SAAAU,sCAAA,CACI,WADJ,GACkBP,CAAAQ,QADlB,GAC8B,SAD9B,CADQ,EAGR7E,IAAAgE,KAAAE,SAAAY,OAAA,CACI,GADJ,EACS,CAACC,KAAMR,aAAP,EAAsBS,OAAQ,MAA9B,CADT,EACgDX,CAAAI,SADhD,CAHQ,EAKRzE,IAAAgE,KAAAE,SAAAU,sCAAA,CACI,UADJ,GACiBP,CAAAY,WADjB,GACgC,sBADhC,GACyDZ,CAAAa,MADzD,GAEI,QAFJ,GAGI,gCAHJ,GAGuClF,IAAAG,MAAAgF,cAAA,CAAyBpB,EAAzB,CAHvC,GAII,QAJJ,CALQ,CAAZ;AAUA,WAAOW,KAAP;AAfE,GAgBF,QAAOU,EAAP,CAAW;AACX,WAAOpF,IAAAgE,KAAAE,SAAAU,sCAAA,CACH,0DADG,GAC0DQ,EAD1D,CAAP;AADW;AAjBoD,CAAnE;AA8BA;;;;;AAAApF,IAAAG,MAAAqD,cAAAgB,qBAAA,GAAgDa,QAAQ,CAACZ,QAAD,CAAW;AACjE,MAAIA,QAAJ,IAAgB,IAAhB;AACEA,YAAA,GAAW,EAAX;AADF;AAGA,MAAI,CAAC,eAAAa,KAAA,CAAqBb,QAArB,CAAL;AACE,WAAOzE,IAAAgE,KAAAuB,QAAAC,aAAA,CACHxF,IAAAyF,OAAAC,MAAAC,KAAA,CAAuB,kBAAvB,CADG,CAAP;AADF;AAIA,MAAIC,oBAAoB5F,IAAAgE,KAAAuB,QAAAM,SAAA,CAA2BpB,QAA3B,CAAxB;AACA,SAAOzE,IAAAgE,KAAA8B,qBAAAC,4CAAA,CAEC/F,IAAAyF,OAAAC,MAAAC,KAAA,CAAuB,wCAAvB,CAFD,EAGC,cAHD,GAGkB3F,IAAAgE,KAAAuB,QAAApB,OAAA,CAAyByB,iBAAzB,CAHlB,CAAP;AATiE,CAAnE;AAsBA,iCAAA5F,IAAAG,MAAAqD,cAAA7C,UAAAK,kBAAA,GAAuD,IAAvD;AASA;;;;;AAAAhB,IAAAG,MAAAqD,cAAA7C,UAAAO,aAAA,GAAkD8E,QAAQ,CAACjE,SAAD,CAAY;AACpE,MAAI,CAACA,SAAL;AACE,WAAO,EAAP;AADF;AAIA,SAAO,IAAAX,mBAAA,CAAwBW,SAAxB,CAAAkE,oBAAA,EAAP;AALoE,CAAtE;AAeA;;;;;AAAAjG,IAAAG,MAAAqD,cAAA7C,UAAAS,mBAAA,GAAwD8E,QAAQ,CAACnE,SAAD,CAAY;AAC1E,MAAI,CAACA,SAAL;AACE,WAAO/B,IAAAgE,KAAAE,SAAAiC,MAAP;AADF;AAIA,MAAIC,SAAJ;AACA,SAAQrE,SAAAsE,SAAA,EAAAC,MAAR;AACE,SAAKtG,IAAAG,MAAAoG,OAAAC,MAAAC,MAAAH,MAAL;AACEF,eAAA,GAAY,QAAZ;AACA;AACF,SAAKpG,IAAAG,MAAAoG,OAAAC,MAAAE,OAAAJ,MAAL;AACEF,eAAA,GAAY,SAAZ;AACA;AACF,SAAKpG,IAAAG,MAAAoG,OAAAC,MAAAG,QAAAL,MAAL;AACEF,eAAA,GAAY,OAAZ;AACA;AACF,SAAKpG,IAAAG,MAAAoG,OAAAC,MAAAI,KAAAN,MAAL;AACEF,eAAA,GAAY,OAAZ;AACA;AACF,SAAKpG,IAAAG,MAAAoG,OAAAC,MAAAK,KAAAP,MAAL;AACA;AACEF,eAAA,GAAY,OAAZ;AACA;AAhBJ;AAoBA,MAAIU,KAAK,EAAT;AACAA,IAAAC,KAAA,CAAQ,IAAAxG,QAAR,EAAsB,GAAtB,CAAA;AACA,MAAI,IAAAM,iBAAJ;AACEiG,MAAAC,KAAA,CAAQ,GAAR,EAAa/G,IAAAG,MAAAC,UAAAyB,kBAAA,CAAuCE,SAAvC,CAAb,EAAgE,IAAhE,CAAA;AADF;AAGA,MAAI,IAAAjB,iBAAJ;AACEgG,MAAAC,KAAA,CACI,GADJ,EACS/G,IAAAG,MAAAC,UAAA4C,iBAAA,CACIjB,SADJ,EACe,IAAAvB,mBAAAwG,IAAA,EADf,CADT,EAGI,KAHJ,CAAA;AADF;AAMA,MAAI,IAAAjG,eAAJ;AACE+F,MAAAC,KAAA,CAAQ,GAAR,EAAahF,SAAAkF,cAAA,EAAb,EAAwC,IAAxC,CAAA;AADF;AAGA,MAAI,IAAAhG,kBAAJ;AACE6F,MAAAC,KAAA,CAAQ,GAAR,EAAahF,SAAAsE,SAAA,EAAAa,KAAb,EAAwC,IAAxC,CAAA;AADF;AAGA,MAAIC,iBACAnH,IAAAgE,KAAAE,SAAAU,sCAAA,CAAyDkC,EAAAM,KAAA,CAAQ,EAAR,CAAzD,CADJ;AAIA,MAAIC,gBAAgBrH,IAAAgE,KAAAE,SAAAiC,MAApB;AACA,MAAI,IAAAnF,kBAAJ,IAA8Be,SAAAuF,aAAA,EAA9B;AACED,iBAAA,GAAgBrH,IAAAgE,KAAAE,SAAAS,OAAA,CACZ3E,IAAAgE,KAAAE,SAAAqD,GADY,EAEZvH,IAAAG,MAAAqD,cAAAS,sBAAA,CACIlC,SAAAuF,aAAA,EADJ,CAFY,CAAhB;AADF;AAMA,MAAIE,gBAAgBxH,IAAAgE,KAAAE,SAAAU,sCAAA,CAChB7C,SAAA0F,WAAA,EADgB,CAApB;AAEA,MAAIC,yBAAyB1H,IAAAgE,KAAAE,SAAAY,OAAA,CACzB,MADyB,EACjB,CAAC,QAASsB,SAAV,CADiB,EAEzBpG,IAAAgE,KAAAE,SAAAS,OAAA,CAA0B6C,aAA1B,EAAyCH,aAAzC,CAFyB,CAA7B;AAMA,MAAIrD,IAAJ;AACA,MAAI,IAAApD,cAAJ;AACEoD,QAAA,GAAOhE,IAAAgE,KAAAE,SAAAS,OAAA,CACHwC,cADG,EACaO,sBADb,EACqC1H,IAAAgE,KAAAE,SAAAqD,GADrC,CAAP;AADF;AAIEvD,QAAA,GAAOhE,IAAAgE,KAAAE,SAAAS,OAAA,CAA0BwC,cAA1B,EAA0CO,sBAA1C,CAAP;AAJF;AAMA,SAAO1D,IAAP;AArE0E,CAA5E;AAkFA;;;;;;AAAAhE,IAAAG,MAAAwH,cAAA,GAA2BC,QAAQ,CAACtH,UAAD,CAAa;AAC9CN,MAAAG,MAAAC,UAAAsD,KAAA,CAA0B,IAA1B,EAAgCpD,UAAhC,CAAA;AAD8C,CAAhD;AAGAN,IAAA2D,SAAA,CAAc3D,IAAAG,MAAAwH,cAAd,EAAwC3H,IAAAG,MAAAC,UAAxC,CAAA;AASA;;;;;AAAAJ,IAAAG,MAAAwH,cAAAhH,UAAAO,aAAA,GAAkD2G,QAAQ,CAAC9F,SAAD,CAAY;AACpE,MAAI+E,KAAK,EAAT;AACAA,IAAAC,KAAA,CAAQ,IAAAxG,QAAR,EAAsB,GAAtB,CAAA;AACA,MAAI,IAAAM,iBAAJ;AACEiG,MAAAC,KAAA,CAAQ,GAAR,EAAa/G,IAAAG,MAAAC,UAAAyB,kBAAA,CAAuCE,SAAvC,CAAb,EAAgE,IAAhE,CAAA;AADF;AAGA,MAAI,IAAAjB,iBAAJ;AACEgG,MAAAC,KAAA,CACI,GADJ,EACS/G,IAAAG,MAAAC,UAAA4C,iBAAA,CACIjB,SADJ,EACe,IAAAvB,mBAAAwG,IAAA,EADf,CADT,EAGI,KAHJ,CAAA;AADF;AAOA,MAAI,IAAAjG,eAAJ;AACE+F,MAAAC,KAAA,CAAQ,GAAR,EAAahF,SAAAkF,cAAA,EAAb,EAAwC,IAAxC,CAAA;AADF;AAGA,MAAI,IAAAhG,kBAAJ;AACE6F,MAAAC,KAAA,CAAQ,GAAR,EAAahF,SAAAsE,SAAA,EAAAa,KAAb,EAAwC,IAAxC,CAAA;AADF;AAGAJ,IAAAC,KAAA,CAAQhF,SAAA0F,WAAA,EAAR,CAAA;AACA,MAAI,IAAAzG,kBAAJ,CAA4B;AAC1B,QAAI8G,YAAY/F,SAAAuF,aAAA,EAAhB;AACA,QAAIQ,SAAJ,CAAe;AACb,UAAIC,gBACAD,SAAA,YAAqBE,KAArB,GAA6BF,SAAAjD,QAA7B,GAAiDiD,SAAAG,SAAA,EADrD;AAEAnB,QAAAC,KAAA,CAAQ,IAAR,EAAcgB,aAAd,CAAA;AAHa;AAFW;AAQ5B,MAAI,IAAAnH,cAAJ;AACEkG,MAAAC,KAAA,CAAQ,IAAR,CAAA;AADF;AAGA,SAAOD,EAAAM,KAAA,CAAQ,EAAR,CAAP;AA/BoE,CAAtE;AA0CA;;;;;AAAApH,IAAAG,MAAAwH,cAAAhH,UAAAS,mBAAA,GAAwD8G,QAAQ,CAACnG,SAAD,CAAY;AAC1E,SAAO/B,IAAAgE,KAAAE,SAAAU,sCAAA,CACH5E,IAAAG,MAAAwH,cAAAhH,UAAAO,aAAA,CAAgDa,SAAhD,CADG,CAAP;AAD0E,CAA5E;;",
"sources":["goog/debug/formatter.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition of various formatters for logging. Please minimize\n * dependencies this file has on other closure classes as any dependency it\n * takes won't be able to use the logging infrastructure.\n *\n */\n\ngoog.provide('goog.debug.Formatter');\ngoog.provide('goog.debug.HtmlFormatter');\ngoog.provide('goog.debug.TextFormatter');\n\ngoog.require('goog.debug');\ngoog.require('goog.debug.Logger');\ngoog.require('goog.debug.RelativeTimeProvider');\ngoog.require('goog.html.SafeHtml');\ngoog.require('goog.html.SafeUrl');\ngoog.require('goog.html.uncheckedconversions');\ngoog.require('goog.string.Const');\n\n\n\n/**\n * Base class for Formatters. A Formatter is used to format a LogRecord into\n * something that can be displayed to the user.\n *\n * @param {string=} opt_prefix The prefix to place before text records.\n * @constructor\n */\ngoog.debug.Formatter = function(opt_prefix) {\n  this.prefix_ = opt_prefix || '';\n\n  /**\n   * A provider that returns the relative start time.\n   * @type {goog.debug.RelativeTimeProvider}\n   * @private\n   */\n  this.startTimeProvider_ =\n      goog.debug.RelativeTimeProvider.getDefaultInstance();\n};\n\n\n/**\n * Whether to append newlines to the end of formatted log records.\n * @type {boolean}\n */\ngoog.debug.Formatter.prototype.appendNewline = true;\n\n\n/**\n * Whether to show absolute time in the DebugWindow.\n * @type {boolean}\n */\ngoog.debug.Formatter.prototype.showAbsoluteTime = true;\n\n\n/**\n * Whether to show relative time in the DebugWindow.\n * @type {boolean}\n */\ngoog.debug.Formatter.prototype.showRelativeTime = true;\n\n\n/**\n * Whether to show the logger name in the DebugWindow.\n * @type {boolean}\n */\ngoog.debug.Formatter.prototype.showLoggerName = true;\n\n\n/**\n * Whether to show the logger exception text.\n * @type {boolean}\n */\ngoog.debug.Formatter.prototype.showExceptionText = false;\n\n\n/**\n * Whether to show the severity level.\n * @type {boolean}\n */\ngoog.debug.Formatter.prototype.showSeverityLevel = false;\n\n\n/**\n * Formats a record.\n * @param {goog.debug.LogRecord} logRecord the logRecord to format.\n * @return {string} The formatted string.\n */\ngoog.debug.Formatter.prototype.formatRecord = goog.abstractMethod;\n\n\n/**\n * Formats a record as SafeHtml.\n * @param {goog.debug.LogRecord} logRecord the logRecord to format.\n * @return {!goog.html.SafeHtml} The formatted string as SafeHtml.\n */\ngoog.debug.Formatter.prototype.formatRecordAsHtml = goog.abstractMethod;\n\n\n/**\n * Sets the start time provider. By default, this is the default instance\n * but can be changed.\n * @param {goog.debug.RelativeTimeProvider} provider The provider to use.\n */\ngoog.debug.Formatter.prototype.setStartTimeProvider = function(provider) {\n  this.startTimeProvider_ = provider;\n};\n\n\n/**\n * Returns the start time provider. By default, this is the default instance\n * but can be changed.\n * @return {goog.debug.RelativeTimeProvider} The start time provider.\n */\ngoog.debug.Formatter.prototype.getStartTimeProvider = function() {\n  return this.startTimeProvider_;\n};\n\n\n/**\n * Resets the start relative time.\n */\ngoog.debug.Formatter.prototype.resetRelativeTimeStart = function() {\n  this.startTimeProvider_.reset();\n};\n\n\n/**\n * Returns a string for the time/date of the LogRecord.\n * @param {goog.debug.LogRecord} logRecord The record to get a time stamp for.\n * @return {string} A string representation of the time/date of the LogRecord.\n * @private\n */\ngoog.debug.Formatter.getDateTimeStamp_ = function(logRecord) {\n  var time = new Date(logRecord.getMillis());\n  return goog.debug.Formatter.getTwoDigitString_((time.getFullYear() - 2000)) +\n      goog.debug.Formatter.getTwoDigitString_((time.getMonth() + 1)) +\n      goog.debug.Formatter.getTwoDigitString_(time.getDate()) + ' ' +\n      goog.debug.Formatter.getTwoDigitString_(time.getHours()) + ':' +\n      goog.debug.Formatter.getTwoDigitString_(time.getMinutes()) + ':' +\n      goog.debug.Formatter.getTwoDigitString_(time.getSeconds()) + '.' +\n      goog.debug.Formatter.getTwoDigitString_(\n          Math.floor(time.getMilliseconds() / 10));\n};\n\n\n/**\n * Returns the number as a two-digit string, meaning it prepends a 0 if the\n * number if less than 10.\n * @param {number} n The number to format.\n * @return {string} A two-digit string representation of `n`.\n * @private\n */\ngoog.debug.Formatter.getTwoDigitString_ = function(n) {\n  if (n < 10) {\n    return '0' + n;\n  }\n  return String(n);\n};\n\n\n/**\n * Returns a string for the number of seconds relative to the start time.\n * Prepads with spaces so that anything less than 1000 seconds takes up the\n * same number of characters for better formatting.\n * @param {goog.debug.LogRecord} logRecord The log to compare time to.\n * @param {number} relativeTimeStart The start time to compare to.\n * @return {string} The number of seconds of the LogRecord relative to the\n *     start time.\n * @private\n */\ngoog.debug.Formatter.getRelativeTime_ = function(logRecord, relativeTimeStart) {\n  var ms = logRecord.getMillis() - relativeTimeStart;\n  var sec = ms / 1000;\n  var str = sec.toFixed(3);\n\n  var spacesToPrepend = 0;\n  if (sec < 1) {\n    spacesToPrepend = 2;\n  } else {\n    while (sec < 100) {\n      spacesToPrepend++;\n      sec *= 10;\n    }\n  }\n  while (spacesToPrepend-- > 0) {\n    str = ' ' + str;\n  }\n  return str;\n};\n\n\n\n/**\n * Formatter that returns formatted html. See formatRecord for the classes\n * it uses for various types of formatted output.\n *\n * @param {string=} opt_prefix The prefix to place before text records.\n * @constructor\n * @extends {goog.debug.Formatter}\n */\ngoog.debug.HtmlFormatter = function(opt_prefix) {\n  goog.debug.Formatter.call(this, opt_prefix);\n};\ngoog.inherits(goog.debug.HtmlFormatter, goog.debug.Formatter);\n\n\n/**\n * Exposes an exception that has been caught by a try...catch and outputs the\n * error as HTML with a stack trace.\n *\n * @param {*} err Error object or string.\n * @param {?Function=} fn If provided, when collecting the stack trace all\n *     frames above the topmost call to this function, including that call,\n *     will be left out of the stack trace.\n * @return {string} Details of exception, as HTML.\n */\ngoog.debug.HtmlFormatter.exposeException = function(err, fn) {\n  var html = goog.debug.HtmlFormatter.exposeExceptionAsHtml(err, fn);\n  return goog.html.SafeHtml.unwrap(html);\n};\n\n\n/**\n * Exposes an exception that has been caught by a try...catch and outputs the\n * error with a stack trace.\n *\n * @param {*} err Error object or string.\n * @param {?Function=} fn If provided, when collecting the stack trace all\n *     frames above the topmost call to this function, including that call,\n *     will be left out of the stack trace.\n * @return {!goog.html.SafeHtml} Details of exception.\n */\ngoog.debug.HtmlFormatter.exposeExceptionAsHtml = function(err, fn) {\n  try {\n    var e = goog.debug.normalizeErrorObject(err);\n    // Create the error message\n    var viewSourceUrl =\n        goog.debug.HtmlFormatter.createViewSourceUrl_(e.fileName);\n    var error = goog.html.SafeHtml.concat(\n        goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(\n            'Message: ' + e.message + '\\nUrl: '),\n        goog.html.SafeHtml.create(\n            'a', {href: viewSourceUrl, target: '_new'}, e.fileName),\n        goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(\n            '\\nLine: ' + e.lineNumber + '\\n\\nBrowser stack:\\n' + e.stack +\n            '-> ' +\n            '[end]\\n\\nJS stack traversal:\\n' + goog.debug.getStacktrace(fn) +\n            '-> '));\n    return error;\n  } catch (e2) {\n    return goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(\n        'Exception trying to expose exception! You win, we lose. ' + e2);\n  }\n};\n\n\n/**\n * @param {?string=} fileName\n * @return {!goog.html.SafeUrl} SafeUrl with view-source scheme, pointing at\n *     fileName.\n * @private\n */\ngoog.debug.HtmlFormatter.createViewSourceUrl_ = function(fileName) {\n  if (fileName == null) {\n    fileName = '';\n  }\n  if (!/^https?:\\/\\//i.test(fileName)) {\n    return goog.html.SafeUrl.fromConstant(\n        goog.string.Const.from('sanitizedviewsrc'));\n  }\n  var sanitizedFileName = goog.html.SafeUrl.sanitize(fileName);\n  return goog.html.uncheckedconversions\n      .safeUrlFromStringKnownToSatisfyTypeContract(\n          goog.string.Const.from('view-source scheme plus HTTP/HTTPS URL'),\n          'view-source:' + goog.html.SafeUrl.unwrap(sanitizedFileName));\n};\n\n\n\n/**\n * Whether to show the logger exception text\n * @type {boolean}\n * @override\n */\ngoog.debug.HtmlFormatter.prototype.showExceptionText = true;\n\n\n/**\n * Formats a record\n * @param {goog.debug.LogRecord} logRecord the logRecord to format.\n * @return {string} The formatted string as html.\n * @override\n */\ngoog.debug.HtmlFormatter.prototype.formatRecord = function(logRecord) {\n  if (!logRecord) {\n    return '';\n  }\n  // OK not to use goog.html.SafeHtml.unwrap() here.\n  return this.formatRecordAsHtml(logRecord).getTypedStringValue();\n};\n\n\n/**\n * Formats a record.\n * @param {goog.debug.LogRecord} logRecord the logRecord to format.\n * @return {!goog.html.SafeHtml} The formatted string as SafeHtml.\n * @override\n */\ngoog.debug.HtmlFormatter.prototype.formatRecordAsHtml = function(logRecord) {\n  if (!logRecord) {\n    return goog.html.SafeHtml.EMPTY;\n  }\n\n  var className;\n  switch (logRecord.getLevel().value) {\n    case goog.debug.Logger.Level.SHOUT.value:\n      className = 'dbg-sh';\n      break;\n    case goog.debug.Logger.Level.SEVERE.value:\n      className = 'dbg-sev';\n      break;\n    case goog.debug.Logger.Level.WARNING.value:\n      className = 'dbg-w';\n      break;\n    case goog.debug.Logger.Level.INFO.value:\n      className = 'dbg-i';\n      break;\n    case goog.debug.Logger.Level.FINE.value:\n    default:\n      className = 'dbg-f';\n      break;\n  }\n\n  // HTML for user defined prefix, time, logger name, and severity.\n  var sb = [];\n  sb.push(this.prefix_, ' ');\n  if (this.showAbsoluteTime) {\n    sb.push('[', goog.debug.Formatter.getDateTimeStamp_(logRecord), '] ');\n  }\n  if (this.showRelativeTime) {\n    sb.push(\n        '[', goog.debug.Formatter.getRelativeTime_(\n                 logRecord, this.startTimeProvider_.get()),\n        's] ');\n  }\n  if (this.showLoggerName) {\n    sb.push('[', logRecord.getLoggerName(), '] ');\n  }\n  if (this.showSeverityLevel) {\n    sb.push('[', logRecord.getLevel().name, '] ');\n  }\n  var fullPrefixHtml =\n      goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(sb.join(''));\n\n  // HTML for exception text and log record.\n  var exceptionHtml = goog.html.SafeHtml.EMPTY;\n  if (this.showExceptionText && logRecord.getException()) {\n    exceptionHtml = goog.html.SafeHtml.concat(\n        goog.html.SafeHtml.BR,\n        goog.debug.HtmlFormatter.exposeExceptionAsHtml(\n            logRecord.getException()));\n  }\n  var logRecordHtml = goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(\n      logRecord.getMessage());\n  var recordAndExceptionHtml = goog.html.SafeHtml.create(\n      'span', {'class': className},\n      goog.html.SafeHtml.concat(logRecordHtml, exceptionHtml));\n\n\n  // Combine both pieces of HTML and, if needed, append a final newline.\n  var html;\n  if (this.appendNewline) {\n    html = goog.html.SafeHtml.concat(\n        fullPrefixHtml, recordAndExceptionHtml, goog.html.SafeHtml.BR);\n  } else {\n    html = goog.html.SafeHtml.concat(fullPrefixHtml, recordAndExceptionHtml);\n  }\n  return html;\n};\n\n\n\n/**\n * Formatter that returns formatted plain text\n *\n * @param {string=} opt_prefix The prefix to place before text records.\n * @constructor\n * @extends {goog.debug.Formatter}\n * @final\n */\ngoog.debug.TextFormatter = function(opt_prefix) {\n  goog.debug.Formatter.call(this, opt_prefix);\n};\ngoog.inherits(goog.debug.TextFormatter, goog.debug.Formatter);\n\n\n/**\n * Formats a record as text\n * @param {goog.debug.LogRecord} logRecord the logRecord to format.\n * @return {string} The formatted string.\n * @override\n */\ngoog.debug.TextFormatter.prototype.formatRecord = function(logRecord) {\n  var sb = [];\n  sb.push(this.prefix_, ' ');\n  if (this.showAbsoluteTime) {\n    sb.push('[', goog.debug.Formatter.getDateTimeStamp_(logRecord), '] ');\n  }\n  if (this.showRelativeTime) {\n    sb.push(\n        '[', goog.debug.Formatter.getRelativeTime_(\n                 logRecord, this.startTimeProvider_.get()),\n        's] ');\n  }\n\n  if (this.showLoggerName) {\n    sb.push('[', logRecord.getLoggerName(), '] ');\n  }\n  if (this.showSeverityLevel) {\n    sb.push('[', logRecord.getLevel().name, '] ');\n  }\n  sb.push(logRecord.getMessage());\n  if (this.showExceptionText) {\n    var exception = logRecord.getException();\n    if (exception) {\n      var exceptionText =\n          exception instanceof Error ? exception.message : exception.toString();\n      sb.push('\\n', exceptionText);\n    }\n  }\n  if (this.appendNewline) {\n    sb.push('\\n');\n  }\n  return sb.join('');\n};\n\n\n/**\n * Formats a record as text\n * @param {goog.debug.LogRecord} logRecord the logRecord to format.\n * @return {!goog.html.SafeHtml} The formatted string as SafeHtml. This is\n *     just an HTML-escaped version of the text obtained from formatRecord().\n * @override\n */\ngoog.debug.TextFormatter.prototype.formatRecordAsHtml = function(logRecord) {\n  return goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(\n      goog.debug.TextFormatter.prototype.formatRecord(logRecord));\n};\n"],
"names":["goog","provide","require","debug","Formatter","goog.debug.Formatter","opt_prefix","prefix_","startTimeProvider_","RelativeTimeProvider","getDefaultInstance","prototype","appendNewline","showAbsoluteTime","showRelativeTime","showLoggerName","showExceptionText","showSeverityLevel","formatRecord","abstractMethod","formatRecordAsHtml","setStartTimeProvider","goog.debug.Formatter.prototype.setStartTimeProvider","provider","getStartTimeProvider","goog.debug.Formatter.prototype.getStartTimeProvider","resetRelativeTimeStart","goog.debug.Formatter.prototype.resetRelativeTimeStart","reset","getDateTimeStamp_","goog.debug.Formatter.getDateTimeStamp_","logRecord","time","Date","getMillis","getTwoDigitString_","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","getMilliseconds","goog.debug.Formatter.getTwoDigitString_","n","String","getRelativeTime_","goog.debug.Formatter.getRelativeTime_","relativeTimeStart","ms","sec","str","toFixed","spacesToPrepend","HtmlFormatter","goog.debug.HtmlFormatter","call","inherits","exposeException","goog.debug.HtmlFormatter.exposeException","err","fn","html","exposeExceptionAsHtml","SafeHtml","unwrap","goog.debug.HtmlFormatter.exposeExceptionAsHtml","e","normalizeErrorObject","viewSourceUrl","createViewSourceUrl_","fileName","error","concat","htmlEscapePreservingNewlinesAndSpaces","message","create","href","target","lineNumber","stack","getStacktrace","e2","goog.debug.HtmlFormatter.createViewSourceUrl_","test","SafeUrl","fromConstant","string","Const","from","sanitizedFileName","sanitize","uncheckedconversions","safeUrlFromStringKnownToSatisfyTypeContract","goog.debug.HtmlFormatter.prototype.formatRecord","getTypedStringValue","goog.debug.HtmlFormatter.prototype.formatRecordAsHtml","EMPTY","className","getLevel","value","Logger","Level","SHOUT","SEVERE","WARNING","INFO","FINE","sb","push","get","getLoggerName","name","fullPrefixHtml","join","exceptionHtml","getException","BR","logRecordHtml","getMessage","recordAndExceptionHtml","TextFormatter","goog.debug.TextFormatter","goog.debug.TextFormatter.prototype.formatRecord","exception","exceptionText","Error","toString","goog.debug.TextFormatter.prototype.formatRecordAsHtml"]
}
