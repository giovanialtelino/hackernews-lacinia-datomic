{
"version":3,
"file":"goog.async.delay.js",
"lineCount":78,
"mappings":"AAwBAA,IAAAC,QAAA,CAAa,YAAb,CAAA;AACAD,IAAAC,QAAA,CAAa,kBAAb,CAAA;AAEAD,IAAAE,QAAA,CAAa,iBAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,YAAb,CAAA;AAqBA;;;;;;;;;;AAAAF,IAAAG,MAAAC,MAAA,GAAmBC,QAAQ,CAACC,QAAD,EAAWC,YAAX,EAAyBC,WAAzB,CAAsC;AAC/DR,MAAAG,MAAAC,MAAAK,KAAA,CAAsB,IAAtB,EAA4B,aAA5B,CAAA;AAMA,8CAAA,IAAAC,UAAA,GAAiBJ,QAAjB;AAOA,iCAAA,IAAAK,UAAA,GAAiBJ,YAAjB,IAAiC,CAAjC;AAOA,6CAAA,IAAAK,SAAA,GAAgBJ,WAAhB;AAQA,mCAAA,IAAAK,UAAA,GAAiBb,IAAAc,KAAA,CAAU,IAAAC,UAAV,EAA0B,IAA1B,CAAjB;AA7B+D,CAAjE;AA+BAf,IAAAgB,SAAA,CAAchB,IAAAG,MAAAC,MAAd,EAAgCJ,IAAAiB,WAAhC,CAAA;AAUA;;;;;AAAAjB,IAAAI,MAAA,GAAaJ,IAAAG,MAAAC,MAAb;AAQA,+BAAAJ,IAAAG,MAAAC,MAAAc,UAAAC,IAAA,GAAiC,CAAjC;AASA,4BAAAnB,IAAAG,MAAAC,MAAAc,UAAAE,gBAAA,GAA6CC,QAAQ,EAAG;AACtDrB,MAAAG,MAAAC,MAAAK,KAAA,CAAsB,IAAtB,EAA4B,iBAA5B,CAAA;AACA,MAAAa,KAAA,EAAA;AACA,SAAO,IAAAZ,UAAP;AACA,SAAO,IAAAE,SAAP;AAJsD,CAAxD;AAeA;;;AAAAZ,IAAAG,MAAAC,MAAAc,UAAAK,MAAA,GAAmCC,QAAQ,CAACjB,YAAD,CAAe;AACxD,MAAAe,KAAA,EAAA;AACA,MAAAH,IAAA,GAAWnB,IAAAyB,MAAAC,SAAA,CACP,IAAAb,UADO,EAEPN,YAAA,KAAiBoB,SAAjB,GAA6BpB,YAA7B,GAA4C,IAAAI,UAFrC,CAAX;AAFwD,CAA1D;AAcA;;;AAAAX,IAAAG,MAAAC,MAAAc,UAAAU,iBAAA,GAA8CC,QAAQ,CAACtB,YAAD,CAAe;AACnE,MAAI,CAAC,IAAAuB,SAAA,EAAL;AACE,QAAAP,MAAA,CAAWhB,YAAX,CAAA;AADF;AADmE,CAArE;AAWAP,IAAAG,MAAAC,MAAAc,UAAAI,KAAA,GAAkCS,QAAQ,EAAG;AAC3C,MAAI,IAAAD,SAAA,EAAJ;AACE9B,QAAAyB,MAAAO,MAAA,CAAiB,IAAAb,IAAjB,CAAA;AADF;AAGA,MAAAA,IAAA,GAAW,CAAX;AAJ2C,CAA7C;AAYAnB,IAAAG,MAAAC,MAAAc,UAAAe,KAAA,GAAkCC,QAAQ,EAAG;AAC3C,MAAAZ,KAAA,EAAA;AACA,MAAAP,UAAA,EAAA;AAF2C,CAA7C;AAUAf,IAAAG,MAAAC,MAAAc,UAAAiB,aAAA,GAA0CC,QAAQ,EAAG;AACnD,MAAI,IAAAN,SAAA,EAAJ;AACE,QAAAG,KAAA,EAAA;AADF;AADmD,CAArD;AAUA;;;AAAAjC,IAAAG,MAAAC,MAAAc,UAAAY,SAAA,GAAsCO,QAAQ,EAAG;AAC/C,SAAO,IAAAlB,IAAP,IAAmB,CAAnB;AAD+C,CAAjD;AASA,gBAAAnB,IAAAG,MAAAC,MAAAc,UAAAH,UAAA,GAAuCuB,QAAQ,EAAG;AAChD,MAAAnB,IAAA,GAAW,CAAX;AACA,MAAI,IAAAT,UAAJ;AACE,QAAAA,UAAA6B,KAAA,CAAoB,IAAA3B,SAApB,CAAA;AADF;AAFgD,CAAlD;;",
"sources":["goog/async/delay.js"],
"sourcesContent":["// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Defines a class useful for handling functions that must be\n * invoked after a delay, especially when that delay is frequently restarted.\n * Examples include delaying before displaying a tooltip, menu hysteresis,\n * idle timers, etc.\n * @author brenneman@google.com (Shawn Brenneman)\n * @see ../demos/timers.html\n */\n\n\ngoog.provide('goog.Delay');\ngoog.provide('goog.async.Delay');\n\ngoog.require('goog.Disposable');\ngoog.require('goog.Timer');\n\n\n\n/**\n * A Delay object invokes the associated function after a specified delay. The\n * interval duration can be specified once in the constructor, or can be defined\n * each time the delay is started. Calling start on an active delay will reset\n * the timer.\n *\n * @param {function(this:THIS)} listener Function to call when the\n *     delay completes.\n * @param {number=} opt_interval The default length of the invocation delay (in\n *     milliseconds).\n * @param {THIS=} opt_handler The object scope to invoke the function in.\n * @template THIS\n * @constructor\n * @struct\n * @extends {goog.Disposable}\n * @final\n */\ngoog.async.Delay = function(listener, opt_interval, opt_handler) {\n  goog.async.Delay.base(this, 'constructor');\n\n  /**\n   * The function that will be invoked after a delay.\n   * @private {function(this:THIS)}\n   */\n  this.listener_ = listener;\n\n  /**\n   * The default amount of time to delay before invoking the callback.\n   * @type {number}\n   * @private\n   */\n  this.interval_ = opt_interval || 0;\n\n  /**\n   * The object context to invoke the callback in.\n   * @type {Object|undefined}\n   * @private\n   */\n  this.handler_ = opt_handler;\n\n\n  /**\n   * Cached callback function invoked when the delay finishes.\n   * @type {Function}\n   * @private\n   */\n  this.callback_ = goog.bind(this.doAction_, this);\n};\ngoog.inherits(goog.async.Delay, goog.Disposable);\n\n\n\n/**\n * A deprecated alias.\n * @deprecated Use goog.async.Delay instead.\n * @constructor\n * @final\n */\ngoog.Delay = goog.async.Delay;\n\n\n/**\n * Identifier of the active delay timeout, or 0 when inactive.\n * @type {number}\n * @private\n */\ngoog.async.Delay.prototype.id_ = 0;\n\n\n/**\n * Disposes of the object, cancelling the timeout if it is still outstanding and\n * removing all object references.\n * @override\n * @protected\n */\ngoog.async.Delay.prototype.disposeInternal = function() {\n  goog.async.Delay.base(this, 'disposeInternal');\n  this.stop();\n  delete this.listener_;\n  delete this.handler_;\n};\n\n\n/**\n * Starts the delay timer. The provided listener function will be called after\n * the specified interval. Calling start on an active timer will reset the\n * delay interval.\n * @param {number=} opt_interval If specified, overrides the object's default\n *     interval with this one (in milliseconds).\n */\ngoog.async.Delay.prototype.start = function(opt_interval) {\n  this.stop();\n  this.id_ = goog.Timer.callOnce(\n      this.callback_,\n      opt_interval !== undefined ? opt_interval : this.interval_);\n};\n\n\n/**\n * Starts the delay timer if it's not already active.\n * @param {number=} opt_interval If specified and the timer is not already\n *     active, overrides the object's default interval with this one (in\n *     milliseconds).\n */\ngoog.async.Delay.prototype.startIfNotActive = function(opt_interval) {\n  if (!this.isActive()) {\n    this.start(opt_interval);\n  }\n};\n\n\n/**\n * Stops the delay timer if it is active. No action is taken if the timer is not\n * in use.\n */\ngoog.async.Delay.prototype.stop = function() {\n  if (this.isActive()) {\n    goog.Timer.clear(this.id_);\n  }\n  this.id_ = 0;\n};\n\n\n/**\n * Fires delay's action even if timer has already gone off or has not been\n * started yet; guarantees action firing. Stops the delay timer.\n */\ngoog.async.Delay.prototype.fire = function() {\n  this.stop();\n  this.doAction_();\n};\n\n\n/**\n * Fires delay's action only if timer is currently active. Stops the delay\n * timer.\n */\ngoog.async.Delay.prototype.fireIfActive = function() {\n  if (this.isActive()) {\n    this.fire();\n  }\n};\n\n\n/**\n * @return {boolean} True if the delay is currently active, false otherwise.\n */\ngoog.async.Delay.prototype.isActive = function() {\n  return this.id_ != 0;\n};\n\n\n/**\n * Invokes the callback function after the delay successfully completes.\n * @private\n */\ngoog.async.Delay.prototype.doAction_ = function() {\n  this.id_ = 0;\n  if (this.listener_) {\n    this.listener_.call(this.handler_);\n  }\n};\n"],
"names":["goog","provide","require","async","Delay","goog.async.Delay","listener","opt_interval","opt_handler","base","listener_","interval_","handler_","callback_","bind","doAction_","inherits","Disposable","prototype","id_","disposeInternal","goog.async.Delay.prototype.disposeInternal","stop","start","goog.async.Delay.prototype.start","Timer","callOnce","undefined","startIfNotActive","goog.async.Delay.prototype.startIfNotActive","isActive","goog.async.Delay.prototype.stop","clear","fire","goog.async.Delay.prototype.fire","fireIfActive","goog.async.Delay.prototype.fireIfActive","goog.async.Delay.prototype.isActive","goog.async.Delay.prototype.doAction_","call"]
}
