{"version":3,"sources":["debux/common/macro_specs.cljc"],"mappings":";;;AAOA,AAAA;AAAA;AAAA;AAAA,AAMA,AAAA,AAAMI,AAAeC;AAArB,AAAA,AAAAL,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AACUE;;AAEV,AAAAC,AAAA,AAAA,AAAA,AAAA,AACE,AAAAC,AAAA,AAAA,AAAA,AAAA,AACEC,AACA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAaC,AAASN;AAE1B,AAAAE,AAAA,AAAA,AAAA,AAAA,AACE,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACkB,AAAAC,AAAA,AAAA,AAAKC,AACV,AAAAC,AAAA,AAAA,AAAKC;AAIpB,AAAA,AAAMC,AAAmBC;AAAzB,AAAA,AAAAjB,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AACU,AAACe,AAAID;;AAEf,AAAAX,AAAA,AAAA,AAAA,AAAA,AACE,AAAAC,AAAA,AAAA,AAAA,AAAA,AACEY,AACA,AAAAV,AAAA,AAAA,AAAA,AAAA,AAAaC,AAASM,AACtB,AAAAL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAa,AAAAG,AAAA,AAAA,AAAKC;AAEtB,AAAAT,AAAA,AAAA,AAAA,AAAA,AACE,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACa,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAqB,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAgBU,AACH,AAAAC,AAAA,AAAA,AAAKP,AAC1B,AAAAD,AAAA,AAAA,AAAKC;AAEjC,AAAAT,AAAA,AAAA,AAAA,AAAA,AACE,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACkB,AAAAC,AAAA,AAAA,AAAKC,AACV,AAAAD,AAAA,AAAA,AAAKS,AACP,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACgB,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAe,AAAAW,AAAA,AAAA,AAAK,AAAAb,AAAA,AAAA,AAAA,AAAA,AAAA,AACP,AAAAG,AAAA,AAAA,AAAKS;AAE/C,AAAAf,AAAA,AAAA,AAAA,AAAA,AACE,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAa,AAAAC,AAAA,AAAA,AAAA,AACF,AAAAQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACgB,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAe,AAAAW,AAAA,AAAA,AAAK,AAAAb,AAAA,AAAA,AAAA,AAAA,AAAA;AAEjD","names":["cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","debux.common.macro-specs/name-unformer","name","cljs.spec.alpha/def-impl","cljs.spec.alpha/and-spec-impl","cljs.core/simple-symbol?","cljs.spec.alpha.spec_impl","cljs.core/identity","cljs.spec.alpha/cat-impl","cljs.spec.alpha/maybe-impl","cljs.core/string?","cljs.spec.alpha/rep-impl","cljs.core/any?","debux.common.macro-specs/arg-list-unformer","arg","cljs.core/vec","cljs.core/vector?","cljs.spec.alpha/alt-impl","cljs.core/map?","cljs.spec.alpha/rep+impl"],"sourcesContent":["(ns debux.common.macro-specs\n  \"clojure.core macro specs which are minified, simplified and modified.\"\n  (:require #?(:clj [clojure.spec.alpha :as s]\n               :cljs [cljs.spec.alpha :as s])\n    #?(:clj\n                    [clojure.future :refer :all])))\n\n(declare skip o-skip skip-outer indent)\n; skip => full skip\n; o-skip => outermost skip\n\n\n;;; def\n(defn name-unformer [name]\n  `(skip ~name))\n\n(s/def ::name\n  (s/and\n    simple-symbol?\n    (s/conformer identity name-unformer)))\n\n(s/def ::def-args\n  (s/cat :name ::name\n         :docstring (s/? string?)\n         :body (s/* any?)))\n\n\n;;; defn, defn-, fn\n(defn arg-list-unformer [arg]\n  `(skip ~(vec arg)))\n\n(s/def ::arg-list\n  (s/and\n    vector?\n    (s/conformer identity arg-list-unformer)\n    (s/cat :args (s/* any?))))\n\n(s/def ::args+body\n  (s/cat :args ::arg-list\n         :body (s/alt :prepost+body (s/cat :prepost map?\n                                           :body (s/+ any?))\n                      :body (s/* any?))))\n\n(s/def ::defn-args\n  (s/cat :name ::name\n         :docstring (s/? string?)\n         :meta (s/? map?)\n         :bs (s/alt :arity-1 ::args+body\n                    :arity-n (s/cat :bodies (s/+ (s/spec ::args+body))\n                                    :attr (s/? map?)))))\n\n(s/def ::fn-args\n  (s/cat :name (s/? ::name)\n         :bs (s/alt :arity-1 ::args+body\n                    :arity-n (s/cat :bodies (s/+ (s/spec ::args+body))))))\n\n(comment\n\n  (def f1\n    '(defn add1\n       \"add1 docstring\"\n       {:added \"1.0\"}\n       [x y]\n       (+ x y)))\n\n  (def f2\n    '(defn add2\n       \"add2 docstring\"\n       {:added \"1.0\"}\n       ([] 0)\n       ([x] x)\n       ([x y] (+ x y))\n       ([x y & zs] (apply + x y zs))))\n\n  (s/conform ::defn-args (next f1))\n  ; => {:name add1, :docstring \"add1 docstring\", :meta {:added \"1.0\"},\n  ;     :bs [:arity-1 {:args {:args [x y]},\n  ;                    :body [:body [(+ x y)]]}]}\n  (s/explain ::defn-args (next f1))\n\n  (s/conform ::defn-args (next f2))\n  ; => {:name add2, :docstring \"add2 docstring\", :meta {:added \"1.0\"},\n  ;     :bs [:arity-n {:bodies [{:args {}, :body [:body [0]]}\n  ;                             {:args {:args [x]}, :body [:body [x]]}\n  ;                             {:args {:args [x y]}, :body [:body [(+ x y)]]}\n  ;                             {:args {:args [x y & zs]}, :body [:body [(apply + x y zs)]]}]}]}\n  (s/explain ::defn-args (next f2))\n\n\n  (def f3\n    '(fn add1 [x y]\n       (+ x y)))\n\n  (def f4\n    '(fn add2\n       ([] 0)\n       ([x] x)\n       ([x y] (+ x y))\n       ([x y & zs] (apply + x y zs))))\n\n  (def f5 '#(+ % %2))\n\n  (s/conform ::fn-args (next f3))\n  ; => {:name add1,\n  ;     :bs [:arity-1 {:args {:args [x y]},\n  ;                    :body [:body [(+ x y)]]}]}\n  (s/explain ::fn-args (next f3))\n\n  (s/conform ::fn-args (next f4))\n  ; => {:name add2,\n  ;     :bs [:arity-n {:bodies [{:args {}, :body [:body [0]]}\n  ;                             {:args {:args [x]}, :body [:body [x]]}\n  ;                             {:args {:args [x y]}, :body [:body [(+ x y)]]}\n  ;                             {:args {:args [x y & zs]}, :body [:body [(apply + x y zs)]]}]}]}\n  (s/explain ::fn-args (next f4))\n\n  (s/conform ::fn-args (next f5))\n  ; => {:bs [:arity-1 {:args {:args [p1__30164# p2__30165#]},\n  ;                    :body [:body [(+ p1__30164# p2__\n  (s/explain ::fn-args (next f5))\n\n  )                                                         ; end of comment\n\n"]}