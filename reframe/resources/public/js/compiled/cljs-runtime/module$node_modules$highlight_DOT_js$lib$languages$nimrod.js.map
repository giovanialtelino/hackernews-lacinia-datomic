{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$nimrod.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,0DAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACtHD,MAAAC,QAAA,CAAiBC,QAAQ,CAACC,IAAD,CAAO,CAC9B,MAAO,CACLC,QAAS,CAAC,KAAD,CADJ,CAELC,SAAU,CACRC,QACE,+WAFM;AAQRC,QACE,sDATM,CAURC,SACE,0TAXM,CAFL,CAmBLC,SAAU,CAAE,CACRC,UAAW,MADH,CAERC,MAAO,KAFC,CAGRC,IAAK,KAHG,CAIRC,UAAW,EAJH,CAAF,CAKL,CACDH,UAAW,QADV,CAEDC,MAAO,cAFN,CAGDC,IAAK,GAHJ;AAIDH,SAAU,CAAC,CAACE,MAAO,IAAR,CAAD,CAJT,CALK,CAUL,CACDD,UAAW,QADV,CAEDC,MAAO,mBAFN,CAGDC,IAAK,KAHJ,CAVK,CAeRT,IAAAW,kBAfQ,CAgBR,CACEJ,UAAW,MADb,CAEEC,MAAO,cAFT,CAGEE,UAAW,CAHb,CAhBQ,CAoBL,CACDH,UAAW,QADV,CAEDG,UAAW,CAFV,CAGDE,SAAU,CACR,CAACJ,MAAO,0DAAR,CADQ,CAER,CAACA,MAAO,6CAAR,CAFQ,CAGR,CAACA,MAAO,+CAAR,CAHQ,CAIR,CAACA,MAAO,uCAAR,CAJQ,CAHT,CApBK,CA8BRR,IAAAa,kBA9BQ,CAnBL,CADuB,CADsF;",
"sources":["node_modules/highlight_DOT_js/lib/languages/nimrod.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$nimrod\"] = function(global,require,module,exports) {\nmodule.exports = function(hljs) {\n  return {\n    aliases: ['nim'],\n    keywords: {\n      keyword:\n        'addr and as asm bind block break case cast const continue converter ' +\n        'discard distinct div do elif else end enum except export finally ' +\n        'for from generic if import in include interface is isnot iterator ' +\n        'let macro method mixin mod nil not notin object of or out proc ptr ' +\n        'raise ref return shl shr static template try tuple type using var ' +\n        'when while with without xor yield',\n      literal:\n        'shared guarded stdin stdout stderr result true false',\n      built_in:\n        'int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 float ' +\n        'float32 float64 bool char string cstring pointer expr stmt void ' +\n        'auto any range array openarray varargs seq set clong culong cchar ' +\n        'cschar cshort cint csize clonglong cfloat cdouble clongdouble ' +\n        'cuchar cushort cuint culonglong cstringarray semistatic'\n    },\n    contains: [ {\n        className: 'meta', // Actually pragma\n        begin: /{\\./,\n        end: /\\.}/,\n        relevance: 10\n      }, {\n        className: 'string',\n        begin: /[a-zA-Z]\\w*\"/,\n        end: /\"/,\n        contains: [{begin: /\"\"/}]\n      }, {\n        className: 'string',\n        begin: /([a-zA-Z]\\w*)?\"\"\"/,\n        end: /\"\"\"/\n      },\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'type',\n        begin: /\\b[A-Z]\\w+\\b/,\n        relevance: 0\n      }, {\n        className: 'number',\n        relevance: 0,\n        variants: [\n          {begin: /\\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/},\n          {begin: /\\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/},\n          {begin: /\\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/},\n          {begin: /\\b(\\d[_\\d]*)('?[iIuUfF](8|16|32|64))?/}\n        ]\n      },\n      hljs.HASH_COMMENT_MODE\n    ]\n  }\n};\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","hljs","aliases","keywords","keyword","literal","built_in","contains","className","begin","end","relevance","QUOTE_STRING_MODE","variants","HASH_COMMENT_MODE"]
}
