{"version":3,"sources":["re_graph/core.cljc"],"mappings":"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","names":["re_frame.core.reg_event_fx","re-graph.internals/interceptors","p__63210","p__63211","map__63212","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__63213","cljs.core.nth","db","dispatchable-event","instance-name","query-id","query","variables","callback-event","event","clojure.string/replace","or__4126__auto__","cljs.core.get_in","cljs.core/assoc-in","cljs.core.update_in","cljs.core/conj","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","re-graph.core/mutate","seq63217","self__4724__auto__","cljs.core/seq","args","callback-fn","cljs.core/last","G__63221","re-frame.core/dispatch","cljs.core.into","cljs.core.conj","cljs.core/vec","cljs.core/butlast","p__63225","p__63226","map__63227","vec__63228","re-graph.core/query","seq63235","G__63244","p__63245","p__63246","map__63247","vec__63248","cljs.core.merge","cljs.core.update","cljs.core/dissoc","temp__5735__auto__","abort-fn","G__63257","re-graph.core/abort","js/Error","re_graph.core.abort","re-graph.internals/default-instance-name","G__63265","p__63267","p__63268","map__63270","vec__63271","cofx","subscription-id","cljs.core/name","re_graph.logging.error","G__63279","re-graph.core/subscribe","re_graph.core.subscribe","G__63283","p__63286","p__63287","map__63288","vec__63289","G__63296","re-graph.core/unsubscribe","re_graph.core.unsubscribe","G__63297","p__63298","p__63299","map__63300","vec__63301","_","opts","vec__63305","map__63308","cljs.core/map?","ws-url","ws-sub-protocol","ws-reconnect-timeout","resume-subscriptions?","connection-init-payload","http-url","http-parameters","re-graph.internals/default-ws-url","p__63314","map__63315","temp__5733__auto__","subscription-ids","cljs.core/not-empty","cljs.core/keys","iter__4529__auto__","s__63318","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__63320","cljs.core/chunk-buffer","i__63319","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__63317","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","re-graph.internals/destroyed-instance","ws","G__63326","re-graph.core/init","re_graph.core.init","G__63327","G__63329","re-graph.core/destroy","re_graph.core.destroy","G__63330","cljs.core/chunk-first"],"sourcesContent":["(ns re-graph.core\n  (:require [re-frame.core :as re-frame]\n            [re-graph.internals :as internals\n             :refer [interceptors default-instance-name destroyed-instance]]\n            [re-graph.logging :as log]\n            [clojure.string :as string]))\n\n(re-frame/reg-event-fx\n ::mutate\n interceptors\n (fn [{:keys [db dispatchable-event instance-name]} [query-id query variables callback-event :as event]]\n   (let [query (str \"mutation \" (string/replace query #\"^mutation\\s?\" \"\"))]\n     (cond\n       (or (get-in db [:http-requests query-id])\n           (get-in db [:subscriptions query-id]))\n       {} ;; duplicate in-flight mutation\n\n       (get-in db [:websocket :ready?])\n       {:db (assoc-in db [:subscriptions query-id] {:callback callback-event})\n        ::internals/send-ws [(get-in db [:websocket :connection])\n                             {:id query-id\n                              :type \"start\"\n                              :payload {:query query\n                                        :variables variables}}]}\n\n       (:websocket db)\n       {:db (update-in db [:websocket :queue] conj dispatchable-event)}\n\n       :else\n       {:db (assoc-in db [:http-requests query-id] {:callback callback-event})\n        ::internals/send-http [instance-name\n                               query-id\n                               (:http-url db)\n                               {:request (:http-parameters db)\n                                :payload {:query query\n                                          :variables variables}}]}))))\n\n(defn mutate\n  \"Execute a GraphQL mutation. The arguments are:\n\n  [instance-name query-string variables callback]\n\n  If the optional `instance-name` is not provided, the default instance is\n  used. The callback function will receive the result of the mutation as its\n  sole argument.\"\n  [& args]\n  (let [callback-fn (last args)]\n    (re-frame/dispatch (into [::mutate] (conj (vec (butlast args)) [::internals/callback callback-fn])))))\n\n#?(:clj\n   (def\n     ^{:doc \"Executes a mutation synchronously. The arguments are:\n\n             [instance-name query-string variables timeout]\n\n             The `instance-name` and `timeout` are optional. The `timeout` is\n             specified in milliseconds.\"}\n     mutate-sync\n     (partial internals/sync-wrapper mutate)))\n\n(re-frame/reg-event-fx\n ::query\n interceptors\n (fn [{:keys [db dispatchable-event instance-name]} [query-id query variables callback-event :as event]]\n   (let [query (str \"query \" (string/replace query #\"^query\\s?\" \"\"))]\n     (cond\n       (or (get-in db [:http-requests query-id])\n           (get-in db [:subscriptions query-id]))\n       {} ;; duplicate in-flight query\n\n       (get-in db [:websocket :ready?])\n       {:db (assoc-in db [:subscriptions query-id] {:callback callback-event})\n        ::internals/send-ws [(get-in db [:websocket :connection])\n                             {:id query-id\n                              :type \"start\"\n                              :payload {:query query\n                                        :variables variables}}]}\n\n       (get-in db [:websocket])\n       {:db (update-in db [:websocket :queue] conj dispatchable-event)}\n\n       :else\n       {:db (assoc-in db [:http-requests query-id] {:callback callback-event})\n        ::internals/send-http [instance-name\n                               query-id\n                               (:http-url db)\n                               {:request (:http-parameters db)\n                                :payload {:query query\n                                          :variables variables}}]}))))\n\n(defn query\n  \"Execute a GraphQL query. The arguments are:\n\n  [instance-name query-string variables callback]\n\n  If the optional `instance-name` is not provided, the default instance is\n  used. The callback function will receive the result of the query as its\n  sole argument.\"\n  [& args]\n  (let [callback-fn (last args)]\n    (re-frame/dispatch (into [::query] (conj (vec (butlast args)) [::internals/callback callback-fn])))))\n\n#?(:clj\n   (def\n     ^{:doc \"Executes a query synchronously. The arguments are:\n\n             [instance-name query-string variables timeout]\n\n             The `instance-name` and `timeout` are optional. The `timeout` is\n             specified in milliseconds.\"}\n     query-sync\n     (partial internals/sync-wrapper query)))\n\n(re-frame/reg-event-fx\n ::abort\n interceptors\n (fn [{:keys [db]} [query-id]]\n   (merge\n    {:db (-> db\n             (update :subscriptions dissoc query-id)\n             (update :http-requests dissoc query-id))}\n    (when-let [abort-fn (get-in db [:http-requests query-id :abort])]\n      {::internals/call-abort abort-fn}) )))\n\n(defn abort\n  ([query-id] (abort default-instance-name query-id))\n  ([instance-name query-id]\n   (re-frame/dispatch [::abort instance-name query-id])))\n\n(re-frame/reg-event-fx\n ::subscribe\n interceptors\n (fn [{:keys [db instance-name dispatchable-event] :as cofx} [subscription-id query variables callback-event :as event]]\n   (cond\n     (get-in db [:subscriptions (name subscription-id) :active?])\n     {} ;; duplicate subscription\n\n     (get-in db [:websocket :ready?])\n     {:db (assoc-in db [:subscriptions (name subscription-id)] {:callback callback-event\n                                                                :event dispatchable-event\n                                                                :active? true})\n      ::internals/send-ws [(get-in db [:websocket :connection])\n                           {:id (name subscription-id)\n                            :type \"start\"\n                            :payload {:query (str \"subscription \" (string/replace query #\"^subscription\\s?\" \"\"))\n                                      :variables variables}}]}\n\n     (:websocket db)\n     {:db (update-in db [:websocket :queue] conj dispatchable-event)}\n\n     :else\n     (log/error\n       (str\n        \"Error creating subscription \" subscription-id\n        \" on instance \" instance-name\n         \": Websocket is not enabled, subscriptions are not possible. Please check your re-graph configuration\")))))\n\n(defn subscribe\n  ([subscription-id query variables callback-fn] (subscribe default-instance-name subscription-id query variables callback-fn))\n  ([instance-name subscription-id query variables callback-fn]\n   (re-frame/dispatch [::subscribe instance-name subscription-id query variables [::internals/callback callback-fn]])))\n\n(re-frame/reg-event-fx\n ::unsubscribe\n interceptors\n (fn [{:keys [db instance-name]} [subscription-id :as event]]\n   (if (get-in db [:websocket :ready?])\n     {:db (update db :subscriptions dissoc (name subscription-id))\n      ::internals/send-ws [(get-in db [:websocket :connection])\n                           {:id (name subscription-id)\n                            :type \"stop\"}]}\n\n     {:db (update-in db [:websocket :queue] conj [::unsubscribe instance-name subscription-id])})))\n\n(defn unsubscribe\n  ([subscription-id] (unsubscribe default-instance-name subscription-id))\n  ([instance-name subscription-id]\n   (re-frame/dispatch [::unsubscribe instance-name subscription-id])))\n\n(re-frame/reg-event-fx\n ::init\n (fn [{:keys [db]} [_ instance-name opts]]\n   (let [[instance-name opts] (cond\n                                (and (nil? instance-name) (nil? opts))\n                                [default-instance-name {}]\n\n                                (map? instance-name)\n                                [default-instance-name instance-name]\n\n                                (nil? instance-name)\n                                [default-instance-name opts]\n\n                                :else\n                                [instance-name opts])\n         {:keys [ws-url ws-sub-protocol ws-reconnect-timeout\n                 resume-subscriptions? connection-init-payload\n                 http-url http-parameters]\n          :or {ws-url (internals/default-ws-url)\n               ws-sub-protocol \"graphql-ws\"\n               ws-reconnect-timeout 5000\n               resume-subscriptions? true\n               connection-init-payload {}\n\n               http-parameters {}\n               http-url \"/graphql\"}} opts]\n\n     (merge\n      {:db (assoc-in db [:re-graph instance-name]\n                     (merge\n                      (when ws-url\n                        {:websocket {:url ws-url\n                                     :sub-protocol ws-sub-protocol\n                                     :ready? false\n                                     :connection-init-payload connection-init-payload\n                                     :queue []\n                                     :reconnect-timeout ws-reconnect-timeout\n                                     :resume-subscriptions? resume-subscriptions?}})\n                      (when http-url\n                        {:http-url http-url\n                         :http-parameters http-parameters})))}\n      (when ws-url\n        {::internals/connect-ws [instance-name ws-url ws-sub-protocol]})))))\n\n(re-frame/reg-event-fx\n ::destroy\n interceptors\n (fn [{:keys [db instance-name]} _]\n   (if-let [subscription-ids (not-empty (-> db :subscriptions keys))]\n     {:dispatch-n (for [subscription-id subscription-ids]\n                    [::unsubscribe instance-name subscription-id])\n      :dispatch [::destroy instance-name]}\n\n     (merge\n      {:db destroyed-instance}\n      (when-let [ws (get-in db [:websocket :connection])]\n        {::internals/disconnect-ws [ws]})))))\n\n(defn init\n  ([opts] (init default-instance-name opts))\n  ([instance-name opts]\n   (re-frame/dispatch [::init instance-name opts])))\n\n(defn destroy\n  ([] (destroy default-instance-name))\n  ([instance-name]\n   (re-frame/dispatch [::destroy instance-name])))\n"]}