{
"version":3,
"file":"goog.history.history.js",
"lineCount":381,
"mappings":"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",
"sources":["goog/history/history.js"],
"sourcesContent":["// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Browser history stack management class.\n *\n * The goog.History object allows a page to create history state without leaving\n * the current document. This allows users to, for example, hit the browser's\n * back button without leaving the current page.\n *\n * The history object can be instantiated in one of two modes. In user visible\n * mode, the current history state is shown in the browser address bar as a\n * document location fragment (the portion of the URL after the '#'). These\n * addresses can be bookmarked, copied and pasted into another browser, and\n * modified directly by the user like any other URL.\n *\n * If the history object is created in invisible mode, the user can still\n * affect the state using the browser forward and back buttons, but the current\n * state is not displayed in the browser address bar. These states are not\n * bookmarkable or editable.\n *\n * It is possible to use both types of history object on the same page, but not\n * currently recommended due to browser deficiencies.\n *\n * Tested to work in:\n * <ul>\n *   <li>Firefox 1.0-4.0\n *   <li>Internet Explorer 5.5-9.0\n *   <li>Opera 9+\n *   <li>Safari 4+\n * </ul>\n *\n * @author brenneman@google.com (Shawn Brenneman)\n * @see ../demos/history1.html\n * @see ../demos/history2.html\n */\n\n/* Some browser specific implementation notes:\n *\n * Firefox (through version 2.0.0.1):\n *\n * Ideally, navigating inside the hidden iframe could be done using\n * about:blank#state instead of a real page on the server. Setting the hash on\n * about:blank creates history entries, but the hash is not recorded and is lost\n * when the user hits the back button. This is true in Opera as well. A blank\n * HTML page must be provided for invisible states to be recorded in the iframe\n * hash.\n *\n * After leaving the page with the History object and returning to it (by\n * hitting the back button from another site), the last state of the iframe is\n * overwritten. The most recent state is saved in a hidden input field so the\n * previous state can be restored.\n *\n * Firefox does not store the previous value of dynamically generated input\n * elements. To save the state, the hidden element must be in the HTML document,\n * either in the original source or added with document.write. If a reference\n * to the input element is not provided as a constructor argument, then the\n * history object creates one using document.write, in which case the history\n * object must be created from a script in the body element of the page.\n *\n * Manually editing the address field to a different hash link prevents further\n * updates to the address bar. The page continues to work as normal, but the\n * address shown will be incorrect until the page is reloaded.\n *\n * NOTE(user): It should be noted that Firefox will URL encode any non-regular\n * ascii character, along with |space|, \", <, and >, when added to the fragment.\n * If you expect these characters in your tokens you should consider that\n * setToken('<b>') would result in the history fragment \"%3Cb%3E\", and\n * \"esp&eacute;re\" would show \"esp%E8re\".  (IE allows unicode characters in the\n * fragment)\n *\n * TODO(user): Should we encapsulate this escaping into the API for visible\n * history and encode all characters that aren't supported by Firefox?  It also\n * needs to be optional so apps can elect to handle the escaping themselves.\n *\n *\n * Internet Explorer (through version 7.0):\n *\n * IE does not modify the history stack when the document fragment is changed.\n * We create history entries instead by using document.open and document.write\n * into a hidden iframe.\n *\n * IE destroys the history stack when navigating from /foo.html#someFragment to\n * /foo.html. The workaround is to always append the # to the URL. This is\n * somewhat unfortunate when loading the page without any # specified, because\n * a second \"click\" sound will play on load as the fragment is automatically\n * appended. If the hash is always present, this can be avoided.\n *\n * Manually editing the hash in the address bar in IE6 and then hitting the back\n * button can replace the page with a blank page. This is a Bad User Experience,\n * but probably not preventable.\n *\n * IE also has a bug when the page is loaded via a server redirect, setting\n * a new hash value on the window location will force a page reload. This will\n * happen the first time setToken is called with a new token. The only known\n * workaround is to force a client reload early, for example by setting\n * window.location.hash = window.location.hash, which will otherwise be a no-op.\n *\n * Internet Explorer 8.0, Webkit 532.1 and Gecko 1.9.2:\n *\n * IE8 has introduced the support to the HTML5 onhashchange event, which means\n * we don't have to do any polling to detect fragment changes. Chrome and\n * Firefox have added it on their newer builds, wekbit 532.1 and gecko 1.9.2.\n * http://www.w3.org/TR/html5/history.html\n * NOTE(goto): it is important to note that the document needs to have the\n * <!DOCTYPE html> tag to enable the IE8 HTML5 mode. If the tag is not present,\n * IE8 will enter IE7 compatibility mode (which can also be enabled manually).\n *\n * Opera (through version 9.02):\n *\n * Navigating through pages at a rate faster than some threshold causes Opera\n * to cancel all outstanding timeouts and intervals, including the location\n * polling loop. Since this condition cannot be detected, common input events\n * are captured to cause the loop to restart.\n *\n * location.replace is adding a history entry inside setHash_, despite\n * documentation that suggests it should not.\n *\n *\n * Safari (through version 2.0.4):\n *\n * After hitting the back button, the location.hash property is no longer\n * readable from JavaScript. This is fixed in later WebKit builds, but not in\n * currently shipping Safari. For now, the only recourse is to disable history\n * states in Safari. Pages are still navigable via the History object, but the\n * back button cannot restore previous states.\n *\n * Safari sets history states on navigation to a hashlink, but doesn't allow\n * polling of the hash, so following actual anchor links in the page will create\n * useless history entries. Using location.replace does not seem to prevent\n * this. Not a terribly good user experience, but fixed in later Webkits.\n *\n *\n * WebKit (nightly version 420+):\n *\n * This almost works. Returning to a page with an invisible history object does\n * not restore the old state, however, and there is no pageshow event that fires\n * in this browser. Holding off on finding a solution for now.\n *\n *\n * HTML5 capable browsers (Firefox 4, Chrome, Safari 5)\n *\n * No known issues. The goog.history.Html5History class provides a simpler\n * implementation more suitable for recent browsers. These implementations\n * should be merged so the history class automatically invokes the correct\n * implementation.\n */\n\n\ngoog.provide('goog.History');\ngoog.provide('goog.History.Event');\ngoog.provide('goog.History.EventType');\n\ngoog.require('goog.Timer');\ngoog.require('goog.asserts');\ngoog.require('goog.dom');\ngoog.require('goog.dom.InputType');\ngoog.require('goog.dom.safe');\n/** @suppress {extraRequire} */\ngoog.require('goog.events.Event');\ngoog.require('goog.events.EventHandler');\ngoog.require('goog.events.EventTarget');\ngoog.require('goog.events.EventType');\ngoog.require('goog.history.Event');\ngoog.require('goog.history.EventType');\ngoog.require('goog.html.SafeHtml');\ngoog.require('goog.html.TrustedResourceUrl');\ngoog.require('goog.html.uncheckedconversions');\ngoog.require('goog.labs.userAgent.device');\ngoog.require('goog.memoize');\ngoog.require('goog.string');\ngoog.require('goog.string.Const');\ngoog.require('goog.userAgent');\n\n\n\n/**\n * A history management object. Can be instantiated in user-visible mode (uses\n * the address fragment to manage state) or in hidden mode. This object should\n * be created from a script in the document body before the document has\n * finished loading.\n *\n * To store the hidden states in browsers other than IE, a hidden iframe is\n * used. It must point to a valid html page on the same domain (which can and\n * probably should be blank.)\n *\n * Sample instantiation and usage:\n *\n * <pre>\n * // Instantiate history to use the address bar for state.\n * var h = new goog.History();\n * goog.events.listen(h, goog.history.EventType.NAVIGATE, navCallback);\n * h.setEnabled(true);\n *\n * // Any changes to the location hash will call the following function.\n * function navCallback(e) {\n *   alert('Navigated to state \"' + e.token + '\"');\n * }\n *\n * // The history token can also be set from code directly.\n * h.setToken('foo');\n * </pre>\n *\n * @param {boolean=} opt_invisible True to use hidden history states instead of\n *     the user-visible location hash.\n * @param {!goog.html.TrustedResourceUrl=} opt_blankPageUrl A URL to a\n *     blank page on the same server. Required if opt_invisible is true.\n *     This URL is also used as the src for the iframe used to track history\n *     state in IE (if not specified the iframe is not given a src attribute).\n *     Access is Denied error may occur in IE7 if the window's URL's scheme\n *     is https, and this URL is not specified.\n * @param {HTMLInputElement=} opt_input The hidden input element to be used to\n *     store the history token.  If not provided, a hidden input element will\n *     be created using document.write.\n * @param {HTMLIFrameElement=} opt_iframe The hidden iframe that will be used by\n *     IE for pushing history state changes, or by all browsers if opt_invisible\n *     is true. If not provided, a hidden iframe element will be created using\n *     document.write.\n * @constructor\n * @extends {goog.events.EventTarget}\n */\ngoog.History = function(\n    opt_invisible, opt_blankPageUrl, opt_input, opt_iframe) {\n  goog.events.EventTarget.call(this);\n\n  if (opt_invisible && !opt_blankPageUrl) {\n    throw new Error(\n        'Can\\'t use invisible history without providing a blank page.');\n  }\n\n  var input;\n  if (opt_input) {\n    input = opt_input;\n  } else {\n    var inputId = 'history_state' + goog.History.historyCount_;\n    var inputHtml = goog.html.SafeHtml.create('input', {\n      type: goog.dom.InputType.TEXT,\n      name: inputId,\n      id: inputId,\n      style: goog.string.Const.from('display:none')\n    });\n    goog.dom.safe.documentWrite(document, inputHtml);\n    input = goog.dom.getElement(inputId);\n  }\n\n  /**\n   * An input element that stores the current iframe state. Used to restore\n   * the state when returning to the page on non-IE browsers.\n   * @type {HTMLInputElement}\n   * @private\n   */\n  this.hiddenInput_ = /** @type {HTMLInputElement} */ (input);\n\n  /**\n   * The window whose location contains the history token fragment. This is\n   * the window that contains the hidden input. It's typically the top window.\n   * It is not necessarily the same window that the js code is loaded in.\n   * @type {Window}\n   * @private\n   */\n  this.window_ = opt_input ?\n      goog.dom.getWindow(goog.dom.getOwnerDocument(opt_input)) :\n      window;\n\n  /**\n   * The base URL for the hidden iframe. Must refer to a document in the\n   * same domain as the main page.\n   * @type {!goog.html.TrustedResourceUrl|undefined}\n   * @private\n   */\n  this.iframeSrc_ = opt_blankPageUrl;\n\n  if (goog.userAgent.IE && !opt_blankPageUrl) {\n    if (window.location.protocol == 'https') {\n      this.iframeSrc_ = goog.html.TrustedResourceUrl.fromConstant(\n          goog.string.Const.from('https:///'));\n    } else {\n      this.iframeSrc_ = goog.html.TrustedResourceUrl.fromConstant(\n          goog.string.Const.from('javascript:\"\"'));\n    }\n  }\n\n  /**\n   * A timer for polling the current history state for changes.\n   * @type {goog.Timer}\n   * @private\n   */\n  this.timer_ = new goog.Timer(goog.History.PollingType.NORMAL);\n  this.registerDisposable(this.timer_);\n\n  /**\n   * True if the state tokens are displayed in the address bar, false for hidden\n   * history states.\n   * @type {boolean}\n   * @private\n   */\n  this.userVisible_ = !opt_invisible;\n\n  /**\n   * An object to keep track of the history event listeners.\n   * @type {goog.events.EventHandler<!goog.History>}\n   * @private\n   */\n  this.eventHandler_ = new goog.events.EventHandler(this);\n\n  if (opt_invisible || goog.History.LEGACY_IE) {\n    var iframe;\n    if (opt_iframe) {\n      iframe = opt_iframe;\n    } else {\n      var iframeId = 'history_iframe' + goog.History.historyCount_;\n      // Using a \"sandbox\" attribute on the iframe might be possible, but\n      // this HTML didn't initially have it and when it was refactored\n      // to SafeHtml it was kept without it.\n      var iframeHtml = goog.html.SafeHtml.createIframe(this.iframeSrc_, null, {\n        id: iframeId,\n        style: goog.string.Const.from('display:none'),\n        sandbox: undefined\n      });\n      goog.dom.safe.documentWrite(document, iframeHtml);\n      iframe = goog.dom.getElement(iframeId);\n    }\n\n    /**\n     * Internet Explorer uses a hidden iframe for all history changes. Other\n     * browsers use the iframe only for pushing invisible states.\n     * @type {HTMLIFrameElement}\n     * @private\n     */\n    this.iframe_ = /** @type {HTMLIFrameElement} */ (iframe);\n\n    /**\n     * Whether the hidden iframe has had a document written to it yet in this\n     * session.\n     * @type {boolean}\n     * @private\n     */\n    this.unsetIframe_ = true;\n  }\n\n  if (goog.History.LEGACY_IE) {\n    // IE relies on the hidden input to restore the history state from previous\n    // sessions, but input values are only restored after window.onload. Set up\n    // a callback to poll the value after the onload event.\n    this.eventHandler_.listen(\n        this.window_, goog.events.EventType.LOAD, this.onDocumentLoaded);\n\n    /**\n     * IE-only variable for determining if the document has loaded.\n     * @type {boolean}\n     * @protected\n     */\n    this.documentLoaded = false;\n\n    /**\n     * IE-only variable for storing whether the history object should be enabled\n     * once the document finishes loading.\n     * @type {boolean}\n     * @private\n     */\n    this.shouldEnable_ = false;\n  }\n\n  // Set the initial history state.\n  if (this.userVisible_) {\n    this.setHash_(this.getToken(), true);\n  } else {\n    this.setIframeToken_(this.hiddenInput_.value);\n  }\n\n  goog.History.historyCount_++;\n};\ngoog.inherits(goog.History, goog.events.EventTarget);\n\n\n/**\n * Status of when the object is active and dispatching events.\n * @type {boolean}\n * @private\n */\ngoog.History.prototype.enabled_ = false;\n\n\n/**\n * Whether the object is performing polling with longer intervals. This can\n * occur for instance when setting the location of the iframe when in invisible\n * mode and the server that is hosting the blank html page is down. In FF, this\n * will cause the location of the iframe to no longer be accessible, with\n * permision denied exceptions being thrown on every access of the history\n * token. When this occurs, the polling interval is elongated. This causes\n * exceptions to be thrown at a lesser rate while allowing for the history\n * object to resurrect itself when the html page becomes accessible.\n * @type {boolean}\n * @private\n */\ngoog.History.prototype.longerPolling_ = false;\n\n\n/**\n * The last token set by the history object, used to poll for changes.\n * @type {?string}\n * @private\n */\ngoog.History.prototype.lastToken_ = null;\n\n\n/**\n * Whether the browser supports HTML5 history management's onhashchange event.\n * {@link http://www.w3.org/TR/html5/history.html}. IE 9 in compatibility mode\n * indicates that onhashchange is in window, but testing reveals the event\n * isn't actually fired.\n * @return {boolean} Whether onhashchange is supported.\n */\ngoog.History.isOnHashChangeSupported = goog.memoize(function() {\n  return goog.userAgent.IE ? goog.userAgent.isDocumentModeOrHigher(8) :\n                             'onhashchange' in goog.global;\n});\n\n\n/**\n * Whether the current browser is Internet Explorer prior to version 8. Many IE\n * specific workarounds developed before version 8 are unnecessary in more\n * current versions.\n * @type {boolean}\n */\ngoog.History.LEGACY_IE =\n    goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(8);\n\n\n/**\n * Whether the browser always requires the hash to be present. Internet Explorer\n * before version 8 will reload the HTML page if the hash is omitted.\n * @type {boolean}\n */\ngoog.History.HASH_ALWAYS_REQUIRED = goog.History.LEGACY_IE;\n\n\n/**\n * If not null, polling in the user invisible mode will be disabled until this\n * token is seen. This is used to prevent a race condition where the iframe\n * hangs temporarily while the location is changed.\n * @type {?string}\n * @private\n */\ngoog.History.prototype.lockedToken_ = null;\n\n\n/** @override */\ngoog.History.prototype.disposeInternal = function() {\n  goog.History.superClass_.disposeInternal.call(this);\n  this.eventHandler_.dispose();\n  this.setEnabled(false);\n};\n\n\n/**\n * Starts or stops the History polling loop. When enabled, the History object\n * will immediately fire an event for the current location. The caller can set\n * up event listeners between the call to the constructor and the call to\n * setEnabled.\n *\n * On IE, actual startup may be delayed until the iframe and hidden input\n * element have been loaded and can be polled. This behavior is transparent to\n * the caller.\n *\n * @param {boolean} enable Whether to enable the history polling loop.\n */\ngoog.History.prototype.setEnabled = function(enable) {\n\n  if (enable == this.enabled_) {\n    return;\n  }\n\n  if (goog.History.LEGACY_IE && !this.documentLoaded) {\n    // Wait until the document has actually loaded before enabling the\n    // object or any saved state from a previous session will be lost.\n    this.shouldEnable_ = enable;\n    return;\n  }\n\n  if (enable) {\n    if (goog.userAgent.OPERA) {\n      // Capture events for common user input so we can restart the timer in\n      // Opera if it fails. Yes, this is distasteful. See operaDefibrillator_.\n      this.eventHandler_.listen(\n          this.window_.document, goog.History.INPUT_EVENTS_,\n          this.operaDefibrillator_);\n    } else if (goog.userAgent.GECKO) {\n      // Firefox will not restore the correct state after navigating away from\n      // and then back to the page with the history object. This can be fixed\n      // by restarting the history object on the pageshow event.\n      this.eventHandler_.listen(this.window_, 'pageshow', this.onShow_);\n    }\n\n    // TODO(user): make HTML5 and invisible history work by listening to the\n    // iframe # changes instead of the window.\n    if (goog.History.isOnHashChangeSupported() && this.userVisible_) {\n      this.eventHandler_.listen(\n          this.window_, goog.events.EventType.HASHCHANGE, this.onHashChange_);\n      this.enabled_ = true;\n      this.dispatchEvent(new goog.history.Event(this.getToken(), false));\n    } else if (\n        !(goog.userAgent.IE && !goog.labs.userAgent.device.isMobile()) ||\n        this.documentLoaded) {\n      // Start dispatching history events if all necessary loading has\n      // completed (always true for browsers other than IE.)\n      this.eventHandler_.listen(\n          this.timer_, goog.Timer.TICK, goog.bind(this.check_, this, true));\n\n      this.enabled_ = true;\n\n      // Initialize last token at startup except on IE < 8, where the last token\n      // must only be set in conjunction with IFRAME updates, or the IFRAME will\n      // start out of sync and remove any pre-existing URI fragment.\n      if (!goog.History.LEGACY_IE) {\n        this.lastToken_ = this.getToken();\n        this.dispatchEvent(new goog.history.Event(this.getToken(), false));\n      }\n\n      this.timer_.start();\n    }\n\n  } else {\n    this.enabled_ = false;\n    this.eventHandler_.removeAll();\n    this.timer_.stop();\n  }\n};\n\n\n/**\n * Callback for the window onload event in IE. This is necessary to read the\n * value of the hidden input after restoring a history session. The value of\n * input elements is not viewable until after window onload for some reason (the\n * iframe state is similarly unavailable during the loading phase.)  If\n * setEnabled is called before the iframe has completed loading, the history\n * object will actually be enabled at this point.\n * @protected\n */\ngoog.History.prototype.onDocumentLoaded = function() {\n  this.documentLoaded = true;\n\n  if (this.hiddenInput_.value) {\n    // Any saved value in the hidden input can only be read after the document\n    // has been loaded due to an IE limitation. Restore the previous state if\n    // it has been set.\n    this.setIframeToken_(this.hiddenInput_.value, true);\n  }\n\n  this.setEnabled(this.shouldEnable_);\n};\n\n\n/**\n * Handler for the Gecko pageshow event. Restarts the history object so that the\n * correct state can be restored in the hash or iframe.\n * @param {goog.events.BrowserEvent} e The browser event.\n * @private\n */\ngoog.History.prototype.onShow_ = function(e) {\n  // NOTE(user): persisted is a property passed in the pageshow event that\n  // indicates whether the page is being persisted from the cache or is being\n  // loaded for the first time.\n  if (e.getBrowserEvent()['persisted']) {\n    this.setEnabled(false);\n    this.setEnabled(true);\n  }\n};\n\n\n/**\n * Handles HTML5 onhashchange events on browsers where it is supported.\n * This is very similar to {@link #check_}, except that it is not executed\n * continuously. It is only used when\n * `goog.History.isOnHashChangeSupported()` is true.\n * @param {goog.events.BrowserEvent} e The browser event.\n * @private\n */\ngoog.History.prototype.onHashChange_ = function(e) {\n  var hash = this.getLocationFragment_(this.window_);\n  if (hash != this.lastToken_) {\n    this.update_(hash, true);\n  }\n};\n\n\n/**\n * @return {string} The current token.\n */\ngoog.History.prototype.getToken = function() {\n  if (this.lockedToken_ != null) {\n    return this.lockedToken_;\n  } else if (this.userVisible_) {\n    return this.getLocationFragment_(this.window_);\n  } else {\n    return this.getIframeToken_() || '';\n  }\n};\n\n\n/**\n * Sets the history state. When user visible states are used, the URL fragment\n * will be set to the provided token.  Sometimes it is necessary to set the\n * history token before the document title has changed, in this case IE's\n * history drop down can be out of sync with the token.  To get around this\n * problem, the app can pass in a title to use with the hidden iframe.\n * @param {string} token The history state identifier.\n * @param {string=} opt_title Optional title used when setting the hidden iframe\n *     title in IE.\n */\ngoog.History.prototype.setToken = function(token, opt_title) {\n  this.setHistoryState_(token, false, opt_title);\n};\n\n\n/**\n * Replaces the current history state without affecting the rest of the history\n * stack.\n * @param {string} token The history state identifier.\n * @param {string=} opt_title Optional title used when setting the hidden iframe\n *     title in IE.\n */\ngoog.History.prototype.replaceToken = function(token, opt_title) {\n  this.setHistoryState_(token, true, opt_title);\n};\n\n\n/**\n * Gets the location fragment for the current URL.  We don't use location.hash\n * directly as the browser helpfully urlDecodes the string for us which can\n * corrupt the tokens.  For example, if we want to store: label/%2Froot it would\n * be returned as label//root.\n * @param {Window} win The window object to use.\n * @return {string} The fragment.\n * @private\n */\ngoog.History.prototype.getLocationFragment_ = function(win) {\n  var href = win.location.href;\n  var index = href.indexOf('#');\n  return index < 0 ? '' : href.substring(index + 1);\n};\n\n\n/**\n * Sets the history state. When user visible states are used, the URL fragment\n * will be set to the provided token. Setting opt_replace to true will cause the\n * navigation to occur, but will replace the current history entry without\n * affecting the length of the stack.\n *\n * @param {string} token The history state identifier.\n * @param {boolean} replace Set to replace the current history entry instead of\n *    appending a new history state.\n * @param {string=} opt_title Optional title used when setting the hidden iframe\n *     title in IE.\n * @private\n */\ngoog.History.prototype.setHistoryState_ = function(token, replace, opt_title) {\n  if (this.getToken() != token) {\n    if (this.userVisible_) {\n      this.setHash_(token, replace);\n\n      if (!goog.History.isOnHashChangeSupported()) {\n        if (goog.userAgent.IE && !goog.labs.userAgent.device.isMobile()) {\n          // IE must save state using the iframe.\n          this.setIframeToken_(token, replace, opt_title);\n        }\n      }\n\n      // This condition needs to be called even if\n      // goog.History.isOnHashChangeSupported() is true so the NAVIGATE event\n      // fires sychronously.\n      if (this.enabled_) {\n        this.check_(false);\n      }\n    } else {\n      // Fire the event immediately so that setting history is synchronous, but\n      // set a suspendToken so that polling doesn't trigger a 'back'.\n      this.setIframeToken_(token, replace);\n      this.lockedToken_ = this.lastToken_ = this.hiddenInput_.value = token;\n      this.dispatchEvent(new goog.history.Event(token, false));\n    }\n  }\n};\n\n\n/**\n * Sets or replaces the URL fragment. The token does not need to be URL encoded\n * according to the URL specification, though certain characters (like newline)\n * are automatically stripped.\n *\n * If opt_replace is not set, non-IE browsers will append a new entry to the\n * history list. Setting the hash does not affect the history stack in IE\n * (unless there is a pre-existing named anchor for that hash.)\n *\n * Older versions of Webkit cannot query the location hash, but it still can be\n * set. If we detect one of these versions, always replace instead of creating\n * new history entries.\n *\n * window.location.replace replaces the current state from the history stack.\n * http://www.whatwg.org/specs/web-apps/current-work/#dom-location-replace\n * http://www.whatwg.org/specs/web-apps/current-work/#replacement-enabled\n *\n * @param {string} token The new string to set.\n * @param {boolean=} opt_replace Set to true to replace the current token\n *    without appending a history entry.\n * @private\n */\ngoog.History.prototype.setHash_ = function(token, opt_replace) {\n  // If the page uses a BASE element, setting location.hash directly will\n  // navigate away from the current document. Also, the original URL path may\n  // possibly change from HTML5 history pushState. To account for these, the\n  // full path is always specified.\n  var loc = this.window_.location;\n  var url = loc.href.split('#')[0];\n\n  // If a hash has already been set, then removing it programmatically will\n  // reload the page. Once there is a hash, we won't remove it.\n  var hasHash = goog.string.contains(loc.href, '#');\n\n  if (goog.History.HASH_ALWAYS_REQUIRED || hasHash || token) {\n    url += '#' + token;\n  }\n\n  if (url != loc.href) {\n    var safeUrl =\n        goog.html.uncheckedconversions\n            .safeUrlFromStringKnownToSatisfyTypeContract(\n                goog.string.Const.from('URL taken from location.href.'), url);\n    if (opt_replace) {\n      goog.dom.safe.replaceLocation(loc, safeUrl);\n    } else {\n      goog.dom.safe.setLocationHref(loc, safeUrl);\n    }\n  }\n};\n\n\n/**\n * Sets the hidden iframe state. On IE, this is accomplished by writing a new\n * document into the iframe. In Firefox, the iframe's URL fragment stores the\n * state instead.\n *\n * Older versions of webkit cannot set the iframe, so ignore those browsers.\n *\n * @param {string} token The new string to set.\n * @param {boolean=} opt_replace Set to true to replace the current iframe state\n *     without appending a new history entry.\n * @param {string=} opt_title Optional title used when setting the hidden iframe\n *     title in IE.\n * @private\n */\ngoog.History.prototype.setIframeToken_ = function(\n    token, opt_replace, opt_title) {\n  if (this.unsetIframe_ || token != this.getIframeToken_()) {\n    this.unsetIframe_ = false;\n    token = goog.string.urlEncode(token);\n\n    if (goog.userAgent.IE) {\n      // Caching the iframe document results in document permission errors after\n      // leaving the page and returning. Access it anew each time instead.\n      var doc = goog.dom.getFrameContentDocument(this.iframe_);\n\n      doc.open('text/html', opt_replace ? 'replace' : undefined);\n      var iframeSourceHtml = goog.html.SafeHtml.concat(\n          goog.html.SafeHtml.create(\n              'title', {}, (opt_title || this.window_.document.title)),\n          goog.html.SafeHtml.create('body', {}, token));\n      goog.dom.safe.documentWrite(doc, iframeSourceHtml);\n      doc.close();\n    } else {\n      goog.asserts.assertInstanceof(\n          this.iframeSrc_, goog.html.TrustedResourceUrl,\n          'this.iframeSrc_ must be set on calls to setIframeToken_');\n      var url =\n          goog.html.TrustedResourceUrl.unwrap(\n              /** @type {!goog.html.TrustedResourceUrl} */ (this.iframeSrc_)) +\n          '#' + token;\n\n      // In Safari, it is possible for the contentWindow of the iframe to not\n      // be present when the page is loading after a reload.\n      var contentWindow = this.iframe_.contentWindow;\n      if (contentWindow) {\n        if (opt_replace) {\n          goog.dom.safe.replaceLocation(contentWindow.location, url);\n        } else {\n          goog.dom.safe.setLocationHref(contentWindow.location, url);\n        }\n      }\n    }\n  }\n};\n\n\n/**\n * Return the current state string from the hidden iframe. On internet explorer,\n * this is stored as a string in the document body. Other browsers use the\n * location hash of the hidden iframe.\n *\n * Older versions of webkit cannot access the iframe location, so always return\n * null in that case.\n *\n * @return {?string} The state token saved in the iframe (possibly null if the\n *     iframe has never loaded.).\n * @private\n */\ngoog.History.prototype.getIframeToken_ = function() {\n  if (goog.userAgent.IE) {\n    var doc = goog.dom.getFrameContentDocument(this.iframe_);\n    return doc.body ? goog.string.urlDecode(doc.body.innerHTML) : null;\n  } else {\n    // In Safari, it is possible for the contentWindow of the iframe to not\n    // be present when the page is loading after a reload.\n    var contentWindow = this.iframe_.contentWindow;\n    if (contentWindow) {\n      var hash;\n\n      try {\n        // Iframe tokens are urlEncoded\n        hash = goog.string.urlDecode(this.getLocationFragment_(contentWindow));\n      } catch (e) {\n        // An exception will be thrown if the location of the iframe can not be\n        // accessed (permission denied). This can occur in FF if the the server\n        // that is hosting the blank html page goes down and then a new history\n        // token is set. The iframe will navigate to an error page, and the\n        // location of the iframe can no longer be accessed. Due to the polling,\n        // this will cause constant exceptions to be thrown. In this case,\n        // we enable longer polling. We do not have to attempt to reset the\n        // iframe token because (a) we already fired the NAVIGATE event when\n        // setting the token, (b) we can rely on the locked token for current\n        // state, and (c) the token is still in the history and\n        // accesible on forward/back.\n        if (!this.longerPolling_) {\n          this.setLongerPolling_(true);\n        }\n\n        return null;\n      }\n\n      // There was no exception when getting the hash so turn off longer polling\n      // if it is on.\n      if (this.longerPolling_) {\n        this.setLongerPolling_(false);\n      }\n\n      return hash || null;\n    } else {\n      return null;\n    }\n  }\n};\n\n\n/**\n * Checks the state of the document fragment and the iframe title to detect\n * navigation changes. If `goog.HistoryisOnHashChangeSupported()` is\n * `false`, then this runs approximately twenty times per second.\n * @param {boolean} isNavigation True if the event was initiated by a browser\n *     action, false if it was caused by a setToken call. See\n *     {@link goog.history.Event}.\n * @private\n */\ngoog.History.prototype.check_ = function(isNavigation) {\n  if (this.userVisible_) {\n    var hash = this.getLocationFragment_(this.window_);\n    if (hash != this.lastToken_) {\n      this.update_(hash, isNavigation);\n    }\n  }\n\n  // Old IE uses the iframe for both visible and non-visible versions.\n  if (!this.userVisible_ || goog.History.LEGACY_IE) {\n    var token = this.getIframeToken_() || '';\n    if (this.lockedToken_ == null || token == this.lockedToken_) {\n      this.lockedToken_ = null;\n      if (token != this.lastToken_) {\n        this.update_(token, isNavigation);\n      }\n    }\n  }\n};\n\n\n/**\n * Updates the current history state with a given token. Called after a change\n * to the location or the iframe state is detected by poll_.\n *\n * @param {string} token The new history state.\n * @param {boolean} isNavigation True if the event was initiated by a browser\n *     action, false if it was caused by a setToken call. See\n *     {@link goog.history.Event}.\n * @private\n */\ngoog.History.prototype.update_ = function(token, isNavigation) {\n  this.lastToken_ = this.hiddenInput_.value = token;\n\n  if (this.userVisible_) {\n    if (goog.History.LEGACY_IE) {\n      this.setIframeToken_(token);\n    }\n\n    this.setHash_(token);\n  } else {\n    this.setIframeToken_(token);\n  }\n\n  this.dispatchEvent(new goog.history.Event(this.getToken(), isNavigation));\n};\n\n\n/**\n * Sets if the history oject should use longer intervals when polling.\n *\n * @param {boolean} longerPolling Whether to enable longer polling.\n * @private\n */\ngoog.History.prototype.setLongerPolling_ = function(longerPolling) {\n  if (this.longerPolling_ != longerPolling) {\n    this.timer_.setInterval(\n        longerPolling ? goog.History.PollingType.LONG :\n                        goog.History.PollingType.NORMAL);\n  }\n  this.longerPolling_ = longerPolling;\n};\n\n\n/**\n * Opera cancels all outstanding timeouts and intervals after any rapid\n * succession of navigation events, including the interval used to detect\n * navigation events. This function restarts the interval so that navigation can\n * continue. Ideally, only events which would be likely to cause a navigation\n * change (mousedown and keydown) would be bound to this function. Since Opera\n * seems to ignore keydown events while the alt key is pressed (such as\n * alt-left or right arrow), this function is also bound to the much more\n * frequent mousemove event. This way, when the update loop freezes, it will\n * unstick itself as the user wiggles the mouse in frustration.\n * @private\n */\ngoog.History.prototype.operaDefibrillator_ = function() {\n  this.timer_.stop();\n  this.timer_.start();\n};\n\n\n/**\n * List of user input event types registered in Opera to restart the history\n * timer (@see goog.History#operaDefibrillator_).\n * @type {Array<string>}\n * @private\n */\ngoog.History.INPUT_EVENTS_ = [\n  goog.events.EventType.MOUSEDOWN, goog.events.EventType.KEYDOWN,\n  goog.events.EventType.MOUSEMOVE\n];\n\n\n/**\n * Counter for the number of goog.History objects that have been instantiated.\n * Used to create unique IDs.\n * @type {number}\n * @private\n */\ngoog.History.historyCount_ = 0;\n\n\n/**\n * Types of polling. The values are in ms of the polling interval.\n * @enum {number}\n */\ngoog.History.PollingType = {\n  NORMAL: 150,\n  LONG: 10000\n};\n\n\n/**\n * Constant for the history change event type.\n * @enum {string}\n * @deprecated Use goog.history.EventType.\n */\ngoog.History.EventType = goog.history.EventType;\n\n\n\n/**\n * Constant for the history change event type.\n * @constructor\n * @deprecated Use goog.history.Event.\n * @final\n */\ngoog.History.Event = goog.history.Event;\n"],
"names":["goog","provide","require","History","goog.History","opt_invisible","opt_blankPageUrl","opt_input","opt_iframe","events","EventTarget","call","Error","input","inputId","historyCount_","inputHtml","html","SafeHtml","create","type","dom","InputType","TEXT","name","id","style","string","Const","from","safe","documentWrite","document","getElement","hiddenInput_","window_","getWindow","getOwnerDocument","window","iframeSrc_","userAgent","IE","location","protocol","TrustedResourceUrl","fromConstant","timer_","Timer","PollingType","NORMAL","registerDisposable","userVisible_","eventHandler_","EventHandler","LEGACY_IE","iframe","iframeId","iframeHtml","createIframe","sandbox","undefined","iframe_","unsetIframe_","listen","EventType","LOAD","onDocumentLoaded","documentLoaded","shouldEnable_","setHash_","getToken","setIframeToken_","value","inherits","prototype","enabled_","longerPolling_","lastToken_","isOnHashChangeSupported","memoize","isDocumentModeOrHigher","global","HASH_ALWAYS_REQUIRED","lockedToken_","disposeInternal","goog.History.prototype.disposeInternal","superClass_","dispose","setEnabled","goog.History.prototype.setEnabled","enable","OPERA","INPUT_EVENTS_","operaDefibrillator_","GECKO","onShow_","HASHCHANGE","onHashChange_","dispatchEvent","history","Event","labs","device","isMobile","TICK","bind","check_","start","removeAll","stop","goog.History.prototype.onDocumentLoaded","goog.History.prototype.onShow_","e","getBrowserEvent","goog.History.prototype.onHashChange_","hash","getLocationFragment_","update_","goog.History.prototype.getToken","getIframeToken_","setToken","goog.History.prototype.setToken","token","opt_title","setHistoryState_","replaceToken","goog.History.prototype.replaceToken","goog.History.prototype.getLocationFragment_","win","href","index","indexOf","substring","goog.History.prototype.setHistoryState_","replace","goog.History.prototype.setHash_","opt_replace","loc","url","split","hasHash","contains","safeUrl","uncheckedconversions","safeUrlFromStringKnownToSatisfyTypeContract","replaceLocation","setLocationHref","goog.History.prototype.setIframeToken_","urlEncode","doc","getFrameContentDocument","open","iframeSourceHtml","concat","title","close","asserts","assertInstanceof","unwrap","contentWindow","goog.History.prototype.getIframeToken_","body","urlDecode","innerHTML","setLongerPolling_","goog.History.prototype.check_","isNavigation","goog.History.prototype.update_","goog.History.prototype.setLongerPolling_","longerPolling","setInterval","LONG","goog.History.prototype.operaDefibrillator_","MOUSEDOWN","KEYDOWN","MOUSEMOVE"]
}
