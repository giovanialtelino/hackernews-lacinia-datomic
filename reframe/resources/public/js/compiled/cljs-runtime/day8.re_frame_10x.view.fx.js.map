{"version":3,"sources":["day8/re_frame_10x/view/fx.cljs"],"mappings":";;;;;;;;AAQA,AAAA,AAAKA;AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAWkBD,AAEAE,AAOCF,AASJG;AAYpB,AAAA,AAAMC,AAAeC,AAAMC;AAA3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGC,AAGEC,AAGgBH,AAChBI,AAAyBH,AAAMD;;AAGpC,AAAA,AAAMK;AAAN,AACE,AAAA,AAAAC,AAAMC,AAAa,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AAApB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGP,AAGKQ,AACOX,AAA0B,AAAA,AAAA,AAAA,AAACY,AAAOJ,AAClCR,AAAwB,AAAA,AAAA,AAAA,AAACY,AAAOJ,AAChCR,AAA6B,AAAA,AAAA,AAAA,AAACY,AAAOJ,AACrCK","names":["day8.re-frame-10x.view.fx/code-hover-background-color","day8.re-frame-10x.view.fx/fx-styles","day8.re-frame-10x.common-styles/white-background-color","day8.re-frame-10x.common-styles/blue-modern-color","day8.re-frame-10x.view.fx/event-section","title","data","day8.re-frame-10x.utils.re-com/v-box","day8.re-frame-10x.utils.re-com/h-box","day8.re-frame-10x.view.components/simple-render","day8.re-frame-10x.view.fx/render","cljs.core/deref","event-trace","G__52175","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/subscribe","day8.re-frame-10x.common-styles/gs-19s","cljs.core.get_in","day8.re-frame-10x.utils.re-com/gap-f"],"sourcesContent":["(ns day8.re-frame-10x.view.fx\n  (:require [day8.re-frame-10x.utils.re-com :as rc]\n            [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core :as rf]\n            [day8.re-frame-10x.common-styles :as common]\n            [day8.re-frame-10x.view.components :as components]\n            [zprint.core :as zp]\n            [clojure.string :as str]))\n\n(def code-hover-background-color \"rgba(100, 100, 255, 0.08)\")\n\n(def fx-styles\n  [:#--re-frame-10x--\n   [:.code-panel\n    #_{:padding-bottom common/gs-31}] ;; Leaving the empty def here for now\n   ;; We rely on highlight JS for our background now.\n   ;[:.code-listing\n   ; {:background-color common/white-background-color\n   ;  :padding          \"5px\"\n   ;  :margin-right     \"19px\"}]\n   [:.code-listing--highlighted\n    {:font-weight      \"bold\"\n     :background-color code-hover-background-color}]\n   [:.code-fragment\n    {:background-color common/white-background-color}\n    [:.code-fragment__content\n     {:height \"19px\"}]\n    [:.code-fragment__result\n     {:visibility \"hidden\"\n      :color \"#b4b4b4\"}] ;; Was common/medium-gray\n    [:&:hover\n     {:background-color code-hover-background-color}\n     [:.code-fragment__result\n      {:visibility \"visible\"}]]\n    [:.code-fragment__button\n     {:display      \"none\"\n      :padding-left \"6px\"\n      :margin-left  \"6px\"\n      :border-left  \"1px solid #cdd8df\"\n      :cursor       \"pointer\"\n      :color        common/blue-modern-color}]\n    [:&:hover\n     [:.code-fragment__button\n      {:display \"grid\"}]]]])\n\n\n;; Terminology:\n;; Form: a single Clojure form (may have nested children)\n;; Result: the result of execution of a single form\n;; Fragment: the combination of a form and result\n;; Listing: a block of traced Clojure code, e.g. an event handler function\n\n(defn event-section [title data]\n  [rc/v-box\n   :class \"event-section\"\n   :children\n   [[rc/h-box\n     :class \"event-section--header app-db-path--header\"\n     :align :center\n     :children [[:h2 title]]]\n    [components/simple-render data [title] \"event-section--data app-db-path--pod-border\"]]])\n\n\n(defn render []\n  (let [event-trace @(rf/subscribe [:epochs/current-event-trace])]\n    [rc/v-box\n     :class \"event-panel\"\n     :style {:width \"100%\"}\n     :gap common/gs-19s\n     :children [[event-section \"Coeffects\" (get-in event-trace [:tags :coeffects])]\n                [event-section \"Effects\" (get-in event-trace [:tags :effects])]\n                [event-section \"Interceptors\" (get-in event-trace [:tags :interceptors])]\n                [rc/gap-f :size \"0px\"]]]))\n"]}