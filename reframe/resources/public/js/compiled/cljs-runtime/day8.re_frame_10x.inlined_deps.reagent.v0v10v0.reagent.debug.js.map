{"version":3,"sources":["day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/debug.cljs"],"mappings":";;AAGA,AAAaA,AAAY,AAAAC;AAEzB,AAAA,AAAcC;AAEd,AAAA,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAS,AAAA,AAACC;;AAEnB,AAAA,AAAAT,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AACP,AAAA,AAAMC;AAAN,AACE,AAAM,AAAQA,AACR;AAAOC;AAAP,AACE,AAAA,AAAA,AAACC,AAAMN,AAASO,AAAkBC,AAAK,AAACC,AAAMC,AAAIL;;;AAD7CA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;;AAEb,AAAM,AAASD,AACT;AAAOC;AAAP,AACE,AAAA,AAAA,AAACC,AAAMN,AAASO,AAAmBC,AAAK,AAACC,AAAMC,AAAIL;;;AAD9CA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;;AAEbD;;;AAEJ,AAAA,AAAMO,AAAgBC;AAAtB,AACE,AAAA,AAAMrB;;AACN,AAAA,AAACsB,AAAOb;;AACR,AAACY,AAAAA,AAAAA;;AACD,AAAA,AAAAE,AAAMC,AAAOf;AAAb,AACE,AAAA,AAACa,AAAOb;;AACR,AAAA,AAAMT;;AACNwB","names":["day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.debug/has-console","js/console","day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.debug/tracking","js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.inlined-deps","js/day8.re-frame-10x.inlined-deps.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v0v10v0","js/day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.debug","js/day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.debug.warnings","day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.debug/warnings","cljs.core.atom","js/day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.debug.track-console","day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.debug/track-console","o","args","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/conj","cljs.core.apply","cljs.core/str","day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.debug/track-warnings","f","cljs.core/reset!","cljs.core/deref","warns"],"sourcesContent":["(ns day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.debug\n  (:require-macros [day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.debug]))\n\n(def ^:const has-console (exists? js/console))\n\n(def ^boolean tracking false)\n\n(defonce warnings (atom nil))\n\n(defonce track-console\n  (let [o #js{}]\n    (set! (.-warn o)\n          (fn [& args]\n            (swap! warnings update-in [:warn] conj (apply str args))))\n    (set! (.-error o)\n          (fn [& args]\n            (swap! warnings update-in [:error] conj (apply str args))))\n    o))\n\n(defn track-warnings [f]\n  (set! tracking true)\n  (reset! warnings nil)\n  (f)\n  (let [warns @warnings]\n    (reset! warnings nil)\n    (set! tracking false)\n    warns))\n"]}