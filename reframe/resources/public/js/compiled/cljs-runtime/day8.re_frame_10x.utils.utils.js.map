{"version":3,"sources":["day8/re_frame_10x/utils/utils.cljs"],"mappings":"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","names":["day8.re-frame-10x.utils.utils/diff-link","day8.re-frame-10x.utils.utils/last-in-vec","v","num","cljs.core/count","cljs.core.nth","day8.re-frame-10x.utils.utils/find-all-indexes-in-vec","pred","p1__47424#","p2__47423#","cljs.core.keep_indexed","day8.re-frame-10x.utils.utils/find-index-in-vec","cljs.core/first","day8.re-frame-10x.utils.utils/id-between-xf","beginning","ending","p1__47428#","cljs.core.filter","var_args","G__47430","day8.re-frame-10x.utils.utils/spy","js/Error","x","js/console.log","label","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.utils.utils/pluralize","p__47435","vec__47436","seq47432","G__47433","cljs.core/next","G__47434","self__4723__auto__","singular","plural","cljs.core._EQ_","or__4126__auto__","day8.re-frame-10x.utils.utils/pluralize-","p__47444","vec__47445","seq47441","G__47442","G__47443","day8.re-frame-10x.utils.utils/copy-to-clipboard","text","el","js/document","day8.re-frame-10x.utils.utils/default-readers","form","cljs.core/uuid"],"sourcesContent":["(ns day8.re-frame-10x.utils.utils)\n\n(def diff-link \"https://github.com/day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/Diffs.md\")\n\n(defn last-in-vec\n  \"Get the last element in the vector. Returns nil if v is empty\"\n  [v]\n  (let [num (count v)]\n    (if (zero? num)\n      nil\n      (nth v (dec num)))))\n\n(defn find-all-indexes-in-vec\n  \"Gets the index of all items in vec that match the predicate\"\n  [pred v]\n  (keep-indexed #(when (pred %2) %1) v))\n\n(defn find-index-in-vec\n  \"Gets the index of the first item in vec that matches the predicate\"\n  [pred v]\n  (first (find-all-indexes-in-vec pred v)))\n\n(defn id-between-xf\n  \"Returns a transducer that filters for :id between beginning and ending.\"\n  [beginning ending]\n  (filter #(<= beginning (:id %) ending)))\n\n(defn spy\n  ([x]\n   (js/console.log x)\n   x)\n  ([label x]\n   (js/console.log label x)\n   x))\n\n(defn pluralize\n  \"Return a pluralized phrase, appending an s to the singular form if no plural is provided.\n  For example:\n     (pluralize 5 \\\"month\\\") => \\\"5 months\\\"\n     (pluralize 1 \\\"month\\\") => \\\"1 month\\\"\n     (pluralize 1 \\\"radius\\\" \\\"radii\\\") => \\\"1 radius\\\"\n     (pluralize 9 \\\"radius\\\" \\\"radii\\\") => \\\"9 radii\\\"\n     From https://github.com/flatland/useful/blob/194950/src/flatland/useful/string.clj#L25-L33\"\n  [num singular & [plural]]\n  (str num \" \" (if (= 1 num) singular (or plural (str singular \"s\")))))\n\n(defn pluralize-\n  \"Same as pluralize, but doesn't prepend the number to the pluralized string.\"\n  [num singular & [plural]]\n  (if (= 1 num)\n    singular\n    (or plural (str singular \"s\"))))\n\n(defn copy-to-clipboard\n  [text]\n  (let [el (.createElement js/document \"textarea\")]\n    (set! (.-value el) text)\n    (set! (-> el .-style .-position) \"absolute\")\n    (set! (-> el .-style .-left) \"-9999px\")\n    (.appendChild (.-body js/document) el)\n    (.select el)\n    (.execCommand js/document \"copy\")\n    (.removeChild (.-body js/document) el)))\n\n(def default-readers\n  {'uuid (fn default-uuid-reader [form]\n           {:pre [(string? form)]}\n           (uuid form))})\n"]}