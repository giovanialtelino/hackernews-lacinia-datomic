{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$ada.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACnHD,MAAAC,QAAA,CAUAC,QAAQ,CAACC,IAAD,CAAO,CAsBPC,IAAAA,CAAWD,IAAAE,QAAA,CAAa,IAAb,CAAmB,GAAnB,CAKf,KAAIC,UAAY,CAIZC,MAAO,WAJK,CAIQC,IAAK,8BAJb,CAOZC,QAfYC,WAQA,CAQZC,SAAU,CACN,CAGIC,cAAe,yBAHnB,CAIIC,WAAY,CAAA,CAJhB,CADM,CAON,CAEIC,UAAW,SAFf,CAGIF,cAAe,sEAHnB,CAPM,CAYN,CACIE,UAAW,MADf,CAEIP,MAjCGQ,2BA+BP,CAGIF,WAAY,CAAA,CAHhB,CAIIG,UAAW,CAJf,CAZM,CARE,CA6BhB;MAAO,CACHC,iBAAkB,CAAA,CADf,CAEHC,SAAU,CACNC,QACI,2bAFE,CASNC,QACI,YAVE,CAFP;AAcHT,SAAU,CACNP,IADM,CAGN,CACIU,UAAW,QADf,CAEIP,MAAO,GAFX,CAEgBC,IAAK,GAFrB,CAGIG,SAAU,CAAC,CAACJ,MAAO,IAAR,CAAcS,UAAW,CAAzB,CAAD,CAHd,CAHM,CASN,CAEIF,UAAW,QAFf,CAGIP,MAAO,KAHX,CATM,CAcN,CAEIO,UAAW,QAFf,CAGIP,MA1EIc,6GAuER,CAIIL,UAAW,CAJf,CAdM,CAoBN,CAEIF,UAAW,QAFf,CAGIP,MAAO,4BAHX,CApBM,CAyBN,CAEIO,UAAW,OAFf,CAGIP,MAAO,6DAHX,CAG0EC,IAAK,QAH/E,CAIIU,SAAU,cAJd,CAKII,aAAc,CAAA,CALlB,CAMIC,WAAY,CAAA,CANhB,CAOId,QAnFIC,WA4ER,CAzBM;AAkCN,CAGIH,MAAO,wDAHX,CAGqEC,IAAK,qCAH1E,CAIIU,SAAU,sDAJd,CAOIM,YAAa,CAAA,CAPjB,CAQIb,SACA,CACIP,IADJ,CAEI,CAEIU,UAAW,OAFf,CAGIP,MAAO,2CAHX,CAIIC,IAAK,cAJT,CAKIc,aAAc,CAAA,CALlB,CAMIC,WAAY,CAAA,CANhB,CAOId,QAvGJC,WAgGA,CAFJ,CAaIJ,SAbJ,CAcI,CAEIQ,UAAW,MAFf,CAGIP,MAAO,eAHX,CAG4BC,IAAK,YAHjC,CAIIU,SAAU,QAJd,CAKII,aAAc,CAAA,CALlB,CAMIC,WAAY,CAAA,CANhB,CAQIV,WAAY,CAAA,CARhB,CASIJ,QArHJC,WA4GA,CAdJ,CATJ,CAlCM,CAuEN,CAGII,UAAW,MAHf;AAIIP,MAAO,mBAJX,CAIgCC,IAAK,MAJrC,CAKIU,SAAU,MALd,CAMII,aAAc,CAAA,CANlB,CAOIb,QAjIIC,WA0HR,CAvEM,CAkFNJ,SAlFM,CAdP,CAxDI,CAXoG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/ada.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$ada\"] = function(global,require,module,exports) {\nmodule.exports = // We try to support full Ada2012\n//\n// We highlight all appearances of types, keywords, literals (string, char, number, bool)\n// and titles (user defined function/procedure/package)\n// CSS classes are set accordingly\n//\n// Languages causing problems for language detection:\n// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\n// sql (ada default.txt has a lot of sql keywords)\n\nfunction(hljs) {\n    // Regular expression for Ada numeric literals.\n    // stolen form the VHDL highlighter\n\n    // Decimal literal:\n    var INTEGER_RE = '\\\\d(_|\\\\d)*';\n    var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;\n    var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';\n\n    // Based literal:\n    var BASED_INTEGER_RE = '\\\\w+';\n    var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';\n\n    var NUMBER_RE = '\\\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';\n\n    // Identifier regex\n    var ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';\n\n    // bad chars, only allowed in literals\n    var BAD_CHARS = '[]{}%#\\'\\\"'\n\n    // Ada doesn't have block comments, only line comments\n    var COMMENTS = hljs.COMMENT('--', '$');\n\n    // variable declarations of the form\n    // Foo : Bar := Baz;\n    // where only Bar will be highlighted\n    var VAR_DECLS = {\n        // TODO: These spaces are not required by the Ada syntax\n        // however, I have yet to see handwritten Ada code where\n        // someone does not put spaces around :\n        begin: '\\\\s+:\\\\s+', end: '\\\\s*(:=|;|\\\\)|=>|$)',\n        // endsWithParent: true,\n        // returnBegin: true,\n        illegal: BAD_CHARS,\n        contains: [\n            {\n                // workaround to avoid highlighting\n                // named loops and declare blocks\n                beginKeywords: 'loop for declare others',\n                endsParent: true,\n            },\n            {\n                // properly highlight all modifiers\n                className: 'keyword',\n                beginKeywords: 'not null constant access function procedure in out aliased exception'\n            },\n            {\n                className: 'type',\n                begin: ID_REGEX,\n                endsParent: true,\n                relevance: 0,\n            }\n        ]\n    };\n\n    return {\n        case_insensitive: true,\n        keywords: {\n            keyword:\n                'abort else new return abs elsif not reverse abstract end ' +\n                'accept entry select access exception of separate aliased exit or some ' +\n                'all others subtype and for out synchronized array function overriding ' +\n                'at tagged generic package task begin goto pragma terminate ' +\n                'body private then if procedure type case in protected constant interface ' +\n                'is raise use declare range delay limited record when delta loop rem while ' +\n                'digits renames with do mod requeue xor',\n            literal:\n                'True False',\n        },\n        contains: [\n            COMMENTS,\n            // strings \"foobar\"\n            {\n                className: 'string',\n                begin: /\"/, end: /\"/,\n                contains: [{begin: /\"\"/, relevance: 0}]\n            },\n            // characters ''\n            {\n                // character literals always contain one char\n                className: 'string',\n                begin: /'.'/\n            },\n            {\n                // number literals\n                className: 'number',\n                begin: NUMBER_RE,\n                relevance: 0\n            },\n            {\n                // Attributes\n                className: 'symbol',\n                begin: \"'\" + ID_REGEX,\n            },\n            {\n                // package definition, maybe inside generic\n                className: 'title',\n                begin: '(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?', end: '(is|$)',\n                keywords: 'package body',\n                excludeBegin: true,\n                excludeEnd: true,\n                illegal: BAD_CHARS\n            },\n            {\n                // function/procedure declaration/definition\n                // maybe inside generic\n                begin: '(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+', end: '(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',\n                keywords: 'overriding function procedure with is renames return',\n                // we need to re-match the 'function' keyword, so that\n                // the title mode below matches only exactly once\n                returnBegin: true,\n                contains:\n                [\n                    COMMENTS,\n                    {\n                        // name of the function/procedure\n                        className: 'title',\n                        begin: '(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',\n                        end: '(\\\\(|\\\\s+|$)',\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        illegal: BAD_CHARS\n                    },\n                    // 'self'\n                    // // parameter types\n                    VAR_DECLS,\n                    {\n                        // return type\n                        className: 'type',\n                        begin: '\\\\breturn\\\\s+', end: '(\\\\s+|;|$)',\n                        keywords: 'return',\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        // we are done with functions\n                        endsParent: true,\n                        illegal: BAD_CHARS\n\n                    },\n                ]\n            },\n            {\n                // new type declarations\n                // maybe inside generic\n                className: 'type',\n                begin: '\\\\b(sub)?type\\\\s+', end: '\\\\s+',\n                keywords: 'type',\n                excludeBegin: true,\n                illegal: BAD_CHARS\n            },\n\n            // see comment above the definition\n            VAR_DECLS,\n\n            // no markup\n            // relevance boosters for small snippets\n            // {begin: '\\\\s*=>\\\\s*'},\n            // {begin: '\\\\s*:=\\\\s*'},\n            // {begin: '\\\\s+:=\\\\s+'},\n        ]\n    };\n};\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","hljs","COMMENTS","COMMENT","VAR_DECLS","begin","end","illegal","BAD_CHARS","contains","beginKeywords","endsParent","className","ID_REGEX","relevance","case_insensitive","keywords","keyword","literal","NUMBER_RE","excludeBegin","excludeEnd","returnBegin"]
}
