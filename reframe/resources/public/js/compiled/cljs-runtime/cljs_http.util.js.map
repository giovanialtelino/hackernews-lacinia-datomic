{"version":3,"sources":["cljs_http/util.cljs"],"mappings":";;;;;;;AAOA;;;;AAAA,AAAMA,AAGHC;AAHH,AAIE,AAAIA;AACF,AAAAC,AACM,AAAI,AAACI,AAAKL,AACR,AAAA,AAAA,AAAA,AAACM,AAAIN,AACLA;AAHR,AAAAE,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAAgBG;AAAhB,AAIE,AAAA,AAAc,AAACG,AAAc,AAAA,AAAKJ,AAAaC;;AALnD;;;AAOF;;;AAAA,AAAAI,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAEWM;AAFX,AAAAF,AAAAJ,AAAA,AAEkBO;AAFlB,AAAAH,AAAAJ,AAAA,AAE8BQ;AAF9B,AAAAJ,AAAAJ,AAAA,AAE0CS;AAF1C,AAAAL,AAAAJ,AAAA,AAE8CU;AAF9C,AAGE,AAAK,AAAAC,AAAM,AAAAC;AAAN,AAAA,AAAAD,AACc,AAACE,AAAK,AAAAC,AAAIR;AAAJ,AAAA,AAAAQ;AAAAA;;AAAA;;;;AADpB,AAAAH,AAEcJ;;AAFd,AAAAI,AAGYH;;AAHZ,AAAAG,AAIYF;;AAJZ,AAAAE,AAAA,AAKaD;;AALbC;;;AAOP;;;AAAA,AAAMI,AAEHC;AAFH,AAGO,AAAA,AAACC,AAAM,AAAKD,AACZ,AAACnB,AAAIqB,AACL,AAAA,AAACC;;AAER;;;AAAA,AAAMC,AAEHC;AAFH,AAEM,AAACC,AAAQ,AAACC,AAAO,AAAC1B,AAAIkB,AAAS,AAACS,AAAKH,AAAI,AAACI,AAAKJ;;AAErD;;;AAAA,AAAMK;AAAN,AAEK,AAACC;;AAEN;;;AAAA,AAAMC;AAAN,AAEK,AAAA,AAACC,AAA8B,AAACH;;AAErC;;;AAAA,AAAMI,AAEHd,AAAEe,AAAKC;AAFV,AAGE,AAAMC,AAAI,AAACC,AAASH,AAAKC;AAAzB,AACE,AAACG,AAAOF,AAAIjB;;AAEhB;;;AAAA,AAAMoB,AAEHC,AAAEN,AAAKC;AAFV,AAGE,AAAMM,AAAK,AAACC,AAASR,AAAKC;AAA1B,AACE,AAACQ,AAAQF,AAAKD;;AAElB;;;AAAA,AAAMI,AAEHzB;AAFH,AAGE,AAAM0B,AAAE,AAAA,AAAA,AAAQ,AAACC,AAAsB3B,AAAG,AAAC4B,AAAc5B;AAAzD,AACE,AAAM,AAAA,AAAA,AAAO0B;AAAb,AACE,AAAA,AAAA,AAACG,AAAQH;;AADX;;;AAGJ;;;AAAA,AAAMI,AAEHT;AAFH,AAEM,AAACU,AAAkB,AAACzB,AAAQe;;AAElC,AAAA,AAAMW,AAAeC;AAArB,AACE,AAAA,AAAAC,AAAAC,AAACC;AAAD,AACE,AAAAC,AAAY,AAAAF,AAAA,AAAClC;AAAb,AAAAxB,AAAA4D,AAAA,AAAA,AAAOC;AAAP,AAAA7D,AAAA4D,AAAA,AAAA,AAASX;AAAT,AACE,AAAI,AAAI,AAACC,AAAOW,AAAG,AAACX,AAAOD;AAA3BQ;;AACK,AAAAA,AAACK,AAAS,AAACC,AAAWF,AAAGZ;;AAHlC,AAII,AAACzB,AAAM,AAAAH,AAAImC;AAAJ,AAAA,AAAAnC;AAAAA;;AAAA;;AAAP","names":["cljs-http.util/basic-auth","credentials","vec__62619","cljs.core.nth","username","password","cljs.core/map?","cljs.core.map","no.en.core/base64-encode","p__62622","map__62623","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","cljs-http.util/build-url","scheme","server-name","server-port","uri","query-string","G__62626","js/goog.Uri","cljs.core/name","or__4126__auto__","cljs-http.util/camelize","s","clojure.string.split","clojure.string/capitalize","clojure.string.join","cljs-http.util/build-headers","m","cljs.core/clj->js","cljs.core/zipmap","cljs.core/keys","cljs.core/vals","cljs-http.util/user-agent","goog.userAgent/getUserAgentString","cljs-http.util/android?","cljs.core/re-matches","cljs-http.util/transit-decode","type","opts","rdr","cognitect.transit.reader","cognitect.transit/read","cljs-http.util/transit-encode","x","wrtr","cognitect.transit.writer","cognitect.transit/write","cljs-http.util/json-decode","v","clojure.string/blank?","js/JSON.parse","cljs.core.js__GT_clj","cljs-http.util/json-encode","js/JSON.stringify","cljs-http.util/parse-headers","headers","p1__62640#","p2__62639#","cljs.core.reduce","vec__62641","k","cljs.core.assoc","clojure.string/lower-case"],"sourcesContent":["(ns cljs-http.util\n  (:import goog.Uri)\n  (:require [clojure.string :refer [blank? capitalize join split lower-case]]\n            [cognitect.transit :as t]\n            [goog.userAgent :as agent]\n            [no.en.core :refer [base64-encode]]))\n\n(defn basic-auth\n  \"Returns the value of the HTTP basic authentication header for\n  `credentials`.\"\n  [credentials]\n  (if credentials\n    (let [[username password]\n          (if (map? credentials)\n            (map credentials [:username :password])\n            credentials)]\n      (str \"Basic \" (base64-encode (str username \":\" password))))))\n\n(defn build-url\n  \"Build the url from the request map.\"\n  [{:keys [scheme server-name server-port uri query-string]}]\n  (str (doto (Uri.)\n         (.setScheme (name (or scheme :http)))\n         (.setDomain server-name)\n         (.setPort server-port)\n         (.setPath uri)\n         (.setQuery query-string true))))\n\n(defn camelize\n  \"Returns dash separated string `s` in camel case.\"\n  [s]\n  (->> (split (str s) #\"-\")\n       (map capitalize)\n       (join \"-\")))\n\n(defn build-headers\n  \"Build the headers from the map.\"\n  [m] (clj->js (zipmap (map camelize (keys m)) (vals m))))\n\n(defn user-agent\n  \"Returns the user agent.\"\n  [] (agent/getUserAgentString))\n\n(defn android?\n  \"Returns true if the user agent is an Android client.\"\n  [] (re-matches #\"(?i).*android.*\" (user-agent)))\n\n(defn transit-decode\n  \"Transit decode an object from `s`.\"\n  [s type opts]\n  (let [rdr (t/reader type opts)]\n    (t/read rdr s)))\n\n(defn transit-encode\n  \"Transit encode `x` into a String.\"\n  [x type opts]\n  (let [wrtr (t/writer type opts)]\n    (t/write wrtr x)))\n\n(defn json-decode\n  \"JSON decode an object from `s`.\"\n  [s]\n  (let [v (if-not (clojure.string/blank? s) (js/JSON.parse s))]\n    (when (some? v)\n      (js->clj v :keywordize-keys true))))\n\n(defn json-encode\n  \"JSON encode `x` into a String.\"\n  [x] (js/JSON.stringify (clj->js x)))\n\n(defn parse-headers [headers]\n  (reduce\n   #(let [[k v] (split %2 #\":\\s+\")]\n      (if (or (blank? k) (blank? v))\n        %1 (assoc %1 (lower-case k) v)))\n   {} (split (or headers \"\") #\"(\\n)|(\\r)|(\\r\\n)|(\\n\\r)\")))\n"]}