{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$llvm.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,wDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACpHD,MAAAC,QAAA,CAAiBC,QAAQ,CAACC,IAAD,CAAO,CAE9B,MAAO,CAELC,SACE,wsDAHG;AAwCLC,SAAU,CACR,CACEC,UAAW,SADb,CAEEC,MAAO,OAFT,CADQ,CAKRJ,IAAAK,QAAA,CACE,GADF,CACO,KADP,CACc,CAACC,UAAW,CAAZ,CADd,CALQ,CASRN,IAAAO,kBATQ,CAUR,CACEJ,UAAW,QADb,CAEEK,SAAU,CAER,CAAEJ,MAAO,GAAT,CAAcK,IAAK,UAAnB,CAFQ,CAFZ,CAMEH,UAAW,CANb,CAVQ,CAkBR,CACEH,UAAW,OADb,CAEEK,SAAU,CACR,CAAEJ,MAAO,4BAAT,CADQ,CAER,CAAEA,MAAO,OAAT,CAFQ,CAGR,CAAEA,MAAO,4BAAT,CAHQ,CAIR,CAAEA,MAAO,gCAAT,CAJQ,CAFZ,CAlBQ,CA2BR,CACED,UAAW,QADb,CAEEK,SAAU,CACR,CAAEJ,MAAO,4BAAT,CADQ,CAER,CAAEA,MAAO,OAAT,CAFQ,CAGR,CAAEA,MAAO,OAAT,CAHQ,CAFZ,CA3BQ,CAmCR,CACED,UAAW,QADb,CAEEK,SAAU,CACN,CAAEJ,MAAO,mBAAT,CADM,CAEN,CAAEA,MAAO,kDAAT,CAFM,CAFZ;AAMEE,UAAW,CANb,CAnCQ,CAxCL,CAFuB,CADoF;",
"sources":["node_modules/highlight_DOT_js/lib/languages/llvm.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$llvm\"] = function(global,require,module,exports) {\nmodule.exports = function(hljs) {\n  var identifier = '([-a-zA-Z$._][\\\\w\\\\-$.]*)';\n  return {\n    //lexemes: '[.%]?' + hljs.IDENT_RE,\n    keywords:\n      'begin end true false declare define global ' +\n      'constant private linker_private internal ' +\n      'available_externally linkonce linkonce_odr weak ' +\n      'weak_odr appending dllimport dllexport common ' +\n      'default hidden protected extern_weak external ' +\n      'thread_local zeroinitializer undef null to tail ' +\n      'target triple datalayout volatile nuw nsw nnan ' +\n      'ninf nsz arcp fast exact inbounds align ' +\n      'addrspace section alias module asm sideeffect ' +\n      'gc dbg linker_private_weak attributes blockaddress ' +\n      'initialexec localdynamic localexec prefix unnamed_addr ' +\n      'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc ' +\n      'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ' +\n      'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func ' +\n      'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc ' +\n      'cc c signext zeroext inreg sret nounwind ' +\n      'noreturn noalias nocapture byval nest readnone ' +\n      'readonly inlinehint noinline alwaysinline optsize ssp ' +\n      'sspreq noredzone noimplicitfloat naked builtin cold ' +\n      'nobuiltin noduplicate nonlazybind optnone returns_twice ' +\n      'sanitize_address sanitize_memory sanitize_thread sspstrong ' +\n      'uwtable returned type opaque eq ne slt sgt ' +\n      'sle sge ult ugt ule uge oeq one olt ogt ' +\n      'ole oge ord uno ueq une x acq_rel acquire ' +\n      'alignstack atomic catch cleanup filter inteldialect ' +\n      'max min monotonic nand personality release seq_cst ' +\n      'singlethread umax umin unordered xchg add fadd ' +\n      'sub fsub mul fmul udiv sdiv fdiv urem srem ' +\n      'frem shl lshr ashr and or xor icmp fcmp ' +\n      'phi call trunc zext sext fptrunc fpext uitofp ' +\n      'sitofp fptoui fptosi inttoptr ptrtoint bitcast ' +\n      'addrspacecast select va_arg ret br switch invoke ' +\n      'unwind unreachable indirectbr landingpad resume ' +\n      'malloc alloca free load store getelementptr ' +\n      'extractelement insertelement shufflevector getresult ' +\n      'extractvalue insertvalue atomicrmw cmpxchg fence ' +\n      'argmemonly double',\n    contains: [\n      {\n        className: 'keyword',\n        begin: 'i\\\\d+'\n      },\n      hljs.COMMENT(\n        ';', '\\\\n', {relevance: 0}\n      ),\n      // Double quote string\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'string',\n        variants: [\n          // Double-quoted string\n          { begin: '\"', end: '[^\\\\\\\\]\"' },\n        ],\n        relevance: 0\n      },\n      {\n        className: 'title',\n        variants: [\n          { begin: '@' + identifier },\n          { begin: '@\\\\d+' },\n          { begin: '!' + identifier },\n          { begin: '!\\\\d+' + identifier }\n        ]\n      },\n      {\n        className: 'symbol',\n        variants: [\n          { begin: '%' + identifier },\n          { begin: '%\\\\d+' },\n          { begin: '#\\\\d+' },\n        ]\n      },\n      {\n        className: 'number',\n        variants: [\n            { begin: '0[xX][a-fA-F0-9]+' },\n            { begin: '-?\\\\d+(?:[.]\\\\d+)?(?:[eE][-+]?\\\\d+(?:[.]\\\\d+)?)?' }\n        ],\n        relevance: 0\n      },\n    ]\n  };\n};\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","hljs","keywords","contains","className","begin","COMMENT","relevance","QUOTE_STRING_MODE","variants","end"]
}
