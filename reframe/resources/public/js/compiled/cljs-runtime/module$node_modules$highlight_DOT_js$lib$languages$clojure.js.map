{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$clojure.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,2DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACvHD,MAAAC,QAAA,CAAiBC,QAAQ,CAACC,IAAD,CAAO,CAyC9B,IAAIC,OAAS,CACXC,UAAW,QADA,CACUC,MAPAC,qBAMV,CAEXC,UAAW,CAFA,CAAb,CAIIC,OAASN,IAAAO,QAAA,CAAaP,IAAAQ,kBAAb,CAAqC,CAACC,QAAS,IAAV,CAArC,CAJb,CAKIC,QAAUV,IAAAU,QAAA,CACZ,GADY,CAEZ,GAFY,CAGZ,CACEL,UAAW,CADb,CAHY,CALd,CAYIM,QAAU,CACZT,UAAW,SADC,CAEZC,MAAO,sBAFK,CAZd,CAgBIS,WAAa,CACfT,MAAO,UADQ,CACIU,IAAK,UADT,CAhBjB,CAmBIC,KAAO,CACTZ,UAAW,SADF,CAETC,MAAO,kFAFE,CAnBX;AAuBIY,SAAWf,IAAAU,QAAA,CAAa,QAAb,CAAuB,KAAvB,CAvBf,CAwBIM,IAAM,CACRd,UAAW,QADH,CAERC,MAAO,uFAFC,CAxBV,CA4BIc,KAAO,CACTd,MAAO,KADE,CACKU,IAAK,KADV,CA5BX,CA+BIK,KAAO,CACTC,eAAgB,CAAA,CADP,CAETd,UAAW,CAFF,CA/BX,CAmCIe,KAAO,CACTC,SA5EaA,CACb,eAEE,wlFAHWA,CA2EJ;AAETC,QA5CcC,+EA0CL,CAGTrB,UAAW,MAHF,CAGUC,MA7CLoB,+EA0CL,CAITC,OAAQN,IAJC,CAnCX,CAyCIO,iBAAmB,CAACR,IAAD,CAAOX,MAAP,CAAeQ,IAAf,CAAqBC,QAArB,CAA+BL,OAA/B,CAAwCM,GAAxC,CAA6CJ,UAA7C,CAAyDX,MAAzD,CAAiEU,OAAjE,CA7CVe,CACXvB,MAJcoB,+EAGHG,CAEXrB,UAAW,CAFAqB,CA6CU,CAEvBT,KAAAU,SAAA,CAAgB,CAAC3B,IAAAU,QAAA,CAAa,SAAb,CAAwB,EAAxB,CAAD,CAA8BU,IAA9B,CAAoCF,IAApC,CAChBA,KAAAS,SAAA,CAAgBF,gBAChBb,WAAAe,SAAA,CAAsBF,gBACtBV;QAAAY,SAAA,CAAoB,CAACf,UAAD,CAEpB,OAAO,CACLgB,QAAS,CAAC,KAAD,CADJ,CAELnB,QAAS,IAFJ,CAGLkB,SAAU,CAACV,IAAD,CAAOX,MAAP,CAAeQ,IAAf,CAAqBC,QAArB,CAA+BL,OAA/B,CAAwCM,GAAxC,CAA6CJ,UAA7C,CAAyDX,MAAzD,CAAiEU,OAAjE,CAHL,CAzFuB,CADuF;",
"sources":["node_modules/highlight_DOT_js/lib/languages/clojure.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$clojure\"] = function(global,require,module,exports) {\nmodule.exports = function(hljs) {\n  var keywords = {\n    'builtin-name':\n      // Clojure keywords\n      'def defonce cond apply if-not if-let if not not= = < > <= >= == + / * - rem '+\n      'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? '+\n      'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? '+\n      'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? '+\n      'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . '+\n      'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last '+\n      'drop-while while intern condp case reduced cycle split-at split-with repeat replicate '+\n      'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext '+\n      'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends '+\n      'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler '+\n      'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter '+\n      'monitor-exit defmacro defn defn- macroexpand macroexpand-1 for dosync and or '+\n      'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert '+\n      'peek pop doto proxy defstruct first rest cons defprotocol cast coll deftype defrecord last butlast '+\n      'sigs reify second ffirst fnext nfirst nnext defmulti defmethod meta with-meta ns in-ns create-ns import '+\n      'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! '+\n      'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger '+\n      'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline '+\n      'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking '+\n      'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! '+\n      'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! '+\n      'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty '+\n      'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list '+\n      'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer '+\n      'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate '+\n      'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta '+\n      'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\n   };\n\n  var SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  var SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n\n  var SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  var NUMBER = {\n    className: 'number', begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});\n  var COMMENT = hljs.COMMENT(\n    ';',\n    '$',\n    {\n      relevance: 0\n    }\n  );\n  var LITERAL = {\n    className: 'literal',\n    begin: /\\b(true|false|nil)\\b/\n  };\n  var COLLECTION = {\n    begin: '[\\\\[\\\\{]', end: '[\\\\]\\\\}]'\n  };\n  var HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  var HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  var KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  var LIST = {\n    begin: '\\\\(', end: '\\\\)'\n  };\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  var NAME = {\n    keywords: keywords,\n    lexemes: SYMBOL_RE,\n    className: 'name', begin: SYMBOL_RE,\n    starts: BODY\n  };\n  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\n\n  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n  HINT_COL.contains = [COLLECTION];\n\n  return {\n    aliases: ['clj'],\n    illegal: /\\S/,\n    contains: [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\n  }\n};\n};"],
"names":["shadow$provide","global","require","module","exports","module.exports","hljs","NUMBER","className","begin","SIMPLE_NUMBER_RE","relevance","STRING","inherit","QUOTE_STRING_MODE","illegal","COMMENT","LITERAL","COLLECTION","end","HINT","HINT_COL","KEY","LIST","BODY","endsWithParent","NAME","keywords","lexemes","SYMBOL_RE","starts","DEFAULT_CONTAINS","SYMBOL","contains","aliases"]
}
