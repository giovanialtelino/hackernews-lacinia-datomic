{"version":3,"sources":["day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/registrar.cljc"],"mappings":";;;;AASA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAKL,AAAKC,AAAmB,AAAA,AAACC;AAGzB,AAAA,AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAEFE;AAFJ,AAGG,AAAA,AAAAC,AAACC,AAAKR,AAAkBM;;;AAH3B,AAAA,AAAA,AAAMF,AAKFE,AAAKG;AALT,AAMO,AAAA,AAAAF,AAACC,AAAKR,AAAkBM,AACxB,AAACE,AAAIC;;;AAPZ,AAAA,AAAA,AAAML,AASFE,AAAKG,AAAGC;AATZ,AAUG,AAAMC,AAAQ,AAACC,AAAYN,AAAKG;AAAhC,AACE,AAAMI;AAAN,AACE,AAAM,AAAAC,AAAKJ;AAAL,AAAA,AAAAI;AAAe,AAAA,AAAMH;;AAArBG;;;AAAN,AACE,AAAA,AAAA,AAAA,AAACC,AAA8B,AAAKT,AAAgCG;;AADtE;;AADF;;AAGAE;;;AAdL,AAAA,AAAA,AAAMP;;AAAN,AAiBA,AAAA,AAAMY,AACHV,AAAKG,AAAGQ;AADX,AAEE,AAAMJ;AAAN,AACE,AAAM,AAAA,AAACD,AAAYN,AAAKG;AAAxB,AACE,AAAA,AAAA,AAAA,AAACM,AAAsC,AAAKT,AAAqBG;;AADnE;;AADF;;AAGA,AAAA,AAACS,AAAMlB,AAAkBmB,AAAUb,AAAKG,AAAIQ;;AAC5CA;;AAGF,AAAA,AAAA,AAAAf,AAAMmB;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAhB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMgB;AAAN,AAEG,AAAA,AAACC,AAAOtB;;;AAFX,AAAA,AAAA,AAAMqB,AAIFf;AAJJ,AAKG,AAAQ,AAACP,AAAAA,AAAAA,AAAMO,AAAAA;AAAf;AAAA,AAAA,AAAA,AAAAD,AAAA;;;AACA,AAACa,AAAMlB,AAAkBuB,AAAOjB;;;AANnC,AAAA,AAAA,AAAMe,AAQFf,AAAKG;AART,AASG,AAAQ,AAACV,AAAAA,AAAAA,AAAMO,AAAAA;AAAf;AAAA,AAAA,AAAA,AAAAD,AAAA;;;AACA,AAAI,AAACO,AAAYN,AAAKG;AACpB,AAAA,AAACS,AAAMlB,AAAkBwB,AAAWlB,AAAMiB,AAAOd;;AACjD,AAAA,AAAA,AAAA,AAACM,AAAsC,AAAKT,AAAoB,AAAA,AAAKG;;;;AAZ1E,AAAA,AAAA,AAAMY;;AAAN","names":["day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/kinds","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/kind->id->handler","cljs.core.atom","var_args","G__47781","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/get-handler","js/Error","kind","cljs.core/deref","cljs.core.get","id","required?","handler","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/debug-enabled?","and__4115__auto__","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/register-handler","handler-fn","cljs.core.swap_BANG_","cljs.core/assoc-in","G__47790","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/clear-handlers","cljs.core/reset!","cljs.core/dissoc","cljs.core/update-in"],"sourcesContent":["(ns day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar\n  \"In many places, re-frame asks you to associate an `id` (keyword)\n  with a `handler` (function).  This namespace contains the\n  central registry of such associations.\"\n  (:require  [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop :refer [debug-enabled?]]\n             [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers :refer [console]]))\n\n\n;; kinds of handlers\n(def kinds #{:event :fx :cofx :sub})\n\n;; This atom contains a register of all handlers.\n;; Contains a two layer map, keyed first by `kind` (of handler), and then `id` of handler.\n;; Leaf nodes are handlers.\n(def kind->id->handler  (atom {}))\n\n\n(defn get-handler\n\n  ([kind]\n   (get @kind->id->handler kind))\n\n  ([kind id]\n   (-> (get @kind->id->handler kind)\n       (get id)))\n\n  ([kind id required?]\n   (let [handler (get-handler kind id)]\n     (when debug-enabled?                          ;; This is in a separate `when` so Closure DCE can run ...\n       (when (and required? (nil? handler))        ;; ...otherwise you'd need to type-hint the `and` with a ^boolean for DCE.\n         (console :error \"re-frame: no\" (str kind) \"handler registered for:\" id)))\n     handler)))\n\n\n(defn register-handler\n  [kind id handler-fn]\n  (when debug-enabled?                                       ;; This is in a separate when so Closure DCE can run\n    (when (get-handler kind id false)\n      (console :warn \"re-frame: overwriting\" (str kind) \"handler for:\" id)))   ;; allow it, but warn. Happens on figwheel reloads.\n  (swap! kind->id->handler assoc-in [kind id] handler-fn)\n  handler-fn)    ;; note: returns the just registered handler\n\n\n(defn clear-handlers\n  ([]            ;; clear all kinds\n   (reset! kind->id->handler {}))\n\n  ([kind]        ;; clear all handlers for this kind\n   (assert (kinds kind))\n   (swap! kind->id->handler dissoc kind))\n\n  ([kind id]     ;; clear a single handler for a kind\n   (assert (kinds kind))\n   (if (get-handler kind id)\n     (swap! kind->id->handler update-in [kind] dissoc id)\n     (console :warn \"re-frame: can't clear\" (str kind) \"handler for\" (str id \". Handler not found.\")))))\n"]}