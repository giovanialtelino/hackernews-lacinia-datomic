{"version":3,"sources":["day8/re_frame_10x.cljs"],"mappings":"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","names":["js/goog.define","day8.re-frame-10x/debug?","day8.re-frame-10x/operation-name","cljs.core/memoize","c","cljs.core/last","clojure.string.split","reagent.impl.component/component-name","day8.re-frame-10x/static-fns","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__54861","re-frame.trace/*current-trace*","*current-trace*-temp-val__54862","re-frame.trace/start-trace","end__53009__auto__","re-frame.interop/now","duration__53010__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","temp__5733__auto__","component-name","reagent.impl.util/*non-reactive*","reagent.impl.component/do-render","rat","goog.object/get","_","reagent.impl.batching/mark-rendered","res","reagent.ratom/run-in-reaction","reagent.impl.batching/queue-render","reagent.impl.component/rat-opts","cljs-ratom","new-trace__53011__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.interop/reagent-id","cljs.core.map","js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.real-custom-wrapper","day8.re-frame-10x/real-custom-wrapper","reagent.impl.component/custom-wrapper","js/day8.re-frame-10x.real-next-tick","day8.re-frame-10x/real-next-tick","reagent.impl.batching/next-tick","js/day8.re-frame-10x.real-schedule","day8.re-frame-10x/real-schedule","reagent.impl.batching/schedule","js/day8.re-frame-10x.do-after-render-trace-scheduled?","day8.re-frame-10x/do-after-render-trace-scheduled?","cljs.core.atom","day8.re-frame-10x/monkey-patch-reagent","reagent.impl.component/static-fns","key","f","G__54890","cljs.core/Keyword","*current-trace*-orig-val__54891","*current-trace*-temp-val__54892","G__54893","*current-trace*-orig-val__54894","*current-trace*-temp-val__54895","*current-trace*-orig-val__54901","*current-trace*-temp-val__54902","*current-trace*-orig-val__54905","*current-trace*-temp-val__54906","reagent.impl.batching/render-queue","*current-trace*-orig-val__54903","*current-trace*-temp-val__54904","*current-trace*-orig-val__54910","*current-trace*-temp-val__54911","day8.re-frame-10x/init-tracing!","day8.re-frame-10x/resizer-style","draggable-area","day8.re-frame-10x/ease-transition","day8.re-frame-10x/devtools-outer","opts","position","day8.re_frame_10x.inlined_deps.reagent.v0v10v0.reagent.core.atom","panel-width%","G__54912","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/subscribe","showing?","G__54913","dragging?","pin-to-bottom?","selected-tab","G__54914","window-width","js/window.innerWidth","handle-window-resize","G__54915","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/dispatch","e","window-width-val","G__54917","cljs.core/reset!","handle-keys","tag-name","entering-input?","cljs.core/contains?","cljs.core._EQ_","G__54918","handle-mousemove","cljs.core/deref","x","y","new-window-width","width%","G__54920","handle-mouse-up","day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.core/create-class","js/window.addEventListener","js/window.removeEventListener","left","transition","day8.re-frame-10x.utils.re-com/box","day8.re-frame-10x.utils.re-com/h-box","day8.re-frame-10x.view.container/devtools-inner","day8.re-frame-10x/panel-div","id","panel","js/document","new-panel","js/window.focus","day8.re-frame-10x/inject-devtools!","day8.re-frame-10x.styles/inject-trace-styles","day8.re_frame_10x.inlined_deps.reagent.v0v10v0.reagent.dom.render","day8.re-frame-10x/traced-result","trace-id","fragment-id","trace","cljs.core/first","p1__54922#","cljs.core.filter","cljs.core.get_in","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.db/app-db","day8.re-frame-10x/init-db!","day8.re-frame-10x.db/init-db","day8.re-frame-10x/factory-reset!","G__54927","day8.re-frame-10x/show-panel!","show-panel?","G__54928"],"sourcesContent":["(ns day8.re-frame-10x\n  (:require [day8.re-frame-10x.utils.re-com :as rc]\n            [day8.re-frame-10x.styles :as styles]\n            [day8.re-frame-10x.view.container :as container]\n            [day8.re-frame-10x.subs]\n            [day8.re-frame-10x.events]\n            [day8.re-frame-10x.db :as trace.db]\n            [re-frame.trace :as trace :include-macros true]\n            [clojure.string :as str]\n            [reagent.impl.util :as util]\n            [reagent.impl.component :as component]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [goog.object :as gob]\n            [re-frame.interop :as interop]\n            [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core :as rf]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.core :as r]\n            [day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.dom :as rdom]))\n\n(goog-define debug? false)\n\n(def operation-name (memoize (fn [c] (last (str/split (component/component-name c) #\" > \")))))\n\n(def static-fns\n  {:render\n   (fn mp-render []                                         ;; Monkeypatched render\n     (this-as c\n       (trace/with-trace {:op-type   :render\n                          :tags      (if-let [component-name (component/component-name c)]\n                                       {:component-name component-name}\n                                       {})\n                          :operation (operation-name c)}\n                         (if util/*non-reactive*\n                           (reagent.impl.component/do-render c)\n                           (let [rat        (gob/get c \"cljsRatom\")\n                                 _          (batch/mark-rendered c)\n                                 res        (if (nil? rat)\n                                              (ratom/run-in-reaction #(reagent.impl.component/do-render c) c \"cljsRatom\"\n                                                                     batch/queue-render reagent.impl.component/rat-opts)\n                                              (._run rat false))\n                                 cljs-ratom (gob/get c \"cljsRatom\")] ;; actually a reaction\n                             (trace/merge-trace!\n                               {:tags {:reaction      (interop/reagent-id cljs-ratom)\n                                       :input-signals (when cljs-ratom\n                                                        (map interop/reagent-id (gob/get cljs-ratom \"watching\" :none)))}})\n                             res)))))})\n\n\n(defonce real-custom-wrapper reagent.impl.component/custom-wrapper)\n(defonce real-next-tick reagent.impl.batching/next-tick)\n(defonce real-schedule reagent.impl.batching/schedule)\n(defonce do-after-render-trace-scheduled? (atom false))\n\n(defn monkey-patch-reagent []\n  (let [#_#_real-renderer reagent.impl.component/do-render]\n\n\n\n    #_(set! reagent.impl.component/do-render\n            (fn [c]\n              (let [name (comp-name c)]\n                (js/console.log c)\n                (trace/with-trace {:op-type   :render\n                                   :tags      {:component-path (component-path c)}\n                                   :operation (last (str/split name #\" > \"))}\n                                  (real-renderer c)))))\n\n    (set! reagent.impl.component/static-fns static-fns)\n\n    (set! reagent.impl.component/custom-wrapper\n          (fn [key f]\n            (case key\n              :componentWillUnmount\n              (fn [] (this-as c\n                       (trace/with-trace {:op-type   key\n                                          :operation (last (str/split (component/component-name c) #\" > \"))\n                                          :tags      {:component-name (component/component-name c)\n                                                      :reaction       (interop/reagent-id (gob/get c \"cljsRatom\"))}})\n                       (.call (real-custom-wrapper key f) c c)))\n\n              (real-custom-wrapper key f))))\n\n    (set! reagent.impl.batching/next-tick\n          (fn [f]\n            ;; Schedule a trace to be emitted after a render if there is nothing else scheduled after that render.\n            ;; This signals the end of the epoch.\n\n            #_(swap! do-after-render-trace-scheduled?\n                     (fn [scheduled?]\n                       (js/console.log \"Setting up scheduled after\" scheduled?)\n                       (if scheduled?\n                         scheduled?\n                         (do (reagent.impl.batching/do-after-render ;; a do-after-flush would probably be a better spot to put this if it existed.\n                               (fn []\n                                 (js/console.log \"Do after render\" reagent.impl.batching/render-queue)\n                                 (reset! do-after-render-trace-scheduled? false)\n                                 (when (false? (.-scheduled? reagent.impl.batching/render-queue))\n                                   (trace/with-trace {:op-type :reagent/quiescent}))))\n                             true))))\n            (real-next-tick (fn []\n                              (trace/with-trace {:op-type :raf}\n                                                (f)\n                                                (trace/with-trace {:op-type :raf-end})\n                                                (when (false? (.-scheduled? reagent.impl.batching/render-queue))\n                                                  (trace/with-trace {:op-type :reagent/quiescent})))))))\n\n\n\n    #_(set! reagent.impl.batching/schedule\n            (fn []\n              (reagent.impl.batching/do-after-render\n                (fn []\n                  (when @do-after-render-trace-scheduled?\n                    (trace/with-trace {:op-type :do-after-render})\n                    (reset! do-after-render-trace-scheduled? false))))\n              (real-schedule)))))\n\n\n(defn init-tracing!\n  \"Sets up any initial state that needs to be there for tracing. Does not enable tracing.\"\n  []\n  (monkey-patch-reagent))\n\n\n(defn resizer-style [draggable-area]\n  {:position \"absolute\" :z-index 2 :opacity 0\n   :left     (str (- (/ draggable-area 2)) \"px\") :width \"10px\" :height \"100%\" :top \"0px\" :cursor \"col-resize\"})\n\n(def ease-transition \"left 0.2s ease-out, top 0.2s ease-out, width 0.2s ease-out, height 0.2s ease-out\")\n\n(defn devtools-outer [opts]\n  ;; Add clear button\n  ;; Filter out different trace types\n  (let [position             (r/atom :right)\n        panel-width%         (rf/subscribe [:settings/panel-width%])\n        showing?             (rf/subscribe [:settings/show-panel?])\n        dragging?            (r/atom false)\n        pin-to-bottom?       (r/atom true)\n        selected-tab         (rf/subscribe [:settings/selected-tab])\n        window-width         (r/atom js/window.innerWidth)\n        handle-window-resize (do (rf/dispatch [:settings/window-width js/window.innerWidth]) ;; Set initial\n                                 (fn [e]\n                                   ;; N.B. I don't think this should be a perf bottleneck.\n                                   (let [window-width-val js/window.innerWidth]\n                                     (rf/dispatch [:settings/window-width window-width-val])\n                                     (reset! window-width window-width-val))))\n        handle-keys          (fn [e]\n                               (let [tag-name        (.-tagName (.-target e))\n                                     entering-input? (contains? #{\"INPUT\" \"SELECT\" \"TEXTAREA\"} tag-name)]\n                                 (when (and (not entering-input?)\n                                            (= (.-key e) \"h\")\n                                            (.-ctrlKey e))\n                                   (rf/dispatch [:settings/user-toggle-panel])\n                                   (.preventDefault e))))\n        handle-mousemove     (fn [e]\n                               (when @dragging?\n                                 (let [x                (.-clientX e)\n                                       y                (.-clientY e)\n                                       new-window-width js/window.innerWidth]\n                                   (.preventDefault e)\n                                   (let [width% (/ (- new-window-width x) new-window-width)]\n                                     (when (<= width% 0.9)\n                                       (rf/dispatch [:settings/panel-width% width%])))\n                                   (reset! window-width new-window-width))))\n        handle-mouse-up      (fn [e] (reset! dragging? false))]\n    (r/create-class\n      {:component-did-mount    (fn []\n                                 (js/window.addEventListener \"keydown\" handle-keys)\n                                 (js/window.addEventListener \"mousemove\" handle-mousemove)\n                                 (js/window.addEventListener \"mouseup\" handle-mouse-up)\n                                 (js/window.addEventListener \"resize\" handle-window-resize))\n       :component-will-unmount (fn []\n                                 (js/window.removeEventListener \"keydown\" handle-keys)\n                                 (js/window.removeEventListener \"mousemove\" handle-mousemove)\n                                 (js/window.removeEventListener \"mouseup\" handle-mouse-up)\n                                 (js/window.removeEventListener \"resize\" handle-window-resize))\n       :display-name           \"devtools outer\"\n       :reagent-render         (fn []\n                                 (let [draggable-area 10\n                                       left           (if @showing? (str (* 100 (- 1 @panel-width%)) \"%\")\n                                                                    (str @window-width \"px\"))\n                                       transition     (if @dragging?\n                                                        \"\"\n                                                        ease-transition)]\n                                   [rc/box\n                                    :class \"panel-wrapper\"\n                                    :width \"0px\"\n                                    :height \"0px\"\n                                    :style {:position \"fixed\"\n                                            :top      \"0px\"\n                                            :left     \"0px\"\n                                            :z-index  99999999}\n                                    :child [rc/h-box\n                                            :class \"panel\"\n                                            :width (str (* 100 @panel-width%) \"%\")\n                                            :height \"100%\"\n                                            :style {:position   \"fixed\"\n                                                    :z-index    1\n                                                    :box-shadow \"rgba(0, 0, 0, 0.3) 0px 0px 4px\"\n                                                    :background \"white\"\n                                                    :left       left\n                                                    :top        \"0px\"\n                                                    :transition transition}\n                                            :children [[:div.panel-resizer (when @showing? {:style         (resizer-style draggable-area)\n                                                                                            :on-mouse-down #(reset! dragging? true)})]\n                                                       [container/devtools-inner opts]]]]))})))\n\n\n(defn panel-div []\n  (let [id    \"--re-frame-10x--\"\n        panel (.getElementById js/document id)]\n    (if panel\n      panel\n      (let [new-panel (.createElement js/document \"div\")]\n        (.setAttribute new-panel \"id\" id)\n        (.appendChild (.-body js/document) new-panel)\n        (js/window.focus new-panel)\n        new-panel))))\n\n(defn inject-devtools! []\n  (styles/inject-trace-styles js/document)\n  (rdom/render [devtools-outer {:panel-type :inline\n                                :debug?     debug?}] (panel-div)))\n\n(defn traced-result [trace-id fragment-id]\n  ;; TODO: this is not terribly efficient, figure out how to get the index of the trace directly.\n  (let [trace (first (filter #(= trace-id (:id %)) (get-in @day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.db/app-db [:traces :all-traces])))]\n    (get-in trace [:tags :code fragment-id :result])))\n\n(defn init-db! []\n  (trace.db/init-db debug?))\n\n(defn ^:export factory-reset! []\n  (rf/dispatch [:settings/factory-reset]))\n\n(defn ^:export show-panel! [show-panel?]\n  (rf/dispatch [:settings/show-panel? show-panel?]))\n"]}