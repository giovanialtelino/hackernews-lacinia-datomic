{"version":3,"sources":["day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/core.cljc"],"mappings":"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","names":["day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/dispatch","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.router/dispatch","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/dispatch-sync","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.router/dispatch-sync","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/reg-sub","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/reg-sub","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/subscribe","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/subscribe","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/clear-sub","cljs.core.partial","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/clear-handlers","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/kind","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/clear-subscription-cache!","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/clear-subscription-cache!","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/reg-sub-raw","query-id","handler-fn","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/register-handler","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/reg-fx","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.fx/reg-fx","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/clear-fx","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.fx/kind","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/reg-cofx","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.cofx/reg-cofx","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/inject-cofx","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.cofx/inject-cofx","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/clear-cofx","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.cofx/kind","var_args","G__48675","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/reg-event-db","js/Error","id","handler","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.core.reg_event_db","interceptors","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.events/register","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.cofx/inject-db","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.fx/do-fx","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.std-interceptors/db-handler->interceptor","G__48677","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/reg-event-fx","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.core.reg_event_fx","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.std-interceptors/fx-handler->interceptor","G__48685","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/reg-event-ctx","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.core.reg_event_ctx","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.std-interceptors/ctx-handler->interceptor","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/clear-event","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.events/kind","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/debug","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.std-interceptors/debug","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/path","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.std-interceptors/path","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/enrich","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.std-interceptors/enrich","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/trim-v","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.std-interceptors/trim-v","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/after","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.std-interceptors/after","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/on-changes","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.std-interceptors/on-changes","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/->interceptor","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/->interceptor","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/get-coeffect","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/get-coeffect","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/assoc-coeffect","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/assoc-coeffect","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/get-effect","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/get-effect","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/assoc-effect","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/assoc-effect","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/enqueue","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor/enqueue","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/set-loggers!","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers/set-loggers!","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/console","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers/console","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/make-restore-fn","cljs.core/deref","handlers","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/kind->id->handler","app-db","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.db/app-db","subs-cache","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/query->reaction","original-subs","cljs.core/set","cljs.core/vals","current-subs","seq__48704","cljs.core/seq","chunk__48705","count__48706","i__48707","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","sub","clojure.set.difference","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/dispose!","cljs.core/reset!","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/purge-event-queue","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.router/event-queue","G__48725","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/add-post-event-callback","f","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.core.add_post_event_callback","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/remove-post-event-callback","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/register-handler","seq48729","self__4724__auto__","args","G__48734","G__48735","G__48736","G__48737","cljs.core.apply","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/register-sub","seq48746","G__48747","G__48748","G__48749","G__48750"],"sourcesContent":["(ns day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.events           :as events]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs             :as subs]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop          :as interop]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.db               :as db]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.fx               :as fx]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.cofx             :as cofx]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.router           :as router]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers          :as loggers]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar        :as registrar]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interceptor      :as interceptor]\n    [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.std-interceptors :as std-interceptors :refer [db-handler->interceptor\n                                                                                                            fx-handler->interceptor\n                                                                                                            ctx-handler->interceptor]]\n    [clojure.set               :as set]))\n\n\n;; -- API ---------------------------------------------------------------------\n;;\n;; This namespace represents the re-frame API\n;;\n;; Below, you'll see we've used this technique:\n;;   (def  api-name-for-fn    deeper.namespace/where-the-defn-is)\n;;\n;; So, we promote a `defn` in a deeper namespace \"up\" to the API\n;; via a `def` in this namespace.\n;;\n;; Turns out, this approach makes it hard:\n;;   - to auto-generate API docs\n;;   - for IDEs to provide code completion on functions in the API\n;;\n;; Which is annoying. But there are pros and cons and we haven't\n;; yet revisited the decision.  To compensate, we've added more nudity\n;; to the docs.\n;;\n\n\n;; -- dispatch ----------------------------------------------------------------\n(def dispatch       router/dispatch)\n(def dispatch-sync  router/dispatch-sync)\n\n\n;; -- subscriptions -----------------------------------------------------------\n(def reg-sub        subs/reg-sub)\n(def subscribe      subs/subscribe)\n\n(def clear-sub (partial registrar/clear-handlers subs/kind))  ;; think unreg-sub\n(def clear-subscription-cache! subs/clear-subscription-cache!)\n\n(defn reg-sub-raw\n  \"This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/day8/re-frame/blob/master/docs/SubscriptionFlow.md\"\n  [query-id handler-fn]\n  (registrar/register-handler subs/kind query-id handler-fn))\n\n\n;; -- effects -----------------------------------------------------------------\n(def reg-fx      fx/reg-fx)\n(def clear-fx    (partial registrar/clear-handlers fx/kind))  ;; think unreg-fx\n\n;; -- coeffects ---------------------------------------------------------------\n(def reg-cofx    cofx/reg-cofx)\n(def inject-cofx cofx/inject-cofx)\n(def clear-cofx (partial registrar/clear-handlers cofx/kind)) ;; think unreg-cofx\n\n\n;; -- Events ------------------------------------------------------------------\n\n(defn reg-event-db\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.\"\n  ([id handler]\n    (reg-event-db id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (db-handler->interceptor handler)])))\n\n\n(defn reg-event-fx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.\"\n  ([id handler]\n   (reg-event-fx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (fx-handler->interceptor handler)])))\n\n\n(defn reg-event-ctx\n  \"Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. \"\n  ([id handler]\n   (reg-event-ctx id nil handler))\n  ([id interceptors handler]\n   (events/register id [cofx/inject-db fx/do-fx interceptors (ctx-handler->interceptor handler)])))\n\n(def clear-event (partial registrar/clear-handlers events/kind)) ;; think unreg-event-*\n\n;; -- interceptors ------------------------------------------------------------\n\n;; Standard interceptors.\n;; Detailed docs on each in std-interceptors.cljs\n(def debug       std-interceptors/debug)\n(def path        std-interceptors/path)\n(def enrich      std-interceptors/enrich)\n(def trim-v      std-interceptors/trim-v)\n(def after       std-interceptors/after)\n(def on-changes  std-interceptors/on-changes)\n\n\n;; Utility functions for creating your own interceptors\n;;\n;;  (def my-interceptor\n;;     (->interceptor                ;; used to create an interceptor\n;;       :id     :my-interceptor     ;; an id - decorative only\n;;       :before (fn [context]                         ;; you normally want to change :coeffects\n;;                  ... use get-coeffect  and assoc-coeffect\n;;                       )\n;;       :after  (fn [context]                         ;; you normally want to change :effects\n;;                 (let [db (get-effect context :db)]  ;; (get-in context [:effects :db])\n;;                   (assoc-effect context :http-ajax {...}])))))\n;;\n(def ->interceptor   interceptor/->interceptor)\n(def get-coeffect    interceptor/get-coeffect)\n(def assoc-coeffect  interceptor/assoc-coeffect)\n(def get-effect      interceptor/get-effect)\n(def assoc-effect    interceptor/assoc-effect)\n(def enqueue         interceptor/enqueue)\n\n\n;; --  logging ----------------------------------------------------------------\n;; Internally, re-frame uses the logging functions: warn, log, error, group and groupEnd\n;; By default, these functions map directly to the js/console implementations,\n;; but you can override with your own fns (set or subset).\n;; Example Usage:\n;;   (defn my-fn [& args]  (post-it-somewhere (apply str args)))  ;; here is my alternative\n;;   (re-frame.core/set-loggers!  {:warn my-fn :log my-fn})       ;; override the defaults with mine\n(def set-loggers! loggers/set-loggers!)\n\n;; If you are writing an extension to re-frame, like perhaps\n;; an effects handler, you may want to use re-frame logging.\n;;\n;; usage: (console :error \"Oh, dear God, it happened: \" a-var \" and \" another)\n;;        (console :warn \"Possible breach of containment wall at: \" dt)\n(def console loggers/console)\n\n\n;; -- unit testing ------------------------------------------------------------\n\n(defn make-restore-fn\n  \"Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  \"\n  []\n  (let [handlers @registrar/kind->id->handler\n        app-db   @db/app-db\n\t\t\t\tsubs-cache @subs/query->reaction]\n    (fn []\n\t\t\t;; call `dispose!` on all current subscriptions which\n\t\t\t;; didn't originally exist.\n      (let [original-subs (set (vals subs-cache))\n            current-subs  (set (vals @subs/query->reaction))]\n        (doseq [sub (set/difference current-subs original-subs)]\n          (interop/dispose! sub)))\n\n      ;; Reset the atoms\n      ;; We don't need to reset subs/query->reaction, as\n      ;; disposing of the subs removes them from the cache anyway\n      (reset! registrar/kind->id->handler handlers)\n      (reset! db/app-db app-db)\n      nil)))\n\n(defn purge-event-queue\n  \"Remove all events queued for processing\"\n  []\n  (router/purge router/event-queue))\n\n;; -- Event Processing Callbacks  ---------------------------------------------\n\n(defn add-post-event-callback\n  \"Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \\\"add time\\\" so it can subsequently\n  be used at \\\"remove time\\\" to get rid of the right callback.\n  \"\n  ([f]\n   (add-post-event-callback f f))   ;; use f as its own identifier\n  ([id f]\n   (router/add-post-event-callback router/event-queue id f)))\n\n\n(defn remove-post-event-callback\n  [id]\n  (router/remove-post-event-callback router/event-queue id))\n\n\n;; --  Deprecation ------------------------------------------------------------\n;; Assisting the v0.7.x ->  v0.8.x transition.\n(defn register-handler\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-handler\\\" has been renamed \\\"reg-event-db\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-event-db args))\n\n(defn register-sub\n  [& args]\n  (console :warn  \"re-frame:  \\\"register-sub\\\" is deprecated. Use \\\"reg-sub-raw\\\" (look for registration of\" (str (first args)) \")\")\n  (apply reg-sub-raw args))\n"]}