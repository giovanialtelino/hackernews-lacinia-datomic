{"version":3,"sources":["day8/re_frame_10x/subs.cljs"],"mappings":"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","names":["G__53528","G__53529","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core/reg-sub","db","_","cljs.core.get","G__53530","G__53531","G__53532","G__53533","settings","G__53534","G__53535","G__53536","G__53537","p__53538","vec__53539","cljs.core.nth","panel-width%","n","Math/ceil","G__53542","G__53543","G__53544","G__53545","G__53546","G__53547","G__53548","G__53549","p__53550","vec__53551","width","G__53554","G__53555","G__53556","G__53557","G__53558","G__53559","G__53560","G__53561","G__53562","G__53563","G__53564","G__53565","G__53566","G__53567","G__53568","G__53569","cljs.core.sort_by","cljs.core/vals","G__53571","G__53572","G__53573","G__53574","G__53575","G__53576","G__53577","G__53578","G__53579","G__53580","G__53581","G__53582","G__53584","G__53585","G__53586","G__53587","G__53588","G__53589","G__53590","G__53591","G__53592","G__53593","trace","cljs.core.get_in","G__53594","G__53595","G__53596","G__53597","G__53599","G__53600","G__53601","G__53602","app-db-settings","p1__53598#","cljs.core.map","cljs.core.assoc","cljs.core/val","cljs.core/key","G__53603","G__53604","G__53605","G__53606","G__53607","G__53608","G__53609","G__53610","G__53613","G__53614","G__53615","G__53616","p__53617","vec__53618","expansions","path","cljs.core/contains?","G__53621","G__53622","G__53623","G__53624","root","G__53625","G__53626","G__53627","G__53628","G__53633","G__53634","G__53635","G__53636","G__53637","G__53638","G__53639","G__53640","G__53641","G__53642","traces","G__53643","G__53644","G__53645","G__53646","cljs.core/count","G__53647","G__53648","G__53649","G__53650","G__53651","G__53652","G__53653","G__53654","p__53656","vec__53657","beginning","ending","cljs.core.into","day8.re-frame-10x.utils.utils/id-between-xf","p__53660","vec__53661","day8.re-frame-10x.subs/filter-ignored-views","filtered-views","munged-ns","cljs.core.comp","cljs.core/munge","cljs.core/set","cljs.core.remove","day8.re-frame-10x.metamorphic/render?","cljs.core.subs","clojure.string.last_index_of","G__53676","G__53677","G__53678","G__53679","G__53680","G__53681","G__53682","G__53683","G__53684","G__53685","G__53686","G__53687","G__53688","G__53689","G__53690","G__53691","trace-root","G__53692","G__53693","G__53694","G__53695","G__53696","G__53697","G__53698","G__53699","snapshot","G__53700","G__53701","G__53703","G__53704","G__53705","G__53706","epochs","cljs.core.juxt","day8.re-frame-10x.metamorphic/matched-event","cljs.core/first","cljs.core/>","G__53707","G__53708","G__53709","G__53710","G__53711","G__53712","p__53713","vec__53714","match-ids","current-id","match","cljs.core/last","G__53718","G__53719","G__53720","G__53721","match-state","G__53722","G__53723","G__53724","G__53725","G__53727","G__53728","G__53729","G__53730","G__53731","G__53732","G__53733","G__53734","G__53735","G__53736","G__53737","G__53738","G__53739","G__53740","G__53741","G__53742","G__53743","G__53744","G__53745","G__53746","G__53747","G__53748","G__53749","G__53750","G__53751","G__53752","G__53753","G__53754","G__53755","G__53756","G__53757","G__53758","G__53759","G__53760","p__53761","vec__53762","current","ids","G__53765","G__53766","G__53767","G__53768","G__53769","G__53770","p__53771","vec__53772","day8.re-frame-10x.utils.utils/last-in-vec","G__53776","G__53777","G__53778","G__53779","start-of-epoch","end-of-epoch","day8.re-frame-10x.metamorphic/elapsed-time","G__53781","G__53782","G__53783","G__53784","p1__53780#","cljs.core.filter","day8.re-frame-10x.metamorphic/request-animation-frame?","day8.re-frame-10x.metamorphic/request-animation-frame-end?","G__53785","G__53786","G__53787","G__53788","frame-traces","var_args","G__53793","day8.re-frame-10x.subs/+nil","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq53790","G__53791","cljs.core/next","G__53792","self__4723__auto__","x","y","more","cljs.core.reduce","cljs.core/+","G__53794","G__53795","G__53796","G__53797","G__53798","G__53799","p__53800","p__53801","vec__53802","vec__53805","af-start-end","epoch-traces","frame-number","vec__53808","frame-pairs","cljs.core.partition","start","end","af-traces","day8.re-frame-10x.metamorphic/id-between-xf","total-time","subs-time","cljs.core.transduce","day8.re-frame-10x.metamorphic/subscription?","render-time","G__53811","G__53812","G__53813","G__53814","map__53818","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","event-time","event-handler-time","event-dofx-time","event-run-time","remaining-interceptors","G__53820","G__53821","G__53822","G__53823","start-of-render","G__53824","G__53825","G__53826","G__53827","cljs.core/empty?","G__53828","G__53829","G__53832","G__53833","G__53834","G__53835","G__53836","G__53837","G__53838","G__53839","epoch","G__53842","G__53843","G__53844","G__53845","G__53846","G__53847","G__53848","G__53849","day8.re-frame-10x.subs/string!","cljs.spec.alpha/and-spec-impl","p1__53851#","cljs.core/string?","cljs.spec.alpha/def-impl","cljs.spec.alpha/nilable-impl","cljs.spec.alpha.every_impl","G__53853","cljs.core/coll?","cljs.core/pos-int?","cljs.core/any?","cljs.spec.alpha/map-spec-impl","G__53858","cljs.core/map?","G__53861","day8.re-frame-10x.subs/sub-type-value","sub-type","G__53864","cljs.core/Keyword","day8.re-frame-10x.subs/accumulate-sub-value","order","exp","total","temp__5733__auto__","js/Math.pow","cljs.core/rest","day8.re-frame-10x.subs/accumulate-sub-value-memoized","cljs.core/memoize","day8.re-frame-10x.subs/sub-sort-val","order-x","order-y","cljs.core/compare","day8.re-frame-10x.subs/sub-op-type->type","t","G__53866","p__53867","p__53868","vec__53869","vec__53872","day8.re-frame-10x.subs/prepare-pod-info","sub-info","sub-state","subscription","remove-fn","cljs.core._EQ_","me","cljs.core/constantly","subx","state","sub","cljs.core.pr_str","or__4126__auto__","G__53875","G__53876","G__53877","G__53878","G__53879","G__53880","G__53881","G__53882","G__53883","G__53884","G__53885","G__53886","G__53887","G__53888","G__53889","G__53890","G__53891","G__53892","G__53893","G__53894","G__53895","G__53896","G__53897","G__53898","G__53899","G__53900","G__53901","G__53902","G__53903","G__53904","G__53905","G__53906","G__53907","G__53908","p__53909","vec__53910","all-subs","ignore-unchanged-l2?","filter-str","pins","compare-fn","s1","s2","p1","cljs.core/boolean","p2","G__53913","cljs.core.sort","day8.re-frame-10x.metamorphic/unchanged-l2-subscription?","cljs.core/not-empty","p__53914","map__53915","id","clojure.string/includes?","G__53917","G__53918","G__53919","G__53920","subs","cljs.core.mapcat","cljs.core/frequencies","G__53921","G__53922","G__53923","G__53924","counts","G__53925","G__53926","G__53927","G__53928","G__53929","G__53930","G__53931","G__53932","G__53933","G__53934","G__53935","G__53936","G__53937","G__53938","G__53939","G__53940","G__53941","G__53942","G__53943","G__53944","G__53945","G__53946","G__53947","G__53948","G__53954","G__53955","G__53956","G__53957","G__53958","G__53959","G__53960","G__53961","G__53962","G__53963","cljs.core.keep_indexed","i","temp__5739__auto__","code","cljs.core.map_indexed","cljs.core/vec","G__53964","G__53965","G__53966","G__53967","G__53968","G__53969","G__53970","G__53971","form","zprint.core/zprint-str","G__53972","G__53973","G__53974","G__53975","G__53976","G__53977","G__53978","G__53979","G__53980","G__53981","G__53982","G__53983","G__53984","G__53985","G__53986","G__53987","day8.re-frame-10x.subs/canvas","js/document.createElement","G__53988","G__53989","context","G__53990","G__53991","G__53992","G__53993","G__53994","G__53995","p__53996","vec__53997","window-width","char-width","G__54000","G__54001","G__54009","G__54010","G__54011","G__54012","component","G__54013","G__54014","G__54015","G__54016","G__54017","G__54018","errors","G__54019","G__54020"],"sourcesContent":["(ns day8.re-frame-10x.subs\n  (:require [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.core :as rf]\n            [day8.re-frame-10x.metamorphic :as metam]\n            [day8.re-frame-10x.utils.utils :as utils]\n            [clojure.string :as str]\n            [cljs.spec.alpha :as s]\n            [zprint.core :as zp]))\n\n(rf/reg-sub\n  :settings/root\n  (fn [db _]\n    (get db :settings)))\n\n(rf/reg-sub\n  :settings/panel-width%\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :panel-width%)))\n\n(rf/reg-sub\n  :settings/panel-width%-rounded\n  :<- [:settings/panel-width%]\n  ;; Rounds panel width to nearest n%\n  (fn [panel-width% [_ n]]\n    ;; https://stackoverflow.com/a/19621472\n    (/ (* (Math/ceil (/ (* panel-width% 100)\n                        n))\n          n)\n       100.0)))\n\n(rf/reg-sub\n  :settings/window-width\n  ;; Prefer window-width-rounded if you don't need the exact number of pixels.\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :window-width)))\n\n(rf/reg-sub\n  :settings/window-width-rounded\n  :<- [:settings/window-width]\n  ;; Window width, rounded up to the nearest n pixels.\n  ;; Useful when you want to respond to window size changes\n  ;; but not too many of them.\n  (fn [width [_ n]]\n    (* (Math/ceil (/ width n))\n       n)))\n\n(rf/reg-sub\n  :settings/show-panel?\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :show-panel?)))\n\n(rf/reg-sub\n  :settings/selected-tab\n  :<- [:settings/root]\n  (fn [settings _]\n    (if (:showing-settings? settings)\n      :settings\n      (get settings :selected-tab))))\n\n(rf/reg-sub\n  :settings/number-of-retained-epochs\n  :<- [:settings/root]\n  (fn [settings]\n    (:number-of-epochs settings)))\n\n(rf/reg-sub\n  :settings/ignored-events\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:ignored-events settings)))))\n\n(rf/reg-sub\n  :settings/filtered-view-trace\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:filtered-view-trace settings)))))\n\n(rf/reg-sub\n  :settings/low-level-trace\n  ;; TODO: filter from traces panel\n  ;; TODO: eventually drop these low level traces after computing the state we need from them.\n  :<- [:settings/root]\n  (fn [settings]\n    (:low-level-trace settings)))\n\n(rf/reg-sub\n  :settings/debug?\n  :<- [:settings/root]\n  (fn [settings]\n    (:debug? settings)))\n\n(rf/reg-sub\n  :settings/app-db-follows-events?\n  :<- [:settings/root]\n  (fn [settings]\n    (:app-db-follows-events? settings)))\n\n;; App DB\n\n(rf/reg-sub\n  :app-db/root\n  (fn [db _]\n    (get db :app-db)))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-after\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-after])))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-before\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-before])))\n\n(rf/reg-sub\n  :app-db/paths\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (map #(assoc (val %) :id (key %))\n         (get app-db-settings :paths))))\n\n(rf/reg-sub\n  :app-db/search-string\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :search-string)))\n\n(rf/reg-sub\n  :app-db/expansions\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :json-ml-expansions)))\n\n(rf/reg-sub\n  :app-db/node-expanded?\n  :<- [:app-db/expansions]\n  (fn [expansions [_ path]]\n    (contains? expansions path)))\n\n(rf/reg-sub\n  :app-db/reagent-id\n  :<- [:app-db/root]\n  (fn [root _]\n    (:reagent-id root)))\n\n;;\n\n(rf/reg-sub\n  :traces/trace-root\n  (fn [db _]\n    (:traces db)))\n\n(rf/reg-sub\n  :trace-panel/root\n  (fn [db _]\n    (:trace-panel db)))\n\n(rf/reg-sub\n  :traces/filter-items\n  (fn [db _]\n    (get-in db [:traces :filter-items])))\n\n(rf/reg-sub\n  :traces/expansions\n  (fn [db _]\n    (get-in db [:traces :expansions])))\n\n(rf/reg-sub\n  :traces/categories\n  (fn [db _]\n    (get-in db [:traces :categories])))\n\n(rf/reg-sub\n  :traces/all-traces\n  :<- [:traces/trace-root]\n  (fn [traces _]\n    (:all-traces traces)))\n\n(rf/reg-sub\n  :traces/number-of-traces\n  :<- [:traces/all-traces]\n  (fn [traces _]\n    (count traces)))\n\n(rf/reg-sub\n  :traces/current-event-traces\n  :<- [:traces/all-traces]\n  :<- [:epochs/beginning-trace-id]\n  :<- [:epochs/ending-trace-id]\n  (fn [[traces beginning ending] _]\n    (into [] (utils/id-between-xf beginning ending) traces)))\n\n(defn filter-ignored-views [[traces filtered-views] _]\n  (let [munged-ns (->> filtered-views\n                       (map (comp munge :ns-str))\n                       (set))]\n    (into []\n          ;; Filter out view namespaces we don't care about.\n          (remove\n            (fn [trace] (and (metam/render? trace)\n                             (contains? munged-ns (subs (:operation trace) 0 (str/last-index-of (:operation trace) \".\"))))))\n          traces)))\n\n(rf/reg-sub\n  :traces/current-event-visible-traces\n  :<- [:traces/current-event-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :traces/all-visible-traces\n  :<- [:traces/all-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :trace-panel/show-epoch-traces?\n  :<- [:trace-panel/root]\n  (fn [trace-root]\n    (:show-epoch-traces? trace-root)))\n\n;;\n\n(rf/reg-sub\n  :global/unloading?\n  (fn [db _]\n    (get-in db [:global :unloading?])))\n\n;;\n\n(rf/reg-sub\n  :snapshot/snapshot-root\n  (fn [db _]\n    (:snapshot db)))\n\n(rf/reg-sub\n  :snapshot/snapshot-ready?\n  :<- [:snapshot/snapshot-root]\n  (fn [snapshot _]\n    (contains? snapshot :current-snapshot)))\n\n;;\n\n(rf/reg-sub\n  :epochs/epoch-root\n  (fn [db _]\n    (:epochs db)))\n\n(rf/reg-sub\n  :epochs/all-events-by-id\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (->> (map (juxt key (comp :event :tags metam/matched-event :match-info val))\n              (:matches-by-id epochs))\n         (sort-by first >))))\n\n(rf/reg-sub\n  :epochs/current-match-state\n  :<- [:epochs/epoch-root]\n  :<- [:epochs/match-ids]\n  (fn [[epochs match-ids] _]\n    (let [current-id (:current-epoch-id epochs)\n          match      (cond\n                       (nil? current-id) (last (:matches epochs))\n                       (< current-id (first match-ids)) (first (:matches epochs))\n                       ;; This case seems impossible, but can happen if the user filters out\n                       ;; an event that they are 'on'.\n                       (> current-id (last match-ids)) (last (:matches epochs))\n                       :else (get (:matches-by-id epochs) current-id))]\n      match)))\n\n(rf/reg-sub\n  :epochs/current-match\n  :<- [:epochs/current-match-state]\n  (fn [match-state _]\n    (:match-info match-state)))\n\n(rf/reg-sub\n  :epochs/current-event-trace\n  :<- [:epochs/current-match]\n  (fn [match _]\n    (metam/matched-event match)))\n\n(rf/reg-sub\n  :epochs/current-event\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :event])))\n\n(rf/reg-sub\n  :epochs/number-of-matches\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (count (get epochs :matches))))\n\n(rf/reg-sub\n  :epochs/current-event-index\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (:current-epoch-index epochs)))\n\n(rf/reg-sub\n  :epochs/current-epoch-id\n  :<- [:epochs/current-match]\n  (fn [epochs _]\n    (:id (first epochs))))\n\n(rf/reg-sub\n  :epochs/match-ids\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:match-ids epochs)))\n\n(rf/reg-sub\n  :epochs/beginning-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (first match))))\n\n(rf/reg-sub\n  :epochs/ending-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (last match))))\n\n(rf/reg-sub\n  :epochs/older-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (or (nil? current)\n             (> current (nth ids 0))))))\n\n(rf/reg-sub\n  :epochs/newer-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (some? current)\n         (< current (utils/last-in-vec ids)))))\n\n;;\n\n(rf/reg-sub\n  :timing/total-epoch-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-epoch (nth traces 0)\n          end-of-epoch   (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-epoch end-of-epoch))))\n\n(rf/reg-sub\n  :timing/animation-frame-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter #(or (metam/request-animation-frame? %)\n                 (metam/request-animation-frame-end? %))\n            traces)))\n\n(rf/reg-sub\n  :timing/animation-frame-count\n  :<- [:timing/animation-frame-traces]\n  (fn [frame-traces]\n    (count (filter metam/request-animation-frame? frame-traces))))\n\n(defn ^number +nil\n  \"Returns the sum of nums. (+) returns nil (not 0 like in cljs.core).\"\n  ([] nil)\n  ([x] x)\n  ([x y] (cljs.core/+ x y))\n  ([x y & more]\n   (reduce + (cljs.core/+ x y) more)))\n\n(rf/reg-sub\n  :timing/animation-frame-time\n  :<- [:timing/animation-frame-traces]\n  :<- [:traces/current-event-traces]\n  (fn [[af-start-end epoch-traces] [_ frame-number]]\n    (let [frame-pairs (partition 2 af-start-end)\n          [start end] (nth frame-pairs (dec frame-number))\n          af-traces   (into [] (metam/id-between-xf (:id start) (:id end)) epoch-traces)\n          total-time  (metam/elapsed-time start end)\n          ;; TODO: these times double count renders/subs that happened as a child of another\n          ;; need to fix either here, at ingestion point, or most preferably in re-frame at tracing point.\n          subs-time   (transduce (comp\n                                   (filter metam/subscription?)\n                                   (map :duration))\n                                 +nil af-traces)\n          render-time (transduce (comp\n                                   (filter metam/render?)\n                                   (map :duration))\n                                 +nil af-traces)]\n      {:timing/animation-frame-total  total-time\n       :timing/animation-frame-subs   subs-time\n       :timing/animation-frame-render render-time\n       ;; TODO: handle rounding weirdness here, make sure it is never below 0.\n       :timing/animation-frame-misc   (- total-time subs-time render-time)})))\n\n(rf/reg-sub\n  :timing/event-processing-time\n  :<- [:epochs/current-match-state]\n  (fn [match]\n    (let [{:re-frame/keys [event-time event-handler-time event-dofx-time event-run-time]} (get match :timing)\n          ;; The scope of tracing is:\n          ;; event-run-time\n          ;;   event-time\n          ;;     event-handler-time\n          ;;     event-dofx-time\n          ;;     <other stuff>\n          ;;   <other stuff>\n          remaining-interceptors (- event-time event-handler-time event-dofx-time)]\n      {:timing/event-total        event-run-time\n       :timing/event-handler      event-handler-time\n       :timing/event-effects      event-dofx-time\n       :timing/event-interceptors remaining-interceptors\n       ;; TODO: look at splitting out interceptors from misc, there was a suspiciously high amount of time\n       ;; in misc on some events, so that needs to be investigated.\n       ; :timing/event-misc (- event-run-time event-time)\n       :timing/event-misc         (- event-run-time event-handler-time event-dofx-time)})))\n\n(rf/reg-sub\n  :timing/render-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-render (first (filter metam/request-animation-frame? traces))\n          end-of-epoch    (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-render end-of-epoch))))\n\n(rf/reg-sub\n  :timing/data-available?\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (not (empty? traces))))\n\n;;\n\n(rf/reg-sub\n  :subs/root\n  (fn [db _]\n    (:subs db)))\n\n(rf/reg-sub\n  :subs/all-sub-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter metam/subscription? traces)))\n\n(rf/reg-sub\n  :subs/subscription-info\n  :<- [:epochs/epoch-root]\n  (fn [epoch]\n    (:subscription-info epoch)))\n\n(rf/reg-sub\n  :subs/sub-state\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:sub-state epochs)))\n\n(rf/reg-sub\n  :subs/current-epoch-sub-state\n  :<- [:epochs/current-match-state]\n  (fn [match-state]\n    (:sub-state match-state)))\n\n(def string! (s/and string? #(not (empty? %))))\n\n(s/def :sub/id string!)\n(s/def :sub/reagent-id string!)\n(s/def :sub/run-types #{:sub/create :sub/dispose :sub/run :sub/not-run})\n(s/def :sub/order (s/nilable (s/coll-of :sub/run-types)))\n(s/def :sub/layer (s/nilable pos-int?))\n(s/def :sub/path-data any?)\n(s/def :sub/path string!)\n(s/def :sub/value any?)\n(s/def :sub/previous-value any?)\n(s/def :subs/view-panel-sub\n  (s/keys :req-un [:sub/id :sub/reagent-id :sub/order :sub/layer :sub/path-data :sub/path]\n          :opt-un [:sub/value :sub/previous-value]))\n(s/def :subs/view-subs (s/coll-of :subs/view-panel-sub))\n\n(defn sub-type-value\n  [sub-type]\n  (case sub-type\n    :sub/create 5\n    :sub/run 4\n    :sub/dispose 3\n    :sub/not-run 2\n    1))\n\n(defn accumulate-sub-value\n  \"Calculate a sorting value for a series of subscription trace types.\"\n  ;; A reader might reasonably ask, \"Why are we going to all this work here?\"\n  ;; We calculate a custom value rather than just comparing two order vectors,\n  ;; because the default compare logic for comparing vectors is to sort shorter\n  ;; vectors above longer ones, whereas we want all CRR, CR, C orders to be\n  ;; sorted adjacent to each other, in that order.\n  ;;\n  ;; The first sub type in the order is worth (n * 10^3),\n  ;; then the next one (if it exists), is worth (n * 10^2), and so-on.\n  [order]\n  (loop [exp   3\n         total 0\n         order order]\n    (if-let [sub-type (first order)]\n      (recur (dec exp) (+ total (* (sub-type-value sub-type) (js/Math.pow 10 exp))) (rest order))\n      total)))\n\n(def accumulate-sub-value-memoized\n  (memoize accumulate-sub-value))\n\n(defn sub-sort-val [order-x order-y]\n  ;; Note x and y are reversed here so that the \"highest\" sub orders get sorted first.\n  (compare (accumulate-sub-value-memoized order-y)\n           (accumulate-sub-value-memoized order-x)))\n\n(defn sub-op-type->type [t]\n  (case (:op-type t)\n    :sub/create :created\n    :sub/run :re-run\n    :sub/dispose :destroyed\n\n    :not-run))\n\n(defn prepare-pod-info\n  \"Returns sub info prepared for rendering in pods\"\n  [[sub-info sub-state] [subscription]]\n  (let [remove-fn (if (= subscription :subs/intra-epoch-subs)\n                    (fn [me] (nil? (:order (val me))))\n                    (constantly false))\n        subx      (->> sub-state\n                       (remove remove-fn)\n                       (map (fn [me] (let [state        (val me)\n                                           subscription (:subscription state)\n                                           sub          {:id         (key me)\n                                                         :reagent-id (key me)\n                                                         :layer      (get-in sub-info [(first subscription) :layer])\n                                                         :path-data  subscription\n                                                         :path       (pr-str subscription)\n                                                         :order      (or (:order state) [:sub/not-run])\n                                                         :sub/traits (:sub/traits state)}\n                                           sub          (if (contains? state :value)\n                                                          (assoc sub :value (:value state))\n                                                          sub)\n                                           sub          (if (contains? state :previous-value)\n                                                          (assoc sub :previous-value (:previous-value state))\n                                                          sub)]\n                                       sub)))\n                       (sort-by :order sub-sort-val)        ;; Also sort by subscription-id\n                       #_(sort-by :path))]\n    subx))\n\n\n(rf/reg-sub\n  :subs/pre-epoch-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:pre-epoch-state sub-state)))\n\n(rf/reg-sub\n  :subs/reaction-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:reaction-state sub-state)))\n\n(rf/reg-sub\n  :subs/intra-epoch-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/pre-epoch-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/all-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/reaction-state]\n  prepare-pod-info)\n\n\n(rf/reg-sub\n  :subs/filter-str\n  :<- [:subs/root]\n  (fn [root _]\n    (:filter-str root)))\n\n\n(rf/reg-sub\n  :subs/visible-subs\n  :<- [:subs/all-subs]\n  :<- [:subs/ignore-unchanged-l2-subs?]\n  :<- [:subs/filter-str]\n  :<- [:subs/sub-pins]\n  (fn [[all-subs ignore-unchanged-l2? filter-str pins]]\n    (let [compare-fn (fn [s1 s2]\n                       (let [p1 (boolean (get-in pins [(:id s1) :pin?]))\n                             p2 (boolean (get-in pins [(:id s2) :pin?]))]\n                         (if (= p1 p2)\n                           (compare (:path s1) (:path s2))\n                           p1)))]\n      (cond->> (sort compare-fn all-subs)\n               ignore-unchanged-l2? (remove metam/unchanged-l2-subscription?)\n               (not-empty filter-str) (filter (fn [{:keys [path id]}]\n                                                (or (str/includes? path filter-str)\n                                                    (get-in pins [id :pin?]))))))))\n\n(rf/reg-sub\n  :subs/sub-counts\n  :<- [:subs/visible-subs]\n  (fn [subs _]\n    (->> subs\n         (mapcat :order)\n         (frequencies))))\n\n(rf/reg-sub\n  :subs/created-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/create 0)))\n\n(rf/reg-sub\n  :subs/re-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/run 0)))\n\n(rf/reg-sub\n  :subs/destroyed-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/dispose 0)))\n\n(rf/reg-sub\n  :subs/not-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/not-run 0)))\n\n(rf/reg-sub\n  :subs/unchanged-l2-subs-count\n  :<- [:subs/all-subs]\n  (fn [subs]\n    (count (filter metam/unchanged-l2-subscription? subs))))\n\n(rf/reg-sub\n  :subs/ignore-unchanged-l2-subs?\n  :<- [:subs/root]\n  (fn [subs _]\n    (:ignore-unchanged-subs? subs true)))\n\n(rf/reg-sub\n  :subs/sub-expansions\n  :<- [:subs/root]\n  (fn [subs _]\n    (:expansions subs)))\n\n(rf/reg-sub\n  :subs/sub-pins\n  :<- [:subs/root]\n  (fn [subs _]\n    (:pinned subs)))\n\n;;\n\n(rf/reg-sub\n  :code/root\n  (fn [db _]\n    (:code db)))\n\n(rf/reg-sub\n  :code/current-code\n  :<- [:traces/current-event-traces]\n  (fn [traces _]\n    (keep-indexed (fn [i trace]\n                    (when-some [code (get-in trace [:tags :code])]\n                      {:id       i\n                       :trace-id (:id trace)\n                       :title    (pr-str (:op-type trace))\n                       :code     (->> code (map-indexed (fn [i code] (assoc code :id i))) vec) ;; Add index\n                       :form     (get-in trace [:tags :form])}))\n                  traces)))\n\n(rf/reg-sub\n  :code/current-form\n  :<- [:code/current-code]\n  (fn [code _]\n    (:form (first code))))\n\n(rf/reg-sub\n  :code/current-zprint-form\n  :<- [:code/current-form]\n  (fn [form _]\n    (zp/zprint-str form)))\n\n(rf/reg-sub\n  :code/code-open?\n  :<- [:code/root]\n  (fn [code _]\n    (:code-open? code)))\n\n(rf/reg-sub\n  :code/highlighted-form\n  :<- [:code/root]\n  (fn [code _]\n    (:highlighted-form code)))\n\n(rf/reg-sub\n  :code/show-all-code?\n  :<- [:code/root]\n  (fn [code _]\n    (:show-all-code? code)))\n\n(rf/reg-sub\n  :code/repl-msg-state\n  :<- [:code/root]\n  (fn [code _]\n    (:repl-msg-state code)))\n\n(def canvas (js/document.createElement \"canvas\"))\n\n(rf/reg-sub\n  :code/single-character-width\n  (fn [_ _]\n    (let [context (.getContext canvas \"2d\")]\n      (set! (.-font context) \"monospace 1em\")\n      (.-width (.measureText context \"T\")))))\n\n(rf/reg-sub\n  :code/max-column-width\n  :<- [:settings/window-width-rounded 100]\n  :<- [:code/single-character-width]\n  ;; It seems like it would be possible to do something smarter responding to panel sizing,\n  ;; but that introduces a lot of jank, so we just set to maximum possible window width.\n  (fn [[window-width char-width] _]\n    (Math/ceil (/ window-width\n                  char-width))))\n\n;;\n\n(rf/reg-sub\n  :component/root\n  (fn [db _]\n    (:component db)))\n\n(rf/reg-sub\n  :component/direction\n  :<- [:component/root]\n  (fn [component _]\n    (:direction component)))\n\n;;\n\n(rf/reg-sub\n  :errors/root\n  (fn [db _]\n    (:errors db)))\n\n(rf/reg-sub\n  :errors/popup-failed?\n  :<- [:errors/root]\n  (fn [errors _]\n    (:popup-failed? errors)))\n\n;;\n\n(rf/reg-sub\n  :history/showing-history?\n  (fn [db _]\n    (get-in db [:history :showing-history?])))\n"]}