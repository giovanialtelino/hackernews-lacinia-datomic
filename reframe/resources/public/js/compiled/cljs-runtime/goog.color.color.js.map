{
"version":3,
"file":"goog.color.color.js",
"lineCount":518,
"mappings":"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",
"sources":["goog/color/color.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities related to color and color conversion.\n */\n\ngoog.provide('goog.color');\ngoog.provide('goog.color.Hsl');\ngoog.provide('goog.color.Hsv');\ngoog.provide('goog.color.Rgb');\n\ngoog.require('goog.color.names');\ngoog.require('goog.math');\n\n\n/**\n * RGB color representation. An array containing three elements [r, g, b],\n * each an integer in [0, 255], representing the red, green, and blue components\n * of the color respectively.\n * @typedef {Array<number>}\n */\ngoog.color.Rgb;\n\n\n/**\n * HSV color representation. An array containing three elements [h, s, v]:\n * h (hue) must be an integer in [0, 360], cyclic.\n * s (saturation) must be a number in [0, 1].\n * v (value/brightness) must be an integer in [0, 255].\n * @typedef {Array<number>}\n */\ngoog.color.Hsv;\n\n\n/**\n * HSL color representation. An array containing three elements [h, s, l]:\n * h (hue) must be an integer in [0, 360], cyclic.\n * s (saturation) must be a number in [0, 1].\n * l (lightness) must be a number in [0, 1].\n * @typedef {Array<number>}\n */\ngoog.color.Hsl;\n\n\n/**\n * Parses a color out of a string.\n * @param {string} str Color in some format.\n * @return {{hex: string, type: string}} 'hex' is a string containing a hex\n *     representation of the color, 'type' is a string containing the type\n *     of color format passed in ('hex', 'rgb', 'named').\n */\ngoog.color.parse = function(str) {\n  var result = {};\n  str = String(str);\n\n  var maybeHex = goog.color.prependHashIfNecessaryHelper(str);\n  if (goog.color.isValidHexColor_(maybeHex)) {\n    result.hex = goog.color.normalizeHex(maybeHex);\n    result.type = 'hex';\n    return result;\n  } else {\n    var rgb = goog.color.isValidRgbColor_(str);\n    if (rgb.length) {\n      result.hex = goog.color.rgbArrayToHex(rgb);\n      result.type = 'rgb';\n      return result;\n    } else if (goog.color.names) {\n      var hex = goog.color.names[str.toLowerCase()];\n      if (hex) {\n        result.hex = hex;\n        result.type = 'named';\n        return result;\n      }\n    }\n  }\n  throw Error(str + ' is not a valid color string');\n};\n\n\n/**\n * Determines if the given string can be parsed as a color.\n *     {@see goog.color.parse}.\n * @param {string} str Potential color string.\n * @return {boolean} True if str is in a format that can be parsed to a color.\n */\ngoog.color.isValidColor = function(str) {\n  var maybeHex = goog.color.prependHashIfNecessaryHelper(str);\n  return !!(\n      goog.color.isValidHexColor_(maybeHex) ||\n      goog.color.isValidRgbColor_(str).length ||\n      goog.color.names && goog.color.names[str.toLowerCase()]);\n};\n\n\n/**\n * Parses red, green, blue components out of a valid rgb color string.\n * Throws Error if the color string is invalid.\n * @param {string} str RGB representation of a color.\n *    {@see goog.color.isValidRgbColor_}.\n * @return {!goog.color.Rgb} rgb representation of the color.\n */\ngoog.color.parseRgb = function(str) {\n  var rgb = goog.color.isValidRgbColor_(str);\n  if (!rgb.length) {\n    throw Error(str + ' is not a valid RGB color');\n  }\n  return rgb;\n};\n\n\n/**\n * Converts a hex representation of a color to RGB.\n * @param {string} hexColor Color to convert.\n * @return {string} string of the form 'rgb(R,G,B)' which can be used in\n *    styles.\n */\ngoog.color.hexToRgbStyle = function(hexColor) {\n  return goog.color.rgbStyle_(goog.color.hexToRgb(hexColor));\n};\n\n\n/**\n * Regular expression for extracting the digits in a hex color triplet.\n * @type {!RegExp}\n * @private\n */\ngoog.color.hexTripletRe_ = /#(.)(.)(.)/;\n\n\n/**\n * Normalize an hex representation of a color\n * @param {string} hexColor an hex color string.\n * @return {string} hex color in the format '#rrggbb' with all lowercase\n *     literals.\n */\ngoog.color.normalizeHex = function(hexColor) {\n  if (!goog.color.isValidHexColor_(hexColor)) {\n    throw Error(\"'\" + hexColor + \"' is not a valid hex color\");\n  }\n  if (hexColor.length == 4) {  // of the form #RGB\n    hexColor = hexColor.replace(goog.color.hexTripletRe_, '#$1$1$2$2$3$3');\n  }\n  return hexColor.toLowerCase();\n};\n\n\n/**\n * Converts a hex representation of a color to RGB.\n * @param {string} hexColor Color to convert.\n * @return {!goog.color.Rgb} rgb representation of the color.\n */\ngoog.color.hexToRgb = function(hexColor) {\n  hexColor = goog.color.normalizeHex(hexColor);\n  var rgb = parseInt(hexColor.substr(1), 16);\n  var r = rgb >> 16;\n  var g = (rgb >> 8) & 255;\n  var b = rgb & 255;\n\n  return [r, g, b];\n};\n\n\n/**\n * Converts a color from RGB to hex representation.\n * @param {number} r Amount of red, int between 0 and 255.\n * @param {number} g Amount of green, int between 0 and 255.\n * @param {number} b Amount of blue, int between 0 and 255.\n * @return {string} hex representation of the color.\n */\ngoog.color.rgbToHex = function(r, g, b) {\n  r = Number(r);\n  g = Number(g);\n  b = Number(b);\n  if (r != (r & 255) || g != (g & 255) || b != (b & 255)) {\n    throw Error('\"(' + r + ',' + g + ',' + b + '\") is not a valid RGB color');\n  }\n  var rgb = (r << 16) | (g << 8) | b;\n  if (r < 0x10) {\n    return '#' + (0x1000000 | rgb).toString(16).substr(1);\n  }\n  return '#' + rgb.toString(16);\n};\n\n\n/**\n * Converts a color from RGB to hex representation.\n * @param {goog.color.Rgb} rgb rgb representation of the color.\n * @return {string} hex representation of the color.\n */\ngoog.color.rgbArrayToHex = function(rgb) {\n  return goog.color.rgbToHex(rgb[0], rgb[1], rgb[2]);\n};\n\n\n/**\n * Converts a color from RGB color space to HSL color space.\n * Modified from {@link http://en.wikipedia.org/wiki/HLS_color_space}.\n * @param {number} r Value of red, in [0, 255].\n * @param {number} g Value of green, in [0, 255].\n * @param {number} b Value of blue, in [0, 255].\n * @return {!goog.color.Hsl} hsl representation of the color.\n */\ngoog.color.rgbToHsl = function(r, g, b) {\n  // First must normalize r, g, b to be between 0 and 1.\n  var normR = r / 255;\n  var normG = g / 255;\n  var normB = b / 255;\n  var max = Math.max(normR, normG, normB);\n  var min = Math.min(normR, normG, normB);\n  var h = 0;\n  var s = 0;\n\n  // Luminosity is the average of the max and min rgb color intensities.\n  var l = 0.5 * (max + min);\n\n  // The hue and saturation are dependent on which color intensity is the max.\n  // If max and min are equal, the color is gray and h and s should be 0.\n  if (max != min) {\n    if (max == normR) {\n      h = 60 * (normG - normB) / (max - min);\n    } else if (max == normG) {\n      h = 60 * (normB - normR) / (max - min) + 120;\n    } else if (max == normB) {\n      h = 60 * (normR - normG) / (max - min) + 240;\n    }\n\n    if (0 < l && l <= 0.5) {\n      s = (max - min) / (2 * l);\n    } else {\n      s = (max - min) / (2 - 2 * l);\n    }\n  }\n\n  // Make sure the hue falls between 0 and 360.\n  return [Math.round(h + 360) % 360, s, l];\n};\n\n\n/**\n * Converts a color from RGB color space to HSL color space.\n * @param {goog.color.Rgb} rgb rgb representation of the color.\n * @return {!goog.color.Hsl} hsl representation of the color.\n */\ngoog.color.rgbArrayToHsl = function(rgb) {\n  return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2]);\n};\n\n\n/**\n * Helper for hslToRgb.\n * @param {number} v1 Helper variable 1.\n * @param {number} v2 Helper variable 2.\n * @param {number} vH Helper variable 3.\n * @return {number} Appropriate RGB value, given the above.\n * @private\n */\ngoog.color.hueToRgb_ = function(v1, v2, vH) {\n  if (vH < 0) {\n    vH += 1;\n  } else if (vH > 1) {\n    vH -= 1;\n  }\n  if ((6 * vH) < 1) {\n    return (v1 + (v2 - v1) * 6 * vH);\n  } else if (2 * vH < 1) {\n    return v2;\n  } else if (3 * vH < 2) {\n    return (v1 + (v2 - v1) * ((2 / 3) - vH) * 6);\n  }\n  return v1;\n};\n\n\n/**\n * Converts a color from HSL color space to RGB color space.\n * Modified from {@link http://www.easyrgb.com/math.html}\n * @param {number} h Hue, in [0, 360].\n * @param {number} s Saturation, in [0, 1].\n * @param {number} l Luminosity, in [0, 1].\n * @return {!goog.color.Rgb} rgb representation of the color.\n */\ngoog.color.hslToRgb = function(h, s, l) {\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  var normH = h / 360;  // normalize h to fall in [0, 1]\n\n  if (s == 0) {\n    r = g = b = l * 255;\n  } else {\n    var temp1 = 0;\n    var temp2 = 0;\n    if (l < 0.5) {\n      temp2 = l * (1 + s);\n    } else {\n      temp2 = l + s - (s * l);\n    }\n    temp1 = 2 * l - temp2;\n    r = 255 * goog.color.hueToRgb_(temp1, temp2, normH + (1 / 3));\n    g = 255 * goog.color.hueToRgb_(temp1, temp2, normH);\n    b = 255 * goog.color.hueToRgb_(temp1, temp2, normH - (1 / 3));\n  }\n\n  return [Math.round(r), Math.round(g), Math.round(b)];\n};\n\n\n/**\n * Converts a color from HSL color space to RGB color space.\n * @param {goog.color.Hsl} hsl hsl representation of the color.\n * @return {!goog.color.Rgb} rgb representation of the color.\n */\ngoog.color.hslArrayToRgb = function(hsl) {\n  return goog.color.hslToRgb(hsl[0], hsl[1], hsl[2]);\n};\n\n\n/**\n * Helper for isValidHexColor_.\n * @type {!RegExp}\n * @private\n */\ngoog.color.validHexColorRe_ = /^#(?:[0-9a-f]{3}){1,2}$/i;\n\n\n/**\n * Checks if a string is a valid hex color.  We expect strings of the format\n * #RRGGBB (ex: #1b3d5f) or #RGB (ex: #3CA == #33CCAA).\n * @param {string} str String to check.\n * @return {boolean} Whether the string is a valid hex color.\n * @private\n */\ngoog.color.isValidHexColor_ = function(str) {\n  return goog.color.validHexColorRe_.test(str);\n};\n\n\n/**\n * Regular expression for matching and capturing RGB style strings. Helper for\n * isValidRgbColor_.\n * @type {!RegExp}\n * @private\n */\ngoog.color.rgbColorRe_ =\n    /^(?:rgb)?\\((0|[1-9]\\d{0,2}),\\s?(0|[1-9]\\d{0,2}),\\s?(0|[1-9]\\d{0,2})\\)$/i;\n\n\n/**\n * Checks if a string is a valid rgb color.  We expect strings of the format\n * '(r, g, b)', or 'rgb(r, g, b)', where each color component is an int in\n * [0, 255].\n * @param {string} str String to check.\n * @return {!goog.color.Rgb} the rgb representation of the color if it is\n *     a valid color, or the empty array otherwise.\n * @private\n */\ngoog.color.isValidRgbColor_ = function(str) {\n  // Each component is separate (rather than using a repeater) so we can\n  // capture the match. Also, we explicitly set each component to be either 0,\n  // or start with a non-zero, to prevent octal numbers from slipping through.\n  var regExpResultArray = str.match(goog.color.rgbColorRe_);\n  if (regExpResultArray) {\n    var r = Number(regExpResultArray[1]);\n    var g = Number(regExpResultArray[2]);\n    var b = Number(regExpResultArray[3]);\n    if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {\n      return [r, g, b];\n    }\n  }\n  return [];\n};\n\n\n/**\n * Takes a hex value and prepends a zero if it's a single digit.\n * Small helper method for use by goog.color and friends.\n * @param {string} hex Hex value to prepend if single digit.\n * @return {string} hex value prepended with zero if it was single digit,\n *     otherwise the same value that was passed in.\n */\ngoog.color.prependZeroIfNecessaryHelper = function(hex) {\n  return hex.length == 1 ? '0' + hex : hex;\n};\n\n\n/**\n * Takes a string a prepends a '#' sign if one doesn't exist.\n * Small helper method for use by goog.color and friends.\n * @param {string} str String to check.\n * @return {string} The value passed in, prepended with a '#' if it didn't\n *     already have one.\n */\ngoog.color.prependHashIfNecessaryHelper = function(str) {\n  return str.charAt(0) == '#' ? str : '#' + str;\n};\n\n\n/**\n * Takes an array of [r, g, b] and converts it into a string appropriate for\n * CSS styles.\n * @param {goog.color.Rgb} rgb rgb representation of the color.\n * @return {string} string of the form 'rgb(r,g,b)'.\n * @private\n */\ngoog.color.rgbStyle_ = function(rgb) {\n  return 'rgb(' + rgb.join(',') + ')';\n};\n\n\n/**\n * Converts an HSV triplet to an RGB array.  V is brightness because b is\n *   reserved for blue in RGB.\n * @param {number} h Hue value in [0, 360].\n * @param {number} s Saturation value in [0, 1].\n * @param {number} brightness brightness in [0, 255].\n * @return {!goog.color.Rgb} rgb representation of the color.\n */\ngoog.color.hsvToRgb = function(h, s, brightness) {\n  var red = 0;\n  var green = 0;\n  var blue = 0;\n  if (s == 0) {\n    red = brightness;\n    green = brightness;\n    blue = brightness;\n  } else {\n    var sextant = Math.floor(h / 60);\n    var remainder = (h / 60) - sextant;\n    var val1 = brightness * (1 - s);\n    var val2 = brightness * (1 - (s * remainder));\n    var val3 = brightness * (1 - (s * (1 - remainder)));\n    switch (sextant) {\n      case 1:\n        red = val2;\n        green = brightness;\n        blue = val1;\n        break;\n      case 2:\n        red = val1;\n        green = brightness;\n        blue = val3;\n        break;\n      case 3:\n        red = val1;\n        green = val2;\n        blue = brightness;\n        break;\n      case 4:\n        red = val3;\n        green = val1;\n        blue = brightness;\n        break;\n      case 5:\n        red = brightness;\n        green = val1;\n        blue = val2;\n        break;\n      case 6:\n      case 0:\n        red = brightness;\n        green = val3;\n        blue = val1;\n        break;\n    }\n  }\n\n  return [Math.round(red), Math.round(green), Math.round(blue)];\n};\n\n\n/**\n * Converts from RGB values to an array of HSV values.\n * @param {number} red Red value in [0, 255].\n * @param {number} green Green value in [0, 255].\n * @param {number} blue Blue value in [0, 255].\n * @return {!goog.color.Hsv} hsv representation of the color.\n */\ngoog.color.rgbToHsv = function(red, green, blue) {\n\n  var max = Math.max(Math.max(red, green), blue);\n  var min = Math.min(Math.min(red, green), blue);\n  var hue;\n  var saturation;\n  var value = max;\n  if (min == max) {\n    hue = 0;\n    saturation = 0;\n  } else {\n    var delta = (max - min);\n    saturation = delta / max;\n\n    if (red == max) {\n      hue = (green - blue) / delta;\n    } else if (green == max) {\n      hue = 2 + ((blue - red) / delta);\n    } else {\n      hue = 4 + ((red - green) / delta);\n    }\n    hue *= 60;\n    if (hue < 0) {\n      hue += 360;\n    }\n    if (hue > 360) {\n      hue -= 360;\n    }\n  }\n\n  return [hue, saturation, value];\n};\n\n\n/**\n * Converts from an array of RGB values to an array of HSV values.\n * @param {goog.color.Rgb} rgb rgb representation of the color.\n * @return {!goog.color.Hsv} hsv representation of the color.\n */\ngoog.color.rgbArrayToHsv = function(rgb) {\n  return goog.color.rgbToHsv(rgb[0], rgb[1], rgb[2]);\n};\n\n\n/**\n * Converts an HSV triplet to an RGB array.\n * @param {goog.color.Hsv} hsv hsv representation of the color.\n * @return {!goog.color.Rgb} rgb representation of the color.\n */\ngoog.color.hsvArrayToRgb = function(hsv) {\n  return goog.color.hsvToRgb(hsv[0], hsv[1], hsv[2]);\n};\n\n\n/**\n * Converts a hex representation of a color to HSL.\n * @param {string} hex Color to convert.\n * @return {!goog.color.Hsl} hsl representation of the color.\n */\ngoog.color.hexToHsl = function(hex) {\n  var rgb = goog.color.hexToRgb(hex);\n  return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2]);\n};\n\n\n/**\n * Converts from h,s,l values to a hex string\n * @param {number} h Hue, in [0, 360].\n * @param {number} s Saturation, in [0, 1].\n * @param {number} l Luminosity, in [0, 1].\n * @return {string} hex representation of the color.\n */\ngoog.color.hslToHex = function(h, s, l) {\n  return goog.color.rgbArrayToHex(goog.color.hslToRgb(h, s, l));\n};\n\n\n/**\n * Converts from an hsl array to a hex string\n * @param {goog.color.Hsl} hsl hsl representation of the color.\n * @return {string} hex representation of the color.\n */\ngoog.color.hslArrayToHex = function(hsl) {\n  return goog.color.rgbArrayToHex(goog.color.hslToRgb(hsl[0], hsl[1], hsl[2]));\n};\n\n\n/**\n * Converts a hex representation of a color to HSV\n * @param {string} hex Color to convert.\n * @return {!goog.color.Hsv} hsv representation of the color.\n */\ngoog.color.hexToHsv = function(hex) {\n  return goog.color.rgbArrayToHsv(goog.color.hexToRgb(hex));\n};\n\n\n/**\n * Converts from h,s,v values to a hex string\n * @param {number} h Hue, in [0, 360].\n * @param {number} s Saturation, in [0, 1].\n * @param {number} v Value, in [0, 255].\n * @return {string} hex representation of the color.\n */\ngoog.color.hsvToHex = function(h, s, v) {\n  return goog.color.rgbArrayToHex(goog.color.hsvToRgb(h, s, v));\n};\n\n\n/**\n * Converts from an HSV array to a hex string\n * @param {goog.color.Hsv} hsv hsv representation of the color.\n * @return {string} hex representation of the color.\n */\ngoog.color.hsvArrayToHex = function(hsv) {\n  return goog.color.hsvToHex(hsv[0], hsv[1], hsv[2]);\n};\n\n\n/**\n * Calculates the Euclidean distance between two color vectors on an HSL sphere.\n * A demo of the sphere can be found at:\n * http://en.wikipedia.org/wiki/HSL_color_space\n * In short, a vector for color (H, S, L) in this system can be expressed as\n * (S*L'*cos(2*PI*H), S*L'*sin(2*PI*H), L), where L' = abs(L - 0.5), and we\n * simply calculate the 1-2 distance using these coordinates\n * @param {goog.color.Hsl} hsl1 First color in hsl representation.\n * @param {goog.color.Hsl} hsl2 Second color in hsl representation.\n * @return {number} Distance between the two colors, in the range [0, 1].\n */\ngoog.color.hslDistance = function(hsl1, hsl2) {\n  var sl1, sl2;\n  if (hsl1[2] <= 0.5) {\n    sl1 = hsl1[1] * hsl1[2];\n  } else {\n    sl1 = hsl1[1] * (1.0 - hsl1[2]);\n  }\n\n  if (hsl2[2] <= 0.5) {\n    sl2 = hsl2[1] * hsl2[2];\n  } else {\n    sl2 = hsl2[1] * (1.0 - hsl2[2]);\n  }\n\n  var h1 = hsl1[0] / 360.0;\n  var h2 = hsl2[0] / 360.0;\n  var dh = (h1 - h2) * 2.0 * Math.PI;\n  return (hsl1[2] - hsl2[2]) * (hsl1[2] - hsl2[2]) + sl1 * sl1 + sl2 * sl2 -\n      2 * sl1 * sl2 * Math.cos(dh);\n};\n\n\n/**\n * Blend two colors together, using the specified factor to indicate the weight\n * given to the first color\n * @param {goog.color.Rgb} rgb1 First color represented in rgb.\n * @param {goog.color.Rgb} rgb2 Second color represented in rgb.\n * @param {number} factor The weight to be given to rgb1 over rgb2. Values\n *     should be in the range [0, 1]. If less than 0, factor will be set to 0.\n *     If greater than 1, factor will be set to 1.\n * @return {!goog.color.Rgb} Combined color represented in rgb.\n */\ngoog.color.blend = function(rgb1, rgb2, factor) {\n  factor = goog.math.clamp(factor, 0, 1);\n\n  return [\n    Math.round(rgb2[0] + factor * (rgb1[0] - rgb2[0])),\n    Math.round(rgb2[1] + factor * (rgb1[1] - rgb2[1])),\n    Math.round(rgb2[2] + factor * (rgb1[2] - rgb2[2]))\n  ];\n};\n\n\n/**\n * Adds black to the specified color, darkening it\n * @param {goog.color.Rgb} rgb rgb representation of the color.\n * @param {number} factor Number in the range [0, 1]. 0 will do nothing, while\n *     1 will return black. If less than 0, factor will be set to 0. If greater\n *     than 1, factor will be set to 1.\n * @return {!goog.color.Rgb} Combined rgb color.\n */\ngoog.color.darken = function(rgb, factor) {\n  var black = [0, 0, 0];\n  return goog.color.blend(black, rgb, factor);\n};\n\n\n/**\n * Adds white to the specified color, lightening it\n * @param {goog.color.Rgb} rgb rgb representation of the color.\n * @param {number} factor Number in the range [0, 1].  0 will do nothing, while\n *     1 will return white. If less than 0, factor will be set to 0. If greater\n *     than 1, factor will be set to 1.\n * @return {!goog.color.Rgb} Combined rgb color.\n */\ngoog.color.lighten = function(rgb, factor) {\n  var white = [255, 255, 255];\n  return goog.color.blend(white, rgb, factor);\n};\n\n\n/**\n * Find the \"best\" (highest-contrast) of the suggested colors for the prime\n * color. Uses W3C formula for judging readability and visual accessibility:\n * http://www.w3.org/TR/AERT#color-contrast\n * @param {goog.color.Rgb} prime Color represented as a rgb array.\n * @param {Array<goog.color.Rgb>} suggestions Array of colors,\n *     each representing a rgb array.\n * @return {!goog.color.Rgb} Highest-contrast color represented by an array..\n */\ngoog.color.highContrast = function(prime, suggestions) {\n  var suggestionsWithDiff = [];\n  for (var i = 0; i < suggestions.length; i++) {\n    suggestionsWithDiff.push({\n      color: suggestions[i],\n      diff: goog.color.yiqBrightnessDiff_(suggestions[i], prime) +\n          goog.color.colorDiff_(suggestions[i], prime)\n    });\n  }\n  suggestionsWithDiff.sort(function(a, b) { return b.diff - a.diff; });\n  return suggestionsWithDiff[0].color;\n};\n\n\n/**\n * Calculate brightness of a color according to YIQ formula (brightness is Y).\n * More info on YIQ here: http://en.wikipedia.org/wiki/YIQ. Helper method for\n * goog.color.highContrast()\n * @param {goog.color.Rgb} rgb Color represented by a rgb array.\n * @return {number} brightness (Y).\n * @private\n */\ngoog.color.yiqBrightness_ = function(rgb) {\n  return Math.round((rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000);\n};\n\n\n/**\n * Calculate difference in brightness of two colors. Helper method for\n * goog.color.highContrast()\n * @param {goog.color.Rgb} rgb1 Color represented by a rgb array.\n * @param {goog.color.Rgb} rgb2 Color represented by a rgb array.\n * @return {number} Brightness difference.\n * @private\n */\ngoog.color.yiqBrightnessDiff_ = function(rgb1, rgb2) {\n  return Math.abs(\n      goog.color.yiqBrightness_(rgb1) - goog.color.yiqBrightness_(rgb2));\n};\n\n\n/**\n * Calculate color difference between two colors. Helper method for\n * goog.color.highContrast()\n * @param {goog.color.Rgb} rgb1 Color represented by a rgb array.\n * @param {goog.color.Rgb} rgb2 Color represented by a rgb array.\n * @return {number} Color difference.\n * @private\n */\ngoog.color.colorDiff_ = function(rgb1, rgb2) {\n  return Math.abs(rgb1[0] - rgb2[0]) + Math.abs(rgb1[1] - rgb2[1]) +\n      Math.abs(rgb1[2] - rgb2[2]);\n};\n"],
"names":["goog","provide","require","color","Rgb","Hsv","Hsl","parse","goog.color.parse","str","result","String","maybeHex","prependHashIfNecessaryHelper","isValidHexColor_","hex","normalizeHex","type","rgb","isValidRgbColor_","length","rgbArrayToHex","names","toLowerCase","Error","isValidColor","goog.color.isValidColor","parseRgb","goog.color.parseRgb","hexToRgbStyle","goog.color.hexToRgbStyle","hexColor","rgbStyle_","hexToRgb","hexTripletRe_","goog.color.normalizeHex","replace","goog.color.hexToRgb","parseInt","substr","r","g","b","rgbToHex","goog.color.rgbToHex","Number","toString","goog.color.rgbArrayToHex","rgbToHsl","goog.color.rgbToHsl","normR","normG","normB","max","Math","min","h","s","l","round","rgbArrayToHsl","goog.color.rgbArrayToHsl","hueToRgb_","goog.color.hueToRgb_","v1","v2","vH","hslToRgb","goog.color.hslToRgb","normH","temp1","temp2","hslArrayToRgb","goog.color.hslArrayToRgb","hsl","validHexColorRe_","goog.color.isValidHexColor_","test","rgbColorRe_","goog.color.isValidRgbColor_","regExpResultArray","match","prependZeroIfNecessaryHelper","goog.color.prependZeroIfNecessaryHelper","goog.color.prependHashIfNecessaryHelper","charAt","goog.color.rgbStyle_","join","hsvToRgb","goog.color.hsvToRgb","brightness","red","green","blue","sextant","floor","remainder","val1","val2","val3","rgbToHsv","goog.color.rgbToHsv","hue","saturation","value","delta","rgbArrayToHsv","goog.color.rgbArrayToHsv","hsvArrayToRgb","goog.color.hsvArrayToRgb","hsv","hexToHsl","goog.color.hexToHsl","hslToHex","goog.color.hslToHex","hslArrayToHex","goog.color.hslArrayToHex","hexToHsv","goog.color.hexToHsv","hsvToHex","goog.color.hsvToHex","v","hsvArrayToHex","goog.color.hsvArrayToHex","hslDistance","goog.color.hslDistance","hsl1","hsl2","sl1","sl2","h1","h2","dh","PI","cos","blend","goog.color.blend","rgb1","rgb2","factor","math","clamp","darken","goog.color.darken","black","lighten","goog.color.lighten","white","highContrast","goog.color.highContrast","prime","suggestions","suggestionsWithDiff","i","push","diff","yiqBrightnessDiff_","colorDiff_","sort","a","yiqBrightness_","goog.color.yiqBrightness_","goog.color.yiqBrightnessDiff_","abs","goog.color.colorDiff_"]
}
