{"version":3,"sources":["hackernews_reframe/views.cljs"],"mappings":"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","names":["hackernews-reframe.views/main-link","main","map__64128","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","cljs.core/deref","p1__64127#","description","postedBy","votes","comments","createdAt","id","url","order","error","G__64130","re-frame.core/dispatch","hackernews_reframe.routes.hn_user","hackernews_reframe.routes.hn_comment","G__64131","re-frame.core/subscribe","G__64132","G__64133","hackernews-reframe.views/answer-comment","comment","map__64135","p1__64134#","linkId","linkText","text","G__64143","G__64144","G__64145","G__64146","hackernews-reframe.views/answer-comment-panel","G__64147","hackernews-reframe.views/comment-row","comment-id","posted-by","date","lvl","username","G__64193","delete?","cljs.core._EQ_","G__64195","edit?","G__64200","hackernews_reframe.routes.reply_comment","hackernews-reframe.views/list-update-in","l","i","x","newlist","cljs.core.take","cljs.core.concat","cljs.core/List","cljs.core.drop","hackernews-reframe.views/post-row","post-id","title","points","comments-count","created-at","G__64208","G__64211","hackernews-reframe.views/insert-index","v","e","cljs.core/vec","cljs.core.subvec","hackernews-reframe.views/remove-by-index","hackernews-reframe.views/organize-print-comments-linear-second-step","a","m","cljs.core/count","f","depth","added","missing","cljs.core.nth","hackernews-reframe.views/organize-print-comments-linear","father","cljs.core.conj","cljs.core/empty?","hackernews-reframe.views/comment-panel","comment-list","G__64256","G__64257","main-father-id","counter","iter__4529__auto__","s__64262","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__64264","cljs.core/chunk-buffer","i__64263","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__64261","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","hackernews-reframe.views/extract-news-panel","item","map__64273","postedby","createdat","hackernews-reframe.views/news-panel","news-list","G__64275","s__64277","b__64279","i__64278","iter__64276","p1__64280#","p1__64281#","hackernews-reframe.views/login-panel","G__64282","G__64283","G__64284","G__64285","G__64286","login-error","G__64287","p1__64288#","p1__64289#","hackernews-reframe.views/post-panel","G__64290","G__64291","G__64292","G__64293","non-nil","G__64294","usr","G__64295","or__4126__auto__","G__64296","hackernews-reframe.views/past-panel","p1__64297#","p1__64298#","p1__64299#","p1__64300#","hackernews-reframe.views/sign-panel","G__64301","G__64302","G__64303","G__64304","G__64305","G__64306","G__64307","G__64308","equal","G__64309","not-nil","G__64310","and__4115__auto__","G__64311","G__64312","hackernews-reframe.views/avoid-null","hackernews-reframe.views/generic-user-panel","G__64313","karma","G__64314","created","G__64315","hackernews_reframe.routes.user_posts","hackernews_reframe.routes.user_comments","hackernews-reframe.views/user-panel","G__64316","email-user","G__64317","G__64318","G__64319","hackernews-reframe.views/panels","panel-name","G__64320","cljs.core/Keyword","hackernews-reframe.views/show-panel","hackernews-reframe.views/main-panel","hackernews-reframe.routes/home","hackernews-reframe.routes/submit","is-logged-in","G__64321","hackernews-reframe.routes/sign","hackernews-reframe.routes/login","hackernews-reframe.routes/user","G__64322","active-panel","G__64323","cljs.core/chunk-first"],"sourcesContent":["(ns hackernews-reframe.views\n  (:require\n    [reagent.core :as reagent]\n    [re-frame.core :as re-frame]\n    [hackernews-reframe.subs :as subs]\n    [hackernews-reframe.events :as events]\n    [hackernews-reframe.routes :as routes]))\n\n(defn- main-link [main]\n  (let [{description :description\n         postedBy    :postedBy\n         votes       :votes\n         comments    :comments\n         createdAt   :createdAt\n         id          :id\n         url         :url\n         order       :order\n         error       :error} main]\n    ^{:key id} [:article.media\n                [:figure.media-left\n                 [:a.like-dislike\n                  {:on-click #(re-frame/dispatch [::events/vote id])}\n                  [:i.fas.fa-arrow-up]]]\n                [:div.media-content\n                 [:div#small-content.content\n                  [:p [:a {:href url} [:strong description]]]]\n                 [:nav.level.is-mobile\n                  [:div.content\n                   [:small \" \" votes \" points by \"] [:small [:a {:href (routes/hn-user {:name postedBy})} postedBy]] [:small \" created at \" createdAt]\n                   [:a {:href (routes/hn-comment {:father id})} [:small \" \" comments \" comments\"]]\n                   [:div.control\n                    [:textarea.textarea.is-info {:rows      3\n                                                 :value     @(re-frame/subscribe [::subs/new-comment])\n                                                 :on-change #(re-frame/dispatch [::events/new-comment (-> % .-target .-value)])}]\n                    [:button.button.button-spacer {:on-click #(re-frame/dispatch [::events/post-comment])} \"Post comment\"]]]]]]))\n\n(defn- answer-comment [comment]\n  (let [{id        :id\n         linkId    :linkId\n         linkText  :linkText\n         postedBy  :postedBy\n         text      :text\n         createdAt :createdAt\n         } comment]\n    [:article.media\n     [:figure.media-left\n      [:a.like-dislike\n       {:on-click #(re-frame/dispatch [::events/vote id])}\n       [:i.fas.fa-arrow-up]]]\n     [:div.media-content\n      [:div#small-content.content\n       [:small [:a {:href (routes/hn-user {:name postedBy})} postedBy]] [:small \" posted at \" createdAt] [:small \" | on: \" [:a {:href (routes/hn-comment {:father linkId})} linkText] \"\"]\n       [:p [:strong text]]]\n      [:nav.level.is-mobile\n       [:div.content\n        [:a {:href (routes/hn-comment {:father id})}]\n        [:div.control\n         [:textarea.textarea.is-info {:rows      3\n                                      :value     @(re-frame/subscribe [::subs/new-comment])\n                                      :on-change #(re-frame/dispatch [::events/new-comment (-> % .-target .-value)])}]\n         [:button.button.button-spacer {:on-click #(re-frame/dispatch [::events/post-comment])} \"Post comment\"]]]]]]))\n\n(defn answer-comment-panel []\n  (let [comment @(re-frame/subscribe [::subs/reply-comment])]\n    [:div.container-fluid\n     (if-not (nil? comment)\n       (answer-comment comment))]))\n\n(defn- comment-row [comment-id posted-by comment date votes lvl]\n  (let [username @(re-frame/subscribe [::subs/username])\n        delete? (if (= posted-by username)\n                  [:small \" - \" [:a {:on-click #(re-frame/dispatch [::events/delete-comment comment-id])} \"delete\"]]\n                  \"\")\n        edit? (if (= posted-by username)\n                [:small \" - \" [:a \"edit\"]]\n                \"\")]\n    ^{:key comment-id} [:article.media {:style {:padding-left (str (* lvl 0.2) \"rem\")}}\n                        [:figure.media-left\n                         [:a.like-dislike\n                          {:on-click #(re-frame/dispatch [::events/vote-comment comment-id])}\n                          [:i.fas.fa-arrow-up]]]\n                        [:div.media-content\n                         [:div#small-content.content\n                          [:p [:small \"posted by \"] [:a {:href (routes/hn-user {:name posted-by})} posted-by]\n                           [:small \" created at \" date]\n                           [:small \" - votes \" votes]\n                           delete?\n                           edit?\n                           ]]\n                         [:p [:span comment]]\n                         [:span [:a {:href (routes/reply-comment {:comment comment-id})} [:small \"reply\"]]]]]))\n\n(defn- list-update-in [l i x]\n  (let [newlist (take i l)\n        newlist (concat newlist (list x))\n        newlist (concat newlist (drop (+ 1 i) l))]\n    newlist))\n\n(defn- post-row [post-id title posted-by points comments-count created-at url]\n  ^{:key post-id} [:article.media\n                   [:figure.media-left\n                    [:a.like-dislike\n                     {:on-click #(re-frame/dispatch [::events/vote post-id])}\n                     [:i.fas.fa-arrow-up]]]\n                   [:div.media-content\n                    [:div#small-content.content\n                     [:p\n                      [:small \" \" points \" points by \"] [:a {:href (routes/hn-user {:name posted-by})} posted-by] [:small \" created at \" created-at]\n                      [:br] [:a {:href url} [:strong title]]]]\n                    [:nav.level.is-mobile\n                     [:div.level-left\n                      [:a.level-item {:on-click #(re-frame/dispatch [::events/remove-view post-id])} [:small \"hide\"]]\n                      [:a.level-item {:href (routes/hn-comment {:father post-id})} [:small \" \" comments-count \" comments\"]]]]]])\n\n(defn- insert-index [v i e]\n  (vec (concat (subvec v 0 i) [e] (subvec v i))))\n\n(defn- remove-by-index [v i]\n  (vec (concat (subvec v 0 i) (subvec v (inc i)))))\n\n(defn- organize-print-comments-linear-second-step [a m]\n  (loop [i (dec (count m))\n         f 0\n         depth 1\n         added a\n         missing m]\n    (if (< 0 i)\n      (if (= (:father (nth missing i)) (:id (nth added f)))\n        (recur (dec i) f depth (insert-index added (inc f) {:id  (:id (nth missing i))\n                                                                  :row (comment-row (:id (nth missing i))\n                                                                                    (:postedBy (nth missing i))\n                                                                                    (:text (nth missing i))\n                                                                                    (:createdAt (nth missing i))\n                                                                                    (:votes (nth missing i))\n                                                                                    (* depth 3))}) (remove-by-index missing i))\n        (recur (dec i) f depth added missing))\n      (if (> (dec (count added)) f)\n        (recur (dec (count missing)) (inc f) (inc depth) added missing)\n        added))))\n\n(defn- organize-print-comments-linear [comments father]\n  (loop [i (dec (count comments))\n         missing []\n         added []]\n    (if (< 0 i)\n      (if (= father (:father (nth comments i)))\n        (recur (dec i) missing (conj added {:id  (:id (nth comments i))\n                                            :row (comment-row (:id (nth comments i))\n                                                              (:postedBy (nth comments i))\n                                                              (:text (nth comments i))\n                                                              (:createdAt (nth comments i))\n                                                              (:votes (nth comments i))\n                                                              0)}))\n        (recur (dec i) (conj missing (nth comments i)) added))\n      (if (empty? missing)\n        added\n        (organize-print-comments-linear-second-step added missing)))))\n\n(defn comment-panel []\n  (let [comment-list @(re-frame/subscribe [::subs/comments-list])\n        main @(re-frame/subscribe [::subs/comment-father])\n        main-father-id (:id main)]\n    [:div.container-fluid\n     (if-not (nil? main) (main-link main))\n     (if (and (not (nil? main-father-id)) (not (empty? comment-list)))\n       (let [comments (organize-print-comments-linear comment-list main-father-id)\n             counter (count comments)]\n         (for [i (range counter)]\n           (:row (nth comments i)))))]))\n\n(defn- extract-news-panel [item]\n  (let [{description :description\n         postedby    :postedBy\n         votes       :votes\n         comments    :comments\n         createdat   :createdAt\n         id          :id\n         url         :url} item]\n    (post-row id description postedby votes comments createdat url)))\n\n(defn news-panel []\n  (let [news-list @(re-frame/subscribe [::subs/news-list])]\n    [:div.container-fluid\n     (for [i (range (count news-list))]\n       (extract-news-panel (nth news-list i)))]))\n\n(defn login-panel []\n  [:div.container\n   [:div.columns.is-centered\n    [:div.field.column.is-4\n     [:label.label \"Username\"]\n     [:p.control.has-icons-left\n      [:div.control\n       [:input.input {:type        \"text\"\n                      :placeholder \"Username\"\n                      :value       @(re-frame/subscribe [::subs/email])\n                      :on-change   #(re-frame/dispatch [::events/change-email (-> % .-target .-value)])}]]\n      [:span.icon.is-small.is-left\n       [:i.fas.fa-user]]]]\n    [:div.field.column.is-4\n     [:label.label \"Password\"]\n     [:p.control.has-icons-left\n      [:div.control\n       [:input.input {:type        \"password\"\n                      :placeholder \"Password\"\n                      :value       @(re-frame/subscribe [::subs/pwd])\n                      :on-change   #(re-frame/dispatch [::events/change-pwd (-> % .-target .-value)])}]]\n      [:span.icon.is-small.is-left\n       [:i.fas.fa-lock]]]]]\n   [:div.columns.is-centered\n    [:div.field.is-grouped\n     [:div.control\n      [:button.button.is-success\n       {:on-click #(re-frame/dispatch [::events/login])} \"Login\"]]\n     [:div.control\n      [:button.button.is-light \"Forgot Password\"]]]]\n   (let [login-error @(re-frame/subscribe [::subs/login-error])]\n     (if-not (nil? login-error)\n       [:div.columns.is-centered.space-left [:span [:strong login-error]]]))])\n\n(defn post-panel []\n  [:div.container\n   [:div.field\n    [:label.label \"Title\"]\n    [:div.control\n     [:input.input {:type        \"text\"\n                    :placeholder \"Post Title\"\n                    :value       @(re-frame/subscribe [::subs/new-title])\n                    :on-change   #(re-frame/dispatch [::events/change-new-title (-> % .-target .-value)])}]]]\n   [:div.field\n    [:label.label \"URL\"]\n    [:div.control\n     [:input.input {:type        \"text\"\n                    :placeholder \"Article HTTPS URL\"\n                    :value       @(re-frame/subscribe [::subs/new-url])\n                    :on-change   #(re-frame/dispatch [::events/change-new-url (-> % .-target .-value)])}]]]\n   [:div.field\n    [:div.control\n     (let [non-nil @(re-frame/subscribe [::subs/non-nil-url-subs])\n           usr (nil? @(re-frame/subscribe [::subs/username]))]\n       (if (or non-nil usr)\n         [:button.button.is-danger \"Submit\"]\n         [:button.button.is-success\n          {:on-click #(re-frame/dispatch [::events/submit-post])}\n          \"Submit\"]))]]])\n\n(defn past-panel []\n  [:div.container-fluid\n   [:div.columns.is-centered.space-left\n    [:div.field.column.is-3\n     [:label.label \"Date\"]\n     [:div.field.has-addons\n      [:p.control.has-icons-left\n       [:div.control\n        [:input.input {:type \"date\"}]]\n       [:span.icon.is-small.is-left\n        [:i.fas.fa-calendar]]]\n      [:div.control\n       [:a.button.is-info \"Search\"]]]]\n    [:div.field.column.is-3\n     [:label.label \"Keyword\"]\n     [:div.field.has-addons\n      [:p.control.has-icons-left\n       [:div.control\n        [:input.input {:type \"text\" :placeholder \"Search Keyword\"}]]\n       [:span.icon.is-small.is-left\n        [:i.fas.fa-search]]]\n      [:div.control\n       [:a.button.is-info \"Search\"]]]]]])\n\n(defn sign-panel []\n  [:div.container\n   [:div.columns.is-centered\n    [:div.field.column.is-4\n     [:label.label \"Username\"]\n     [:p.control.has-icons-left\n      [:div.control\n       [:input.input {:type        \"text\"\n                      :placeholder \"Username\"\n                      :value       @(re-frame/subscribe [::subs/new-usr])\n                      :on-change   #(re-frame/dispatch [::events/change-new-usr (-> % .-target .-value)])\n                      }]]\n      [:span.icon.is-small.is-left\n       [:i.fas.fa-user]]]]\n    [:div.field.column.is-4\n     [:label.label \"Email\"]\n     [:p.control.has-icons-left\n      [:div.control\n       [:input.input {:type        \"text\"\n                      :placeholder \"Email\"\n                      :value       @(re-frame/subscribe [::subs/new-email])\n                      :on-change   #(re-frame/dispatch [::events/change-new-email (-> % .-target .-value)])\n                      }]]\n      [:span.icon.is-small.is-left\n       [:i.fas.fa-envelope]]]]]\n   [:div.columns.is-centered\n    [:div.field.column.is-4\n     [:label.label \"Password\"]\n     [:p.control.has-icons-left\n      [:div.control\n       [:input.input {:type        \"password\"\n                      :placeholder \"Password\"\n                      :value       @(re-frame/subscribe [::subs/new-pwd])\n                      :on-change   #(re-frame/dispatch [::events/change-new-pwd (-> % .-target .-value)])\n                      }]]\n      [:span.icon.is-small.is-left\n       [:i.fas.fa-lock]]]]\n    [:div.field.column.is-4\n     [:label.label \"Confirm Password\"]\n     [:p.control.has-icons-left\n      [:div.control\n       [:input.input {:type        \"password\"\n                      :placeholder \"Password\"\n                      :value       @(re-frame/subscribe [::subs/pwd-new-conf])\n                      :on-change   #(re-frame/dispatch [::events/change-new-pwd-conf (-> % .-target .-value)])}]]\n      [:span.icon.is-small.is-left\n       [:i.fas.fa-lock]]]]]\n   [:div.columns.is-centered\n    [:div.field.column.is-1\n     [:div.control\n      (let [equal @(re-frame/subscribe [::subs/confirm-pwd])\n            not-nil (nil? @(re-frame/subscribe [::subs/new-pwd]))]\n        (if (and equal (not not-nil))\n          [:button.button.is-success.login-btn\n           {:on-click #(re-frame/dispatch [::events/sign])}\n           \"Create User\"]\n          [:button.button.is-danger.login-btn \"Create User\"]\n          ))]]]\n\n   (let [login-error @(re-frame/subscribe [::subs/signup-error])]\n     (if-not (nil? login-error)\n       [:div.columns.is-centered.space-left [:span [:strong login-error]]]))])\n\n(defn- avoid-null [x]\n  (if (nil? x)\n    \"\"\n    x))\n\n(defn generic-user-panel []\n  (let [username (avoid-null @(re-frame/subscribe [::subs/username-generic]))\n        karma (avoid-null @(re-frame/subscribe [::subs/karma-generic]))\n        created (avoid-null @(re-frame/subscribe [::subs/created-at-generic]))]\n    [:div.container-fluid\n     [:div.columns.space-left\n      [:div.column.is-2.column-text\n       [:label.label \"Username\"]]\n      [:div.column.is-3.column-text\n       [:input.input {:type     \"text\"\n                      :readOnly true\n                      :value    username}]]]\n\n     [:div.columns.space-left\n      [:div.column.is-2.column-text\n       [:label.label \"Created At\"]]\n      [:div.column.is-2.column-text\n       [:input.input {:type     \"text\"\n                      :readOnly true\n                      :value    created}]]]\n\n     [:div.columns.space-left\n      [:div.column.is-2.column-text\n       [:label.label \"Karma\"]]\n      [:div.column.is-2.column-text\n       [:input.input {:type     \"text\"\n                      :readOnly true\n                      :value    karma}]]]\n\n     [:div.columns.is-centered.space-left\n      [:div.column.is-2\n       [:a {:href (routes/user-posts {:user username})}\n        [:button.button\n         [:small \"Posts\"]]]]\n      [:div.column.is-2\n       [:a\n        {:href (routes/user-comments {:user username})}\n        [:button.button\n         [:small \"Comments\"]]]]]]))\n\n(defn user-panel []\n  (let [username (avoid-null @(re-frame/subscribe [::subs/username]))\n        email-user (avoid-null @(re-frame/subscribe [::subs/email-user]))\n        karma (avoid-null @(re-frame/subscribe [::subs/karma-user]))\n        created (avoid-null @(re-frame/subscribe [::subs/created-at-user]))]\n    [:div.container-fluid\n     [:div.columns.space-left\n      [:div.column.is-2.column-text\n       [:label.label \"Username\"]]\n      [:div.column.is-3.column-text\n       [:input.input {:type     \"text\"\n                      :readOnly true\n                      :value    username}]]]\n\n     [:div.columns.space-left\n      [:div.column.is-2.column-text\n       [:label.label \"E-Mail\"]]\n      [:div.column.is-3.column-text\n       [:input.input {:type     \"text\"\n                      :readOnly true\n                      :value    email-user}]]]\n\n     [:div.columns.space-left\n      [:div.column.is-2.column-text\n       [:label.label \"Created At\"]]\n      [:div.column.is-2.column-text\n       [:input.input {:type     \"text\"\n                      :readOnly true\n                      :value    created}]]]\n\n     [:div.columns.space-left\n      [:div.column.is-2.column-text\n       [:label.label \"Karma\"]]\n      [:div.column.is-2.column-text\n       [:input.input {:type     \"text\"\n                      :readOnly true\n                      :value    karma}]]]\n\n     [:div.columns.is-centered.space-left\n      [:div.column.is-2\n       [:a {:href (routes/user-posts {:user username})}\n        [:button.button\n         [:small \"Posts\"]]]]\n      [:div.column.is-2\n       [:a\n        {:href (routes/user-comments {:user username})}\n        [:button.button\n         [:small \"Comments\"]]]]]]))\n\n(defn- panels [panel-name]\n  (case panel-name\n    :news-panel [news-panel]\n    :login-panel [login-panel]\n    :post-panel [post-panel]\n    :past-panel [past-panel]\n    :sign-panel [sign-panel]\n    :comment-panel [comment-panel]\n    :answer-comment-panel [answer-comment-panel]\n    :user-panel [user-panel]\n    :generic-user-panel [generic-user-panel]\n    [:div]))\n\n(defn show-panel [panel-name]\n  [panels panel-name])\n\n(defn main-panel []\n  [:div.container-fluid\n   [:nav#main-nav.navbar.item-a {:role \"navigation\" :aria-label \"main navigation\"}\n    [:div.navbar-brand\n     [:a.navbar-item {:href (routes/home)}\n      [:i#h-n.fab.fa-hacker-news]]\n     [:a.navbar-burger.burger {:role \"button\" :aria-label \"menu\" :aria-expanded \"false\" :data-target \"navbarBasicExample\"}\n      [:span {:aria-hidden \"true\"}]\n      [:span {:aria-hidden \"true\"}]\n      [:span {:aria-hidden \"true\"}]]]\n    [:div#navbarBasicExample.navbar-menu\n     [:div.navbar-start\n      [:a.navbar-item {:href (routes/home)} \"News\"]\n      [:a.navbar-item {:href (routes/submit)} \"Submit\"]]\n     [:div.navbar-end\n      [:div.navbar-item\n       (let [is-logged-in @(re-frame/subscribe [::subs/username])]\n         (if (nil? is-logged-in)\n           [:div.buttons\n            [:a.button {:href (routes/sign)} \"Sign up\"]\n            [:a.button {:href (routes/login)} \"Log in\"]]\n           [:div.buttons\n            [:a.navbar-item {:href (routes/user)} is-logged-in]\n            [:a.navbar-item {:href     (routes/home)\n                             :on-click #(re-frame/dispatch [::events/logout])} \"logout\"]]))]]]]\n   (let [active-panel (re-frame/subscribe [::subs/active-panel])]\n     [show-panel @active-panel])\n   [:footer.footer.is-fixed-bottom\n    [:div.content.has-text-centered\n     [:p \"This is a Hacker News homage with Lacinia Pedestal and Re-Frame.\"]\n     [:p \"For info check the Github Project, \" [:a {:target \"_blank\" :href \"https://github.com/giovanialtelino/hackernews-reframe\"} \"front-end\"] \" and \" [:a {:target \"_blank\" :href \"https://github.com/giovanialtelino/hackernews-lacinia-datomic\"} \"back-end\"] \".\"]]]])\n\n"]}