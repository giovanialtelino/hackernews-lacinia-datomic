["^ ","~:output",["^ ","~:js","goog.provide('zprint.zprint');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ngoog.require('zprint.finish');\ngoog.require('zprint.zfns');\ngoog.require('zprint.ansi');\ngoog.require('zprint.config');\ngoog.require('zprint.zutil');\ngoog.require('rewrite_clj.parser');\ngoog.require('rewrite_clj.zip');\n/**\n * Produce a blank string of desired size.\n */\nzprint.zprint.blanks = (function zprint$zprint$blanks(n){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(n,\" \"));\n});\n/**\n * Produce a dot string of desired size.\n */\nzprint.zprint.dots = (function zprint$zprint$dots(n){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(n,\".\"));\n});\n/**\n * Make a version of conj! that take multiple arguments.\n */\nzprint.zprint.conj_it_BANG_ = (function zprint$zprint$conj_it_BANG_(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___52089 = arguments.length;\nvar i__4737__auto___52090 = (0);\nwhile(true){\nif((i__4737__auto___52090 < len__4736__auto___52089)){\nargs__4742__auto__.push((arguments[i__4737__auto___52090]));\n\nvar G__52091 = (i__4737__auto___52090 + (1));\ni__4737__auto___52090 = G__52091;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (rest){\nvar out = cljs.core.first(rest);\nvar more = cljs.core.next(rest);\nwhile(true){\nif(more){\nvar G__52092 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,cljs.core.first(more));\nvar G__52093 = cljs.core.next(more);\nout = G__52092;\nmore = G__52093;\ncontinue;\n} else {\nreturn out;\n}\nbreak;\n}\n}));\n\n(zprint.zprint.conj_it_BANG_.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(zprint.zprint.conj_it_BANG_.cljs$lang$applyTo = (function (seq51305){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq51305));\n}));\n\n/**\n * Do split for newlines, instead of using regular expressions.\n */\nzprint.zprint.split_lf = (function zprint$zprint$split_lf(s){\nvar input = s;\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.not(input)){\nreturn out;\n} else {\nvar next_lf = clojure.string.index_of.cljs$core$IFn$_invoke$arity$2(input,\"\\n\");\nvar chunk = (cljs.core.truth_(next_lf)?cljs.core.subs.cljs$core$IFn$_invoke$arity$3(input,(0),next_lf):input);\nvar G__52094 = (cljs.core.truth_(next_lf)?cljs.core.subs.cljs$core$IFn$_invoke$arity$2(input,(next_lf + (1))):null);\nvar G__52095 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,chunk);\ninput = G__52094;\nout = G__52095;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Do split for newlines, instead of using regular expressions.\n *   Maximum split is 2.\n */\nzprint.zprint.split_lf_2 = (function zprint$zprint$split_lf_2(s){\nvar temp__5733__auto__ = clojure.string.index_of.cljs$core$IFn$_invoke$arity$2(s,\"\\n\");\nif(cljs.core.truth_(temp__5733__auto__)){\nvar next_lf = temp__5733__auto__;\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.cljs$core$IFn$_invoke$arity$3(s,(0),next_lf),cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s,(next_lf + (1)))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);\n}\n});\nzprint.zprint.zpmap = (function zprint$zprint$zpmap(var_args){\nvar G__51316 = arguments.length;\nswitch (G__51316) {\ncase 3:\nreturn zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$3 = (function (options,f,coll){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(f,coll);\n}));\n\n(zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$4 = (function (options,f,coll1,coll2){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$3(f,coll1,coll2);\n}));\n\n(zprint.zprint.zpmap.cljs$lang$maxFixedArity = 4);\n\n/**\n * Takes an option map and the return from zfuture.  If the\n *   options map has (:parallel? options) as true, then deref\n *   the value, otherwise just pass it through.\n */\nzprint.zprint.zat = (function zprint$zprint$zat(options,value){\nreturn value;\n});\nzprint.zprint.fzprint_dbg = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\n/**\n * Accept a style-vec that we are about to hand to style-lines, and\n *   output it if called for, to aid in debugging.\n */\nzprint.zprint.log_lines = (function zprint$zprint$log_lines(p__51320,dbg_output,ind,style_vec){\nvar map__51321 = p__51320;\nvar map__51321__$1 = (((((!((map__51321 == null))))?(((((map__51321.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51321.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51321):map__51321);\nvar options = map__51321__$1;\nvar dbg_print_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51321__$1,new cljs.core.Keyword(null,\"dbg-print?\",\"dbg-print?\",-660113872));\nvar dbg_indent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51321__$1,new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778));\nvar in_hang_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51321__$1,new cljs.core.Keyword(null,\"in-hang?\",\"in-hang?\",-1065695639));\nif(cljs.core.truth_(dbg_print_QMARK_)){\nif(cljs.core.truth_(style_vec)){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([dbg_indent,dbg_output,\"--------------\",\"in-hang?\",in_hang_QMARK_], 0));\n\nreturn cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([style_vec], 0));\n} else {\nreturn cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([dbg_indent,dbg_output,\"--------------- no style-vec\"], 0));\n}\n} else {\nreturn null;\n}\n});\n/**\n * Show this thing as a function?\n */\nzprint.zprint.showfn_QMARK_ = (function zprint$zprint$showfn_QMARK_(fn_map,f){\nif((!(typeof f === 'string'))){\nvar f_str = cljs.core.str.cljs$core$IFn$_invoke$arity$1(f);\nvar or__4126__auto__ = (fn_map.cljs$core$IFn$_invoke$arity$1 ? fn_map.cljs$core$IFn$_invoke$arity$1(f_str) : fn_map.call(null,f_str));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = cljs.core.re_find(/clojure/,f_str);\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nif((f instanceof cljs.core.Symbol)){\ntry{var or__4126__auto____$2 = cljs.core.re_find(/clojure/,cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(f))));\nif(cljs.core.truth_(or__4126__auto____$2)){\nreturn or__4126__auto____$2;\n} else {\nvar G__51326 = cljs.core.name(f);\nreturn (fn_map.cljs$core$IFn$_invoke$arity$1 ? fn_map.cljs$core$IFn$_invoke$arity$1(G__51326) : fn_map.call(null,G__51326));\n}\n}catch (e51325){var e = e51325;\nreturn null;\n}} else {\nreturn null;\n}\n}\n}\n} else {\nreturn null;\n}\n});\n/**\n * Show this thing as a user defined function?  Assumes that we\n *   have already handled any clojure defined functions!\n */\nzprint.zprint.show_user_fn_QMARK_ = (function zprint$zprint$show_user_fn_QMARK_(options,f){\nif((!(typeof f === 'string'))){\nvar f_str = cljs.core.str.cljs$core$IFn$_invoke$arity$1(f);\nvar user_fn_map = new cljs.core.Keyword(null,\"user-fn-map\",\"user-fn-map\",-908243227).cljs$core$IFn$_invoke$arity$1(options);\nvar or__4126__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(user_fn_map,f_str);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nif((f instanceof cljs.core.Symbol)){\ntry{var or__4126__auto____$1 = (!(cljs.core.empty_QMARK_(cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(f))))));\nif(or__4126__auto____$1){\nreturn or__4126__auto____$1;\n} else {\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(user_fn_map,cljs.core.name(f));\n}\n}catch (e51328){var e = e51328;\nreturn null;\n}} else {\nreturn null;\n}\n}\n} else {\nreturn null;\n}\n});\nzprint.zprint.right_separator_map = new cljs.core.PersistentArrayMap(null, 3, [\")\",(1),\"]\",(1),\"}\",(1)], null);\n/**\n * Given the fn-style, is the first output good enough to be worth\n *   doing. p is pretty, which is typically hanging, and b is basic, which\n *   is typically flow. p-count is the number of elements in the hang.\n */\nzprint.zprint.good_enough_QMARK_ = (function zprint$zprint$good_enough_QMARK_(caller,p__51331,fn_style,p_count,indent_diff,p__51332,p__51333){\nvar map__51334 = p__51331;\nvar map__51334__$1 = (((((!((map__51334 == null))))?(((((map__51334.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51334.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51334):map__51334);\nvar options = map__51334__$1;\nvar map__51335 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51334__$1,new cljs.core.Keyword(null,\"tuning\",\"tuning\",-48660925));\nvar map__51335__$1 = (((((!((map__51335 == null))))?(((((map__51335.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51335.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51335):map__51335);\nvar hang_flow = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51335__$1,new cljs.core.Keyword(null,\"hang-flow\",\"hang-flow\",428126548));\nvar hang_type_flow = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51335__$1,new cljs.core.Keyword(null,\"hang-type-flow\",\"hang-type-flow\",-1585576590));\nvar hang_flow_limit = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51335__$1,new cljs.core.Keyword(null,\"hang-flow-limit\",\"hang-flow-limit\",389146586));\nvar general_hang_adjust = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51335__$1,new cljs.core.Keyword(null,\"general-hang-adjust\",\"general-hang-adjust\",-1631406987));\nvar hang_if_equal_flow_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51335__$1,new cljs.core.Keyword(null,\"hang-if-equal-flow?\",\"hang-if-equal-flow?\",-1113113992));\nvar map__51336 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51334__$1,caller);\nvar map__51336__$1 = (((((!((map__51336 == null))))?(((((map__51336.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51336.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51336):map__51336);\nvar hang_expand = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51336__$1,new cljs.core.Keyword(null,\"hang-expand\",\"hang-expand\",1086807559));\nvar hang_diff = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51336__$1,new cljs.core.Keyword(null,\"hang-diff\",\"hang-diff\",-1575205424));\nvar hang_size = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51336__$1,new cljs.core.Keyword(null,\"hang-size\",\"hang-size\",-347944063));\nvar hang_adjust = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51336__$1,new cljs.core.Keyword(null,\"hang-adjust\",\"hang-adjust\",-613514382));\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51334__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar rightcnt = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51334__$1,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070));\nvar dbg_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51334__$1,new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771));\nvar vec__51337 = p__51332;\nvar p_lines = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51337,(0),null);\nvar p_maxwidth = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51337,(1),null);\nvar p_length_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51337,(2),null);\nvar p_what = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51337,(3),null);\nvar vec__51340 = p__51333;\nvar b_lines = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51340,(0),null);\nvar b_maxwidth = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51340,(1),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51340,(2),null);\nvar b_what = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51340,(3),null);\nvar p_last_maxwidth = cljs.core.last(p_length_seq);\nvar hang_diff__$1 = (function (){var or__4126__auto__ = hang_diff;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (0);\n}\n})();\nvar hang_expand__$1 = (function (){var or__4126__auto__ = hang_expand;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn 1000.0;\n}\n})();\nvar hang_adjust__$1 = (function (){var or__4126__auto__ = hang_adjust;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn general_hang_adjust;\n}\n})();\nvar options__$1 = (cljs.core.truth_((function (){var or__4126__auto__ = p_what;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn b_what;\n}\n})())?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771),true):options);\nvar result = ((cljs.core.not(b_lines))?true:(function (){var and__4115__auto__ = p_lines;\nif(cljs.core.truth_(and__4115__auto__)){\nif((p_last_maxwidth <= (width - (zprint.zprint.fix_rightcnt.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.fix_rightcnt.cljs$core$IFn$_invoke$arity$1(rightcnt) : zprint.zprint.fix_rightcnt.call(null,rightcnt))))){\nif((p_maxwidth <= width)){\nvar or__4126__auto__ = (p_lines === (0));\nif(or__4126__auto__){\nreturn or__4126__auto__;\n} else {\nif((b_lines > (0))){\nif((p_count > (0))){\nif(cljs.core.truth_(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(p_lines,b_lines))?hang_if_equal_flow_QMARK_:false))){\nreturn true;\n} else {\nif((((indent_diff <= hang_diff__$1))?true:(((p_lines - (1)) / p_count) <= hang_expand__$1))){\nif((cljs.core.truth_(hang_size)?(p_lines < hang_size):true)){\nvar factor = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style,new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173)))?hang_type_flow:hang_flow);\nif((p_lines > hang_flow_limit)){\nreturn ((p_lines - (1)) <= b_lines);\n} else {\nreturn (((p_lines + hang_adjust__$1) / b_lines) < factor);\n}\n} else {\nreturn false;\n}\n} else {\nreturn false;\n}\n}\n} else {\nreturn false;\n}\n} else {\nreturn false;\n}\n}\n} else {\nreturn false;\n}\n} else {\nreturn false;\n}\n} else {\nreturn and__4115__auto__;\n}\n})());\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),(cljs.core.truth_(result)?\"++++++\":\"XXXXXX\"),\"p-what\",p_what,\"good-enough? caller:\",caller,\"fn-style:\",fn_style,\"width:\",width,\"rightcnt:\",rightcnt,\"hang-expand:\",hang_expand__$1,\"p-count:\",p_count,\"p-lines:\",p_lines,\"p-maxwidth:\",p_maxwidth,\"indent-diff:\",indent_diff,\"hang-diff:\",hang_diff__$1,\"p-last-maxwidth:\",p_last_maxwidth,\"b-lines:\",b_lines,\"b-maxwidth:\",b_maxwidth], 0));\n} else {\n}\n\nreturn result;\n});\n/**\n * Add :in-hang? true to the options map.\n */\nzprint.zprint.in_hang = (function zprint$zprint$in_hang(options){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"in-hang?\",\"in-hang?\",-1065695639).cljs$core$IFn$_invoke$arity$1(options))){\nreturn options;\n} else {\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"do-in-hang?\",\"do-in-hang?\",-1235364947).cljs$core$IFn$_invoke$arity$1(options))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"in-hang?\",\"in-hang?\",-1065695639),(function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn true;\n}\n})());\n} else {\nreturn options;\n}\n}\n});\n/**\n * Scan a collection, and return the number of nils or empty collections\n *   present (if any), and nil otherwise.\n */\nzprint.zprint.contains_nil_QMARK_ = (function zprint$zprint$contains_nil_QMARK_(coll){\nvar n = cljs.core.count(cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__51379_SHARP_){\nif(cljs.core.coll_QMARK_(p1__51379_SHARP_)){\nreturn cljs.core.empty_QMARK_(p1__51379_SHARP_);\n} else {\nreturn (p1__51379_SHARP_ == null);\n}\n}),coll));\nif((!((n === (0))))){\nreturn n;\n} else {\nreturn null;\n}\n});\n/**\n * Concatentate multiple sequences, but if any of them are nil, return nil.\n *   This version is 15-20% slower than the version below. Keeping it around\n *   just for illustrative purposes.\n */\nzprint.zprint.concat_no_nil_alt = (function zprint$zprint$concat_no_nil_alt(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___52118 = arguments.length;\nvar i__4737__auto___52119 = (0);\nwhile(true){\nif((i__4737__auto___52119 < len__4736__auto___52118)){\nargs__4742__auto__.push((arguments[i__4737__auto___52119]));\n\nvar G__52120 = (i__4737__auto___52119 + (1));\ni__4737__auto___52119 = G__52120;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn zprint.zprint.concat_no_nil_alt.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(zprint.zprint.concat_no_nil_alt.cljs$core$IFn$_invoke$arity$variadic = (function (rest){\nvar coll = rest;\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nvar c = cljs.core.first(coll);\nif(cljs.core.not(c)){\nreturn cljs.core.persistent_BANG_(out);\n} else {\nif(((((cljs.core.coll_QMARK_(c)) && ((!(cljs.core.empty_QMARK_(c)))))) || ((!((c == null)))))){\nvar G__52121 = cljs.core.next(coll);\nvar G__52122 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,c);\ncoll = G__52121;\nout = G__52122;\ncontinue;\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}));\n\n(zprint.zprint.concat_no_nil_alt.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(zprint.zprint.concat_no_nil_alt.cljs$lang$applyTo = (function (seq51380){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq51380));\n}));\n\n/**\n * Concatentate multiple sequences, but if any of them are nil or empty\n *   collections, return nil.\n */\nzprint.zprint.concat_no_nil_pre_noseq = (function zprint$zprint$concat_no_nil_pre_noseq(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___52123 = arguments.length;\nvar i__4737__auto___52124 = (0);\nwhile(true){\nif((i__4737__auto___52124 < len__4736__auto___52123)){\nargs__4742__auto__.push((arguments[i__4737__auto___52124]));\n\nvar G__52125 = (i__4737__auto___52124 + (1));\ni__4737__auto___52124 = G__52125;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn zprint.zprint.concat_no_nil_pre_noseq.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(zprint.zprint.concat_no_nil_pre_noseq.cljs$core$IFn$_invoke$arity$variadic = (function (rest){\nvar result = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (v,o){\nif(cljs.core.coll_QMARK_(o)){\nif(cljs.core.empty_QMARK_(o)){\nreturn cljs.core.reduced(null);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj_BANG_,v,o);\n}\n} else {\nif((o == null)){\nreturn cljs.core.reduced(null);\n} else {\nreturn cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v,o);\n}\n}\n}),cljs.core.transient$(cljs.core.PersistentVector.EMPTY),rest);\nif(cljs.core.truth_(result)){\nreturn cljs.core.persistent_BANG_(result);\n} else {\nreturn null;\n}\n}));\n\n(zprint.zprint.concat_no_nil_pre_noseq.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(zprint.zprint.concat_no_nil_pre_noseq.cljs$lang$applyTo = (function (seq51393){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq51393));\n}));\n\n/**\n * Concatentate multiple sequences, but if any of them are nil or empty\n *   collections, return nil. If any of them are :noseq, just skip them.\n */\nzprint.zprint.concat_no_nil = (function zprint$zprint$concat_no_nil(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___52130 = arguments.length;\nvar i__4737__auto___52131 = (0);\nwhile(true){\nif((i__4737__auto___52131 < len__4736__auto___52130)){\nargs__4742__auto__.push((arguments[i__4737__auto___52131]));\n\nvar G__52132 = (i__4737__auto___52131 + (1));\ni__4737__auto___52131 = G__52132;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic = (function (rest){\nvar result = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (v,o){\nif(cljs.core.coll_QMARK_(o)){\nif(cljs.core.empty_QMARK_(o)){\nreturn cljs.core.reduced(null);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj_BANG_,v,o);\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"noseq\",\"noseq\",405935768),o)){\nreturn v;\n} else {\nif((o == null)){\nreturn cljs.core.reduced(null);\n} else {\nreturn cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v,o);\n}\n}\n}\n}),cljs.core.transient$(cljs.core.PersistentVector.EMPTY),rest);\nif(cljs.core.truth_(result)){\nreturn cljs.core.persistent_BANG_(result);\n} else {\nreturn null;\n}\n}));\n\n(zprint.zprint.concat_no_nil.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(zprint.zprint.concat_no_nil.cljs$lang$applyTo = (function (seq51397){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq51397));\n}));\n\n/**\n * Ensure that whatever we have is a vector.\n */\nzprint.zprint.force_vector = (function zprint$zprint$force_vector(coll){\nif(cljs.core.vector_QMARK_(coll)){\nreturn coll;\n} else {\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,coll);\n}\n});\n/**\n * Takes a string, and returns the fn-style if it is a keyword and\n *   without the : it can be found in the fn-map.\n */\nzprint.zprint.keyword_fn_QMARK_ = (function zprint$zprint$keyword_fn_QMARK_(options,s){\nvar vec__51398 = clojure.string.split.cljs$core$IFn$_invoke$arity$2(s,/^:/);\nvar left = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51398,(0),null);\nvar right = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51398,(1),null);\nif(cljs.core.truth_(right)){\nvar fexpr__51401 = new cljs.core.Keyword(null,\"fn-map\",\"fn-map\",565481146).cljs$core$IFn$_invoke$arity$1(options);\nreturn (fexpr__51401.cljs$core$IFn$_invoke$arity$1 ? fexpr__51401.cljs$core$IFn$_invoke$arity$1(right) : fexpr__51401.call(null,right));\n} else {\nreturn null;\n}\n});\n/**\n * Given the options map, return the max length.  This might be\n *   a constant number, but it might be based on the depth as well.\n *   Returns nil of there is no max-length set.\n */\nzprint.zprint.get_max_length = (function zprint$zprint$get_max_length(p__51402){\nvar map__51403 = p__51402;\nvar map__51403__$1 = (((((!((map__51403 == null))))?(((((map__51403.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51403.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51403):map__51403);\nvar options = map__51403__$1;\nvar max_length = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51403__$1,new cljs.core.Keyword(null,\"max-length\",\"max-length\",-254826109));\nvar depth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51403__$1,new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640));\nif(cljs.core.truth_(max_length)){\nif(cljs.core.vector_QMARK_(max_length)){\nreturn cljs.core.nth.cljs$core$IFn$_invoke$arity$2(max_length,(function (){var x__4217__auto__ = (depth - (1));\nvar y__4218__auto__ = (cljs.core.count(max_length) - (1));\nreturn ((x__4217__auto__ < y__4218__auto__) ? x__4217__auto__ : y__4218__auto__);\n})());\n} else {\nreturn max_length;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Given an options map, return another options map with no\n *   :max-length key.  This is to that you can call a routine that\n *   normally deals with :max-length and get it to do the normal\n *   thing.\n */\nzprint.zprint.no_max_length = (function zprint$zprint$no_max_length(options){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"max-length\",\"max-length\",-254826109),(10000));\n});\n/**\n * Take the vector carrying the intermediate results, and\n *   do the right thing with a new string. Vector is\n *   [ 0 out - vector accumulating line lengths \n *  1 cur-len - length of current line\n *  just-eol? - did we just do an eol?\n *  ]\n *   s - string to add to current line\n *   tag - element type of string (comment's don't count in length)\n *   eol? - should we terminate line after adding count of s\n */\nzprint.zprint.accumulate_ll = (function zprint$zprint$accumulate_ll(count_comment_QMARK_,p__51405,s,tag,eol_QMARK_){\nvar vec__51406 = p__51405;\nvar out = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51406,(0),null);\nvar cur_len = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51406,(1),null);\nvar just_eol_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51406,(2),null);\nvar just_comment_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51406,(3),null);\nvar in$ = vec__51406;\nvar comment_QMARK_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405))));\nvar count_s = ((((comment_QMARK_) && (cljs.core.not(count_comment_QMARK_))))?(0):cljs.core.count(s));\nif(cljs.core.truth_((function (){var or__4126__auto__ = (function (){var and__4115__auto__ = eol_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not((function (){var and__4115__auto____$1 = just_eol_QMARK_;\nif(cljs.core.truth_(and__4115__auto____$1)){\nreturn (count_s === (0));\n} else {\nreturn and__4115__auto____$1;\n}\n})());\n} else {\nreturn and__4115__auto__;\n}\n})();\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn comment_QMARK_;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,(cur_len + count_s)),(0),true,comment_QMARK_], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [out,(cur_len + count_s),null,comment_QMARK_], null);\n\n}\n});\nzprint.zprint.generate_ll = (function zprint$zprint$generate_ll(count_comment_QMARK_,p__51409,p__51410){\nvar vec__51411 = p__51409;\nvar out = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51411,(0),null);\nvar cur_len = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51411,(1),null);\nvar just_eol_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51411,(2),null);\nvar just_comment_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51411,(3),null);\nvar in$ = vec__51411;\nvar vec__51414 = p__51410;\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51414,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51414,(1),null);\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51414,(2),null);\nvar element = vec__51414;\nvar vec__51417 = ((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)))))?zprint.zprint.split_lf_2(s):(new cljs.core.List(null,s,null,(1),null)));\nvar l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51417,(0),null);\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51417,(1),null);\nvar in$__$1 = zprint.zprint.accumulate_ll(count_comment_QMARK_,in$,l,tag,(!((r == null))));\nvar in$__$2 = ((cljs.core.empty_QMARK_(r))?in$__$1:zprint.zprint.accumulate_ll(count_comment_QMARK_,in$__$1,r,tag,null));\nreturn in$__$2;\n});\n/**\n * Take a style-vec, and output a sequence of numbers, one for each\n *   line, which contains the actual length. Must take the current\n *   indent to have a prayer of getting this right, but it is used\n *   only for the first line.  The ind can be an integer or a seq of\n *   integers, in which case only the first integer is used. Newlines\n *   can come anywhere in an element in a style-vec, it will account\n *   for both sides.  Will break lines on comments even if no newlines\n *   in them.  This doesn't count the length of comment lines unless\n *   [:comment :count?] is true, so that we don't format based on\n *   comment size -- that is handled with the wrap-comments elsewhere.\n *   Note that only vectors with :whitespace, :indent, or :newline are scanned\n *   for newlines, and if consecutive newlines appear, only the first\n *   is counted as a newline -- the second is counted as a regular \n *   character. A single comment is counted as two lines. Lots of edge\n *   conditions that are really quite important.\n */\nzprint.zprint.line_lengths_iter = (function zprint$zprint$line_lengths_iter(options,ind,style_vec){\nvar count_comment_QMARK_ = new cljs.core.Keyword(null,\"count?\",\"count?\",-122202128).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"comment\",\"comment\",532206069).cljs$core$IFn$_invoke$arity$1(options));\nvar ind__$1 = ((cljs.core.coll_QMARK_(ind))?cljs.core.first(ind):ind);\nvar next_vec = style_vec;\nvar current_string = null;\nvar line_length = ind__$1;\nvar previous_comment_QMARK_ = null;\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(((cljs.core.empty_QMARK_(next_vec)) && (cljs.core.empty_QMARK_(current_string)))){\nif((((line_length === (0))) && (cljs.core.not(previous_comment_QMARK_)))){\nreturn out;\n} else {\nif(cljs.core.truth_(previous_comment_QMARK_)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(out,line_length,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(0)], 0));\n} else {\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,line_length);\n\n}\n}\n} else {\nvar advance_QMARK_ = cljs.core.empty_QMARK_(current_string);\nvar vec__51426 = ((advance_QMARK_)?cljs.core.first(next_vec):null);\nvar next_string = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51426,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51426,(1),null);\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51426,(2),null);\nvar comment_QMARK_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405))));\nvar s = ((advance_QMARK_)?next_string:current_string);\nvar vec__51429 = (cljs.core.truth_(s)?((((comment_QMARK_) && (cljs.core.not(count_comment_QMARK_))))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\"], null):(cljs.core.truth_((function (){var or__4126__auto__ = ((advance_QMARK_) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125))))));\nif(or__4126__auto__){\nreturn or__4126__auto__;\n} else {\nreturn current_string;\n}\n})())?zprint.zprint.split_lf_2(s):new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null)\n)):null);\nvar l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51429,(0),null);\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51429,(1),null);\nvar force_newline_QMARK_ = (function (){var and__4115__auto__ = previous_comment_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn (!(cljs.core.empty_QMARK_(l)));\n} else {\nreturn and__4115__auto__;\n}\n})();\nvar r__$1 = (cljs.core.truth_(force_newline_QMARK_)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(l),cljs.core.str.cljs$core$IFn$_invoke$arity$1(r)].join(''):r);\nvar l__$1 = (cljs.core.truth_(force_newline_QMARK_)?null:l);\nvar new_line_length = (line_length + cljs.core.count(l__$1));\nvar G__52153 = ((advance_QMARK_)?cljs.core.next(next_vec):next_vec);\nvar G__52154 = r__$1;\nvar G__52155 = (cljs.core.truth_(r__$1)?(0):new_line_length);\nvar G__52156 = comment_QMARK_;\nvar G__52157 = (cljs.core.truth_(r__$1)?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,new_line_length):out);\nnext_vec = G__52153;\ncurrent_string = G__52154;\nline_length = G__52155;\nprevious_comment_QMARK_ = G__52156;\nout = G__52157;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Take a style-vec, and output a sequence of numbers, one for each\n *   line, which contains the actual length. Must take the current\n *   indent to have a prayer of getting this right, but it is used\n *   only for the first line.  The ind can be an integer or a seq of\n *   integers, in which case only the first integer is used. Newlines\n *   can come anywhere in an element in a style-vec, it will account\n *   for both sides.  Will break lines on comments even if no newlines\n *   in them.  This doesn't count the length of comment lines unless\n *   [:comment :count?] is true, so that we don't format based on\n *   comment size -- that is handled with the wrap-comments at the\n *   end. Note that only vectors with :whitespace or :indent are scanned\n *   for newlines, and if consecutive newlines appear, only the first\n *   is counted as a newline -- the second is counted as a regular \n *   character.\n */\nzprint.zprint.line_lengths = (function zprint$zprint$line_lengths(options,ind,style_vec){\nvar length_vec = cljs.core.first((function (){var count_comment_QMARK_ = new cljs.core.Keyword(null,\"count?\",\"count?\",-122202128).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"comment\",\"comment\",532206069).cljs$core$IFn$_invoke$arity$1(options));\nvar vec__51432 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(zprint.zprint.generate_ll,count_comment_QMARK_),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,((cljs.core.coll_QMARK_(ind))?cljs.core.first(ind):ind),null,null], null),style_vec);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51432,(0),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51432,(1),null);\nvar just_eol_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51432,(2),null);\nvar just_comment_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51432,(3),null);\nvar result = vec__51432;\nif(cljs.core.truth_((function (){var and__4115__auto__ = just_eol_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not(just_comment_QMARK_);\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn result;\n} else {\nreturn zprint.zprint.accumulate_ll(count_comment_QMARK_,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,(2),null),\"\",null,true);\n}\n})());\nreturn length_vec;\n});\n/**\n * This looks at a style vec and doesn't do all that style-lines does.\n *   It just looks for a new-line in the strings, and returns true if it\n *   doesn't find one.\n */\nzprint.zprint.single_line_QMARK_ = (function zprint$zprint$single_line_QMARK_(style_vec){\nreturn cljs.core.not(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__51435_SHARP_,p2__51436_SHARP_){\nvar or__4126__auto__ = p1__51435_SHARP_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn p2__51436_SHARP_;\n}\n}),false,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__51437_SHARP_){\nreturn clojure.string.includes_QMARK_(cljs.core.first(p1__51437_SHARP_),\"\\n\");\n}),style_vec)));\n});\n/**\n * Given a style-vec, come up with a string that gives some hint of \n *   where this style-vec came from.\n */\nzprint.zprint.find_what = (function zprint$zprint$find_what(style_vec){\nvar s_vec = style_vec;\nwhile(true){\nif(cljs.core.truth_(s_vec)){\nvar vec__51438 = cljs.core.first(s_vec);\nvar what = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51438,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51438,(1),null);\nvar this$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51438,(2),null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this$,new cljs.core.Keyword(null,\"element\",\"element\",1974019749))){\nreturn what;\n} else {\nvar G__52160 = cljs.core.next(s_vec);\ns_vec = G__52160;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});\n/**\n * Take a style output, and tell us how many lines it takes to print it\n *   and the maximum width that it reaches. Returns \n *   [<line-count> <max-width> [line-lengths]].\n *   Doesn't require any max-width inside the style-vec. Also returns the\n *   line lengths in case that is helpful (since we have them anyway).\n *   If (:dbg-ge options) has value, then uses find-what to see if what it\n *   finds matches the value, and if it does, place the value in the\n *   resulting vector.\n */\nzprint.zprint.style_lines = (function zprint$zprint$style_lines(options,ind,style_vec){\nif(cljs.core.truth_((function (){var and__4115__auto__ = style_vec;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn (((!(cljs.core.empty_QMARK_(style_vec)))) && (cljs.core.not(zprint.zprint.contains_nil_QMARK_(style_vec))));\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar lengths = zprint.zprint.line_lengths_iter(options,ind,style_vec);\nvar count_lengths = cljs.core.count(lengths);\nvar result = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [count_lengths,(((count_lengths === (0)))?(0):cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.max,lengths)),lengths], null);\nvar dbg_ge = new cljs.core.Keyword(null,\"dbg-ge\",\"dbg-ge\",257927017).cljs$core$IFn$_invoke$arity$1(options);\nvar what = (cljs.core.truth_((function (){var and__4115__auto__ = dbg_ge;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(zprint.zprint.find_what(style_vec),dbg_ge);\n} else {\nreturn and__4115__auto__;\n}\n})())?dbg_ge:null);\nif(cljs.core.truth_(what)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(result,what);\n} else {\nreturn result;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Given output from style-lines and options, see if it fits the width.  \n *   Return the number of lines it takes if it fits, nil otherwise.\n */\nzprint.zprint.fzfit = (function zprint$zprint$fzfit(p__51441,p__51442){\nvar map__51443 = p__51441;\nvar map__51443__$1 = (((((!((map__51443 == null))))?(((((map__51443.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51443.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51443):map__51443);\nvar options = map__51443__$1;\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51443__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar rightcnt = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51443__$1,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070));\nvar dbg_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51443__$1,new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771));\nvar vec__51444 = p__51442;\nvar line_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51444,(0),null);\nvar max_width = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51444,(1),null);\nvar style_lines_return = vec__51444;\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzfit: fixed-rightcnt:\",(zprint.zprint.fix_rightcnt.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.fix_rightcnt.cljs$core$IFn$_invoke$arity$1(rightcnt) : zprint.zprint.fix_rightcnt.call(null,rightcnt)),\"line-count:\",line_count,\"max-width:\",max_width,\"width:\",width], 0));\n} else {\n}\n\nif(cljs.core.truth_(style_lines_return)){\nif((max_width <= (width - (zprint.zprint.fix_rightcnt.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.fix_rightcnt.cljs$core$IFn$_invoke$arity$1(rightcnt) : zprint.zprint.fix_rightcnt.call(null,rightcnt))))){\nreturn line_count;\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Given the return from style-lines  and options, \n *   return true if it fits on a single line.\n */\nzprint.zprint.fzfit_one_line = (function zprint$zprint$fzfit_one_line(options,style_lines_return){\nvar lines = zprint.zprint.fzfit(options,style_lines_return);\nreturn ((typeof lines === 'number') && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(lines,(1))));\n});\n/**\n * Increase the rightmost count, if any, and return one if not.\n */\nzprint.zprint.rightmost = (function zprint$zprint$rightmost(options){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070),(new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070).cljs$core$IFn$_invoke$arity$2(options,(0)) + (1)));\n});\n/**\n * Remove the rightmost count.\n */\nzprint.zprint.not_rightmost = (function zprint$zprint$not_rightmost(options){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(options,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070));\n});\n/**\n * Handle the complexity of commas and rightmost-pair with options.\n *   If it isn't a rightmost, it loses rightmost status.\n *   If it is a rightmost, and in the rightmost pair, it gain one rightmost\n *   since it has the right end thing (and we don't care about the comma).\n *   If it is the rightmost of the non-rightmost-pair, then the comma\n *   matters, and we handle that appropriately.  Whew!\n */\nzprint.zprint.c_r_pair = (function zprint$zprint$c_r_pair(commas_QMARK_,rightmost_pair_QMARK_,rightmost_QMARK_,options){\nif(cljs.core.not(rightmost_QMARK_)){\nreturn zprint.zprint.not_rightmost(options);\n} else {\nif(cljs.core.truth_(rightmost_pair_QMARK_)){\nreturn options;\n} else {\nif(cljs.core.truth_(commas_QMARK_)){\nreturn zprint.zprint.rightmost(zprint.zprint.not_rightmost(options));\n} else {\nreturn zprint.zprint.not_rightmost(options);\n}\n}\n}\n});\n/**\n * Handle issue with rightcnt.\n */\nzprint.zprint.fix_rightcnt = (function zprint$zprint$fix_rightcnt(rightcnt){\nif(typeof rightcnt === 'number'){\nreturn rightcnt;\n} else {\nreturn (0);\n}\n});\nzprint.zprint.str__GT_key = cljs.core.PersistentHashMap.fromArrays([\"]\",\"'\",\")\",\"`\",\"~@\",\"~\",\"#{\",\"(\",\"#(\",\"{\",\"}\",\"[\",\"#_\",\"@\"],[new cljs.core.Keyword(null,\"bracket\",\"bracket\",-600276523),new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245),new cljs.core.Keyword(null,\"paren\",\"paren\",-294107600),new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245),new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245),new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245),new cljs.core.Keyword(null,\"hash-brace\",\"hash-brace\",-1522139685),new cljs.core.Keyword(null,\"paren\",\"paren\",-294107600),new cljs.core.Keyword(null,\"hash-paren\",\"hash-paren\",-1158425562),new cljs.core.Keyword(null,\"brace\",\"brace\",-1705077624),new cljs.core.Keyword(null,\"brace\",\"brace\",-1705077624),new cljs.core.Keyword(null,\"bracket\",\"bracket\",-600276523),new cljs.core.Keyword(null,\"uneval\",\"uneval\",1932037707),new cljs.core.Keyword(null,\"deref\",\"deref\",-145586795)]);\n/**\n * Look up the thing in the zprint-color-map.  Accepts keywords or\n *   strings.\n */\nzprint.zprint.zcolor_map = (function zprint$zprint$zcolor_map(p__51448,key_or_str){\nvar map__51449 = p__51448;\nvar map__51449__$1 = (((((!((map__51449 == null))))?(((((map__51449.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51449.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51449):map__51449);\nvar options = map__51449__$1;\nvar color_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51449__$1,new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684));\nvar G__51451 = (((key_or_str instanceof cljs.core.Keyword))?key_or_str:(zprint.zprint.str__GT_key.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.str__GT_key.cljs$core$IFn$_invoke$arity$1(key_or_str) : zprint.zprint.str__GT_key.call(null,key_or_str)));\nreturn (color_map.cljs$core$IFn$_invoke$arity$1 ? color_map.cljs$core$IFn$_invoke$arity$1(G__51451) : color_map.call(null,G__51451));\n});\n/**\n * Take a style-vec, and if hangflow? is true, return a\n *   vector [hang-or-flow style-vec], else return style-vec.\n *   But a nil style-vec returns nil.\n */\nzprint.zprint.hangflow = (function zprint$zprint$hangflow(hangflow_QMARK_,hang_or_flow,style_vec){\nif(cljs.core.truth_(style_vec)){\nif(cljs.core.truth_(hangflow_QMARK_)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [hang_or_flow,style_vec], null);\n} else {\nreturn style_vec;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Try to hang something and if it doesn't hang at all, then flow it,\n *   but strongly prefer hang.  Has hang and flow indents, and fzfn is the\n *   fzprint-? function to use with zloc.  Callers need to know whether this\n *   was hang or flow, so it returns [{:hang | :flow} style-vec] all the time.\n */\nzprint.zprint.fzprint_hang_unless_fail = (function zprint$zprint$fzprint_hang_unless_fail(options,hindent,findent,fzfn,zloc){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-unless-fail: hindent:\",hindent,\"findent:\",findent,\"zloc:\",(function (){var G__51452 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst.call(null,zloc));\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__51452) : zprint.zfns.zstring.call(null,G__51452));\n})()], 0));\n} else {\n}\n\nvar hanging = ((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(hindent,findent))?(function (){var G__51453 = zprint.zprint.in_hang(options);\nvar G__51454 = hindent;\nvar G__51455 = zloc;\nreturn (fzfn.cljs$core$IFn$_invoke$arity$3 ? fzfn.cljs$core$IFn$_invoke$arity$3(G__51453,G__51454,G__51455) : fzfn.call(null,G__51453,G__51454,G__51455));\n})():null);\nvar value__51281__auto__ = (cljs.core.truth_((function (){var and__4115__auto__ = hanging;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn zprint.zprint.fzfit(options,zprint.zprint.style_lines(options,hindent,hanging));\n} else {\nreturn and__4115__auto__;\n}\n})())?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),hanging], null):(function (){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-unless-fail: hang failed, doing flow\"], 0));\n} else {\n}\n\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"flow\",\"flow\",590489032),zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(findent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),(fzfn.cljs$core$IFn$_invoke$arity$3 ? fzfn.cljs$core$IFn$_invoke$arity$3(options,findent,zloc) : fzfn.call(null,options,findent,zloc))], 0))], null);\n})()\n);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-unless-fail: exit:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([value__51281__auto__], 0))], 0));\n} else {\n}\n\nreturn value__51281__auto__;\n});\n/**\n * Given a style-vec with exactly one thing in it, replace the color\n *   with whatever local color we have determined is correct.\n */\nzprint.zprint.replace_color = (function zprint$zprint$replace_color(local_color,style_vec){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(style_vec),(1))){\nvar vec__51456 = style_vec;\nvar vec__51459 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51456,(0),null);\nvar string = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51459,(0),null);\nvar color = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51459,(1),null);\nvar element = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51459,(2),null);\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [string,local_color,element], null)], null);\n} else {\nreturn style_vec;\n}\n});\n/**\n * Print a single pair of things (though it might not be exactly a\n *   pair, given comments and :extend and the like), like bindings in\n *   a let, clauses in a cond, keys and values in a map.  Controlled\n *   by various maps, the key of which is caller.  Returns \n *   [:hang <style-vec>] or [:flow <style-vec>] so that the upstream folks\n *   know whether this was a hang or flow and can do the right thing\n *   based on that.\n */\nzprint.zprint.fzprint_two_up = (function zprint$zprint$fzprint_two_up(caller,p__51462,ind,commas_QMARK_,justify_width,rightmost_pair_QMARK_,p__51463){\nvar map__51464 = p__51462;\nvar map__51464__$1 = (((((!((map__51464 == null))))?(((((map__51464.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51464.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51464):map__51464);\nvar options = map__51464__$1;\nvar map__51465 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51464__$1,caller);\nvar map__51465__$1 = (((((!((map__51465 == null))))?(((((map__51465.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51465.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51465):map__51465);\nvar hang_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51465__$1,new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854));\nvar flow_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51465__$1,new cljs.core.Keyword(null,\"flow?\",\"flow?\",96929057));\nvar indent_arg = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51465__$1,new cljs.core.Keyword(null,\"indent-arg\",\"indent-arg\",58691874));\nvar key_depth_color = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51465__$1,new cljs.core.Keyword(null,\"key-depth-color\",\"key-depth-color\",1448522819));\nvar indent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51465__$1,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125));\nvar key_value_color = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51465__$1,new cljs.core.Keyword(null,\"key-value-color\",\"key-value-color\",676042889));\nvar dbg_cnt_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51465__$1,new cljs.core.Keyword(null,\"dbg-cnt?\",\"dbg-cnt?\",-1638028976));\nvar dbg_local_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51465__$1,new cljs.core.Keyword(null,\"dbg-local?\",\"dbg-local?\",-895545325));\nvar key_color = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51465__$1,new cljs.core.Keyword(null,\"key-color\",\"key-color\",-209002572));\nvar one_line_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51464__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111));\nvar dbg_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51464__$1,new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771));\nvar dbg_indent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51464__$1,new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778));\nvar in_hang_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51464__$1,new cljs.core.Keyword(null,\"in-hang?\",\"in-hang?\",-1065695639));\nvar do_in_hang_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51464__$1,new cljs.core.Keyword(null,\"do-in-hang?\",\"do-in-hang?\",-1235364947));\nvar map_depth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51464__$1,new cljs.core.Keyword(null,\"map-depth\",\"map-depth\",-191378641));\nvar vec__51466 = p__51463;\nvar lloc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51466,(0),null);\nvar rloc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51466,(1),null);\nvar xloc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51466,(2),null);\nvar pair = vec__51466;\nif(cljs.core.truth_(dbg_cnt_QMARK_)){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"two-up: caller:\",caller,\"hang?\",hang_QMARK_,\"dbg?\",dbg_QMARK_], 0));\n} else {\n}\n\nif(cljs.core.truth_((function (){var or__4126__auto__ = dbg_QMARK_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn dbg_local_QMARK_;\n}\n})())){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (){var or__4126__auto__ = dbg_indent;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn \"\";\n}\n})(),\"==========================\",[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4126__auto__ = dbg_indent;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn \"\";\n}\n})())].join(''),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(lloc) : zprint.zfns.zstring.call(null,lloc)),\"tag:\",(zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(lloc) : zprint.zfns.ztag.call(null,lloc)),\"caller:\",caller,\"count:\",cljs.core.count(pair),\"ind:\",ind,\"indent:\",indent,\"indent-arg:\",indent_arg,\"justify-width:\",justify_width,\"one-line?:\",one_line_QMARK_,\"hang?:\",hang_QMARK_,\"in-hang?\",in_hang_QMARK_,\"do-in-hang?\",do_in_hang_QMARK_,\"flow?\",flow_QMARK_,\"commas?\",commas_QMARK_,\"rightmost-pair?\",rightmost_pair_QMARK_], 0))], 0));\n} else {\n}\n\nvar local_hang_QMARK_ = (function (){var or__4126__auto__ = one_line_QMARK_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn hang_QMARK_;\n}\n})();\nvar indent__$1 = (function (){var or__4126__auto__ = indent;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn indent_arg;\n}\n})();\nvar local_options = ((cljs.core.not(local_hang_QMARK_))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111),true):options);\nvar loptions = zprint.zprint.c_r_pair(commas_QMARK_,rightmost_pair_QMARK_,null,options);\nvar roptions = zprint.zprint.c_r_pair(commas_QMARK_,rightmost_pair_QMARK_,new cljs.core.Keyword(null,\"rightmost\",\"rightmost\",800279518),options);\nvar local_roptions = zprint.zprint.c_r_pair(commas_QMARK_,rightmost_pair_QMARK_,new cljs.core.Keyword(null,\"rightmost\",\"rightmost\",800279518),local_options);\nvar value_color_map = (function (){var and__4115__auto__ = key_value_color;\nif(cljs.core.truth_(and__4115__auto__)){\nvar G__51477 = (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(lloc) : zprint.zfns.zsexpr.call(null,lloc));\nreturn (key_value_color.cljs$core$IFn$_invoke$arity$1 ? key_value_color.cljs$core$IFn$_invoke$arity$1(G__51477) : key_value_color.call(null,G__51477));\n} else {\nreturn and__4115__auto__;\n}\n})();\nvar local_roptions__$1 = (cljs.core.truth_(value_color_map)?zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([local_roptions,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684),value_color_map], null)], 0)):local_roptions);\nvar roptions__$1 = (cljs.core.truth_(value_color_map)?zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([roptions,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684),value_color_map], null)], 0)):roptions);\nvar modifier_set = new cljs.core.Keyword(null,\"modifiers\",\"modifiers\",50378834).cljs$core$IFn$_invoke$arity$1((options.cljs$core$IFn$_invoke$arity$1 ? options.cljs$core$IFn$_invoke$arity$1(caller) : options.call(null,caller)));\nvar modifier_QMARK_ = (function (){var or__4126__auto__ = (function (){var and__4115__auto__ = modifier_set;\nif(cljs.core.truth_(and__4115__auto__)){\nvar and__4115__auto____$1 = (function (){var G__51483 = (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(lloc) : zprint.zfns.zstring.call(null,lloc));\nreturn (modifier_set.cljs$core$IFn$_invoke$arity$1 ? modifier_set.cljs$core$IFn$_invoke$arity$1(G__51483) : modifier_set.call(null,G__51483));\n})();\nif(cljs.core.truth_(and__4115__auto____$1)){\nreturn (cljs.core.count(pair) > (2));\n} else {\nreturn and__4115__auto____$1;\n}\n} else {\nreturn and__4115__auto__;\n}\n})();\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (zprint.zprint.middle_element_QMARK_.cljs$core$IFn$_invoke$arity$2 ? zprint.zprint.middle_element_QMARK_.cljs$core$IFn$_invoke$arity$2(options,rloc) : zprint.zprint.middle_element_QMARK_.call(null,options,rloc));\n}\n})();\nvar local_color = cljs.core.get.cljs$core$IFn$_invoke$arity$2(key_depth_color,(map_depth - (1)));\nvar local_color__$1 = (cljs.core.truth_(key_color)?(function (){var G__51484 = (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(lloc) : zprint.zfns.zsexpr.call(null,lloc));\nreturn (key_color.cljs$core$IFn$_invoke$arity$1 ? key_color.cljs$core$IFn$_invoke$arity$1(G__51484) : key_color.call(null,G__51484));\n})():local_color);\nvar arg_1 = (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(loptions,ind,lloc) : zprint.zprint.fzprint_STAR_.call(null,loptions,ind,lloc));\nvar arg_1_newline_QMARK_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(pair),(1)))?(zprint.zfns.znewline_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.znewline_QMARK_.cljs$core$IFn$_invoke$arity$1(lloc) : zprint.zfns.znewline_QMARK_.call(null,lloc)):false);\nvar arg_1__$1 = (cljs.core.truth_(local_color__$1)?zprint.zprint.replace_color(local_color__$1,arg_1):arg_1);\nvar vec__51471 = zprint.zprint.style_lines(options,ind,arg_1__$1);\nvar arg_1_line_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51471,(0),null);\nvar arg_1_max_width = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51471,(1),null);\nvar arg_1_lines = vec__51471;\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-two-up before modifier: arg-1-line-count:\",arg_1_line_count,\"arg-1-max-width:\",arg_1_max_width], 0)):null);\nvar modifier_QMARK___$1 = (cljs.core.truth_((function (){var or__4126__auto__ = (function (){var and__4115__auto__ = arg_1_line_count;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn (arg_1_line_count > (1));\n} else {\nreturn and__4115__auto__;\n}\n})();\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn arg_1_newline_QMARK_;\n}\n})())?null:modifier_QMARK_);\nvar combined_arg_1 = (cljs.core.truth_(modifier_QMARK___$1)?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg_1__$1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),(function (){var G__51485 = zprint.zprint.in_hang(loptions);\nvar G__51486 = (ind + arg_1_max_width);\nvar G__51487 = rloc;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51485,G__51486,G__51487) : zprint.zprint.fzprint_STAR_.call(null,G__51485,G__51486,G__51487));\n})()], 0)):arg_1__$1);\nvar arg_1__$2 = (cljs.core.truth_(combined_arg_1)?combined_arg_1:arg_1__$1);\nvar modifier_QMARK___$2 = (cljs.core.truth_(combined_arg_1)?modifier_QMARK___$1:null);\nvar vec__51474 = (cljs.core.truth_(combined_arg_1)?zprint.zprint.style_lines(options,ind,arg_1__$2):arg_1_lines);\nvar arg_1_line_count__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51474,(0),null);\nvar arg_1_max_width__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51474,(1),null);\nvar arg_1_lines__$1 = vec__51474;\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-two-up after modifier: arg-1-line-count:\",arg_1_line_count__$1,\"arg-1-max-width:\",arg_1_max_width__$1], 0)):null);\nvar lloc__$1 = (cljs.core.truth_(modifier_QMARK___$2)?rloc:lloc);\nvar rloc__$1 = (cljs.core.truth_(modifier_QMARK___$2)?xloc:rloc);\nvar arg_1_fit_oneline_QMARK_ = ((cljs.core.not(flow_QMARK_)) && (zprint.zprint.fzfit_one_line(loptions,arg_1_lines__$1)));\nvar arg_1_fit_QMARK_ = (function (){var or__4126__auto__ = arg_1_fit_oneline_QMARK_;\nif(or__4126__auto__){\nreturn or__4126__auto__;\n} else {\nif(cljs.core.not(one_line_QMARK_)){\nreturn zprint.zprint.fzfit(loptions,arg_1_lines__$1);\n} else {\nreturn null;\n}\n}\n})();\nvar arg_1_width = ((function (){var or__4126__auto__ = arg_1_max_width__$1;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (0);\n}\n})() - ind);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: arg-1:\",arg_1__$2], 0))], 0));\n} else {\n}\n\nif(cljs.core.truth_((function (){var and__4115__auto__ = arg_1__$2;\nif(cljs.core.truth_(and__4115__auto__)){\nvar or__4126__auto__ = arg_1_fit_QMARK_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.not(in_hang_QMARK_);\n}\n} else {\nreturn and__4115__auto__;\n}\n})())){\nif(cljs.core.truth_(arg_1_newline_QMARK_)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"flow\",\"flow\",590489032),arg_1__$2], null);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(pair),(1))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),(zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(roptions__$1,ind,lloc__$1) : zprint.zprint.fzprint_STAR_.call(null,roptions__$1,ind,lloc__$1))], null);\n} else {\nif(cljs.core.truth_((function (){var or__4126__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(pair),(2));\nif(or__4126__auto__){\nreturn or__4126__auto__;\n} else {\nvar and__4115__auto__ = modifier_QMARK___$2;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(pair),(3));\n} else {\nreturn and__4115__auto__;\n}\n}\n})())){\nvar hanging_width = (cljs.core.truth_(justify_width)?justify_width:arg_1_width);\nvar hanging_spaces = (cljs.core.truth_(justify_width)?((justify_width - arg_1_width) + (1)):(1));\nvar hanging_indent = (((1) + hanging_width) + ind);\nvar flow_indent = (indent__$1 + ind);\nif(cljs.core.truth_((function (){var and__4115__auto__ = (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(lloc__$1) : zprint.zfns.zstring.call(null,lloc__$1));\nif(cljs.core.truth_(and__4115__auto__)){\nvar and__4115__auto____$1 = zprint.zprint.keyword_fn_QMARK_(options,(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(lloc__$1) : zprint.zfns.zstring.call(null,lloc__$1)));\nif(cljs.core.truth_(and__4115__auto____$1)){\nreturn (zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1(rloc__$1) : zprint.zfns.zvector_QMARK_.call(null,rloc__$1));\n} else {\nreturn and__4115__auto____$1;\n}\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar vec__51488 = zprint.zprint.fzprint_hang_unless_fail(loptions,hanging_indent,flow_indent,zprint.zprint.fzprint_binding_vec,rloc__$1);\nvar hang_or_flow = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51488,(0),null);\nvar style_vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51488,(1),null);\nvar arg_1__$3 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(hang_or_flow,new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg_1__$2,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zprint.zprint.blanks(hanging_spaces),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null)], 0)):arg_1__$2);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [hang_or_flow,zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg_1__$3,style_vec], 0))], null);\n} else {\nvar ___$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-two-up: before hang.  hanging tried?\",((arg_1_fit_oneline_QMARK_) && (((cljs.core.not(flow_QMARK_)) && ((flow_indent >= hanging_indent)))))], 0)):null);\nvar hanging = ((((arg_1_fit_oneline_QMARK_) || (((cljs.core.not(flow_QMARK_)) && ((flow_indent >= hanging_indent))))))?(function (){var G__51491 = (((flow_indent < hanging_indent))?zprint.zprint.in_hang(local_roptions__$1):local_roptions__$1);\nvar G__51492 = hanging_indent;\nvar G__51493 = rloc__$1;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51491,G__51492,G__51493) : zprint.zprint.fzprint_STAR_.call(null,G__51491,G__51492,G__51493));\n})():null);\nvar hang_count = (zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(rloc__$1) : zprint.zfns.zcount.call(null,rloc__$1));\nvar ___$3 = zprint.zprint.log_lines(options,\"fzprint-two-up: hanging:\",hanging_indent,hanging);\nvar hanging_lines = zprint.zprint.style_lines(options,hanging_indent,hanging);\nvar fit_QMARK_ = zprint.zprint.fzfit_one_line(local_roptions__$1,hanging_lines);\nvar hanging_lines__$1 = ((fit_QMARK_)?hanging_lines:(cljs.core.truth_(((cljs.core.not(one_line_QMARK_))?hang_QMARK_:false))?hanging_lines:null));\nvar ___$4 = zprint.zprint.log_lines(options,\"fzprint-two-up: hanging-2:\",hanging_indent,hanging);\nvar flow_it_QMARK_ = ((((((cljs.core.not(hanging_lines__$1)) && (cljs.core.not(one_line_QMARK_)))) || (cljs.core.not((function (){var or__4126__auto__ = fit_QMARK_;\nif(or__4126__auto__){\nreturn or__4126__auto__;\n} else {\nreturn one_line_QMARK_;\n}\n})())))) && ((((flow_indent < hanging_indent)) || (cljs.core.not(hanging_lines__$1)))));\nvar ___$5 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-two-up: before flow. flow-it?\",flow_it_QMARK_], 0)):null);\nvar flow = ((flow_it_QMARK_)?(zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(roptions__$1,flow_indent,rloc__$1) : zprint.zprint.fzprint_STAR_.call(null,roptions__$1,flow_indent,rloc__$1)):null);\nvar ___$6 = zprint.zprint.log_lines(options,\"fzprint-two-up: flow:\",(indent__$1 + ind),flow);\nvar flow_lines = zprint.zprint.style_lines(options,(indent__$1 + ind),flow);\nif(cljs.core.truth_(dbg_local_QMARK_)){\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: local-hang:\",local_hang_QMARK_], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: one-line?:\",one_line_QMARK_], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: hanging-indent:\",hanging_indent], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: hanging-lines:\",hanging_lines__$1], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: flow?:\",flow_QMARK_], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: flow-it?:\",flow_it_QMARK_], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: fit?:\",fit_QMARK_], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: flow-indent:\",flow_indent], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: hanging:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(lloc__$1) : zprint.zfns.zstring.call(null,lloc__$1)),hanging], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: (+ indent ind):\",(indent__$1 + ind)], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: flow:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(lloc__$1) : zprint.zfns.zstring.call(null,lloc__$1)),flow], 0));\n} else {\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-two-up: before good-enough\"], 0));\n} else {\n}\n\nif(fit_QMARK_){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg_1__$2,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zprint.zprint.blanks(hanging_spaces),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),hanging], 0))], null);\n} else {\nif(cljs.core.truth_((function (){var or__4126__auto__ = hanging_lines__$1;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn flow_lines;\n}\n})())){\nif(cljs.core.truth_(zprint.zprint.good_enough_QMARK_(caller,roptions__$1,new cljs.core.Keyword(null,\"none-two-up\",\"none-two-up\",-457831686),hang_count,(hanging_indent - flow_indent),hanging_lines__$1,flow_lines))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg_1__$2,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zprint.zprint.blanks(hanging_spaces),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),hanging], 0))], null);\n} else {\nif(cljs.core.truth_(justify_width)){\nreturn null;\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"flow\",\"flow\",590489032),zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg_1__$2,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$1 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),flow], 0))], null);\n}\n}\n} else {\nreturn null;\n}\n}\n}\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"flow\",\"flow\",590489032),zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg_1__$2,(function (){var G__51494 = options;\nvar G__51495 = (indent__$1 + ind);\nvar G__51496 = (cljs.core.truth_(modifier_QMARK___$2)?cljs.core.nnext(pair):cljs.core.next(pair));\nvar G__51497 = new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826);\nvar G__51498 = new cljs.core.Keyword(null,\"newline-first\",\"newline-first\",-638470720);\nreturn (zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$5 ? zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$5(G__51494,G__51495,G__51496,G__51497,G__51498) : zprint.zprint.fzprint_flow_seq.call(null,G__51494,G__51495,G__51496,G__51497,G__51498));\n})()], 0))], null);\n\n}\n}\n}\n} else {\nreturn null;\n}\n});\n/**\n * Figure the width for a justification of a set of pairs in coll.  \n *   Also, decide if it makes any sense to justify the pairs at all.\n *   For instance, they all need to be one-line.\n */\nzprint.zprint.fzprint_justify_width = (function zprint$zprint$fzprint_justify_width(caller,p__51504,ind,coll){\nvar map__51505 = p__51504;\nvar map__51505__$1 = (((((!((map__51505 == null))))?(((((map__51505.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51505.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51505):map__51505);\nvar options = map__51505__$1;\nvar map__51506 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51505__$1,caller);\nvar map__51506__$1 = (((((!((map__51506 == null))))?(((((map__51506.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51506.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51506):map__51506);\nvar justify_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51506__$1,new cljs.core.Keyword(null,\"justify?\",\"justify?\",294994148));\nvar firsts = cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__51499_SHARP_){\nif((cljs.core.count(p1__51499_SHARP_) > (1))){\nvar G__51509 = options;\nvar G__51510 = ind;\nvar G__51511 = cljs.core.first(p1__51499_SHARP_);\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51509,G__51510,G__51511) : zprint.zprint.fzprint_STAR_.call(null,G__51509,G__51510,G__51511));\n} else {\nreturn null;\n}\n}),coll));\nvar style_seq = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$3(zprint.zprint.style_lines,options,ind),firsts);\nvar each_one_line_QMARK_ = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__51500_SHARP_,p2__51501_SHARP_){\nif(cljs.core.truth_(p1__51500_SHARP_)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p2__51501_SHARP_),(1));\n} else {\nreturn null;\n}\n}),true,style_seq);\nvar justify_width = (cljs.core.truth_(each_one_line_QMARK_)?cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__51502_SHARP_,p2__51503_SHARP_){\nvar x__4214__auto__ = p1__51502_SHARP_;\nvar y__4215__auto__ = cljs.core.second(p2__51503_SHARP_);\nreturn ((x__4214__auto__ > y__4215__auto__) ? x__4214__auto__ : y__4215__auto__);\n}),(0),style_seq):null);\nif(cljs.core.truth_(justify_width)){\nreturn (justify_width - ind);\n} else {\nreturn null;\n}\n});\n/**\n * Take a size and a collection of vectors with two or more elements\n *   per vector.  The elements are zlocs, the vectors are not.  Return\n *   the remaining character count or nil if it for sure doesn't fit.\n *   In order to be sure it doesn't fit, this version doesn't assume\n *   *any* separators, so it really underestimates the size.\n */\nzprint.zprint.fit_within_QMARK_ = (function zprint$zprint$fit_within_QMARK_(var_args){\nvar G__51513 = arguments.length;\nswitch (G__51513) {\ncase 3:\nreturn zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$3 = (function (size,coll,depth){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (size__$1,element){\nvar or__4126__auto__ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(depth,(0)))?zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$3(size__$1,element,(depth + (1))):(function (){var remaining = (size__$1 - cljs.core.count((zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(element) : zprint.zfns.zstring.call(null,element))));\nif((remaining > (0))){\nreturn remaining;\n} else {\nreturn null;\n}\n})());\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.reduced(null);\n}\n}),size,coll);\n}));\n\n(zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (size,coll){\nreturn zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$3(size,coll,(0));\n}));\n\n(zprint.zprint.fit_within_QMARK_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Convert a hangflow style-vec to a regular style-vec.\n */\nzprint.zprint.remove_hangflow = (function zprint$zprint$remove_hangflow(hf_style_vec){\nif(cljs.core.truth_(hf_style_vec)){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.second,hf_style_vec);\n} else {\nreturn null;\n}\n});\n/**\n * Accept a sequence of pairs, and map fzprint-two-up across those pairs.\n *   If you have :one-line? set, this will return nil if it is way over,\n *   but it can't accurately tell exactly what will fit on one line, since\n *   it doesn't know the separators and such.  So, :one-line? true is a\n *   performance optimization, so it doesn't do a whole huge map just to\n *   find out that it could not possibly have fit on one line.  So, this\n *   returns a sequence of style-vecs, where the indentation for the\n *   stuff inside of the pairs is already there, but the separators of\n *   the style-vecs (including indentation and commas) is done by the\n *   caller of fzprint-map-two-up. Always returns a sequence of vector pairs:\n *   [[:hang <style-vec-for-one-pair>] [:flow <style-vec-for-one-pair>] ...].\n *   If you want a style vec instead, call remove-hangflow on the return \n *   from fzprint-map-two-up.  This will use one-line?, but not check to see\n *   that it actually fits.  If you care about that, then you should check the\n *   return yourself.  It will, however, make an estimate of whether or not\n *   it will fit and if it clearly doesn't, it will return a nil.\n */\nzprint.zprint.fzprint_map_two_up = (function zprint$zprint$fzprint_map_two_up(caller,p__51514,ind,commas_QMARK_,coll){\nvar map__51515 = p__51514;\nvar map__51515__$1 = (((((!((map__51515 == null))))?(((((map__51515.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51515.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51515):map__51515);\nvar options = map__51515__$1;\nvar map__51516 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51515__$1,caller);\nvar map__51516__$1 = (((((!((map__51516 == null))))?(((((map__51516.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51516.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51516):map__51516);\nvar justify_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51516__$1,new cljs.core.Keyword(null,\"justify?\",\"justify?\",294994148));\nvar force_nl_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51516__$1,new cljs.core.Keyword(null,\"force-nl?\",\"force-nl?\",-1299761462));\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51515__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar rightcnt = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51515__$1,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070));\nvar one_line_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51515__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111));\nvar parallel_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51515__$1,new cljs.core.Keyword(null,\"parallel?\",\"parallel?\",-25273892));\nvar caller_map = (caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options));\nvar len = cljs.core.count(coll);\nvar justify_width = (cljs.core.truth_((function (){var and__4115__auto__ = justify_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not(one_line_QMARK_);\n} else {\nreturn and__4115__auto__;\n}\n})())?zprint.zprint.fzprint_justify_width(caller,options,ind,coll):null);\nvar caller_options = (cljs.core.truth_(justify_width)?(options.cljs$core$IFn$_invoke$arity$1 ? options.cljs$core$IFn$_invoke$arity$1(caller) : options.call(null,caller)):null);\nif(cljs.core.truth_((function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"dbg-print?\",\"dbg-print?\",-660113872).cljs$core$IFn$_invoke$arity$1(options);\n}\n})())){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-map-two-up: one-line?\",new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111).cljs$core$IFn$_invoke$arity$1(options),\"justify?:\",justify_QMARK_], 0));\n} else {\n}\n\nif(cljs.core.not((function (){var and__4115__auto__ = one_line_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nvar and__4115__auto____$1 = force_nl_QMARK_;\nif(cljs.core.truth_(and__4115__auto____$1)){\nreturn (len > (1));\n} else {\nreturn and__4115__auto____$1;\n}\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar justify_width__$1 = justify_width;\nvar justify_options = (cljs.core.truth_(justify_width__$1)?zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([options,cljs.core.PersistentArrayMap.createAsIfByAssoc([caller,(caller_options.cljs$core$IFn$_invoke$arity$1 ? caller_options.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"justify-hang\",\"justify-hang\",1083292243)) : caller_options.call(null,new cljs.core.Keyword(null,\"justify-hang\",\"justify-hang\",1083292243)))])], 0)),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tuning\",\"tuning\",-48660925),(caller_options.cljs$core$IFn$_invoke$arity$1 ? caller_options.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"justify-tuning\",\"justify-tuning\",-958931675)) : caller_options.call(null,new cljs.core.Keyword(null,\"justify-tuning\",\"justify-tuning\",-958931675)))], null)], 0)):options);\nwhile(true){\nvar beginning_coll = cljs.core.butlast(coll);\nvar beginning_remaining = (cljs.core.truth_(one_line_QMARK_)?zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$2((width - ind),beginning_coll):true);\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-map-two-up: remaining:\",(width - ind),\"beginning-remaining:\",beginning_remaining], 0)):null);\nvar beginning = (cljs.core.truth_(beginning_remaining)?zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$3(options,cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(zprint.zprint.fzprint_two_up,caller,justify_options,ind,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([commas_QMARK_,justify_width__$1,null], 0)),beginning_coll):null);\nvar beginning__$1 = (cljs.core.truth_(zprint.zprint.contains_nil_QMARK_(beginning))?null:beginning);\nvar end_coll = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.last(coll)], null);\nvar end_remaining = (cljs.core.truth_(one_line_QMARK_)?(function (){var and__4115__auto__ = beginning__$1;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$2((beginning_remaining - rightcnt),end_coll);\n} else {\nreturn and__4115__auto__;\n}\n})():true);\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-map-two-up: beginning-remaining:\",beginning_remaining,\"rightcnt:\",rightcnt,\"end-remaining:\",end_remaining], 0)):null);\nvar end = (cljs.core.truth_(end_remaining)?(function (){var temp__5735__auto__ = zprint.zprint.fzprint_two_up(caller,justify_options,ind,commas_QMARK_,justify_width__$1,new cljs.core.Keyword(null,\"rightmost-pair\",\"rightmost-pair\",-39229380),cljs.core.first(end_coll));\nif(cljs.core.truth_(temp__5735__auto__)){\nvar end_result = temp__5735__auto__;\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [end_result], null);\n} else {\nreturn null;\n}\n})():null);\nvar result = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len,(1)))?end:zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([beginning__$1,end], 0))\n);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-map-two-up: len:\",len,\"(nil? end):\",(end == null),\"end:\",end,\"(nil? beginning):\",(beginning__$1 == null),\"beginning:\",beginning__$1,\"(count end):\",cljs.core.count(end),\"(count beginnging):\",cljs.core.count(beginning__$1),\"justify-width:\",justify_width__$1,\"result:\",result], 0))], 0));\n} else {\n}\n\nif(cljs.core.truth_((function (){var or__4126__auto__ = result;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.not(justify_width__$1);\n}\n})())){\nreturn result;\n} else {\nvar G__52185 = null;\nvar G__52186 = options;\njustify_width__$1 = G__52185;\njustify_options = G__52186;\ncontinue;\n}\nbreak;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Do a key comparison that works well for numbers as well as\n *   strings.\n */\nzprint.zprint.compare_keys = (function zprint$zprint$compare_keys(x,y){\nif(((typeof x === 'number') && (typeof y === 'number'))){\nreturn cljs.core.compare(x,y);\n} else {\nreturn cljs.core.compare(cljs.core.str.cljs$core$IFn$_invoke$arity$1(x),cljs.core.str.cljs$core$IFn$_invoke$arity$1(y));\n\n}\n});\n/**\n * Do a key comparison that places ordered keys first.\n */\nzprint.zprint.compare_ordered_keys = (function zprint$zprint$compare_ordered_keys(key_value,zdotdotdot,x,y){\nif(cljs.core.truth_((function (){var and__4115__auto__ = (key_value.cljs$core$IFn$_invoke$arity$1 ? key_value.cljs$core$IFn$_invoke$arity$1(x) : key_value.call(null,x));\nif(cljs.core.truth_(and__4115__auto__)){\nreturn (key_value.cljs$core$IFn$_invoke$arity$1 ? key_value.cljs$core$IFn$_invoke$arity$1(y) : key_value.call(null,y));\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn cljs.core.compare((key_value.cljs$core$IFn$_invoke$arity$1 ? key_value.cljs$core$IFn$_invoke$arity$1(x) : key_value.call(null,x)),(key_value.cljs$core$IFn$_invoke$arity$1 ? key_value.cljs$core$IFn$_invoke$arity$1(y) : key_value.call(null,y)));\n} else {\nif(cljs.core.truth_((key_value.cljs$core$IFn$_invoke$arity$1 ? key_value.cljs$core$IFn$_invoke$arity$1(x) : key_value.call(null,x)))){\nreturn (-1);\n} else {\nif(cljs.core.truth_((key_value.cljs$core$IFn$_invoke$arity$1 ? key_value.cljs$core$IFn$_invoke$arity$1(y) : key_value.call(null,y)))){\nreturn (1);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(zdotdotdot,x)){\nreturn (1);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(zdotdotdot,y)){\nreturn (-1);\n} else {\nreturn zprint.zprint.compare_keys(x,y);\n\n}\n}\n}\n}\n}\n});\n/**\n * A variety of sorting and ordering options for the output of\n *   partition-all-2-nc.  It can sort, which is the default, but if\n *   the caller has a key-order vector, it will extract any keys in\n *   that vector and place them first (in order) before sorting the\n *   other keys.  If sorting is not called for, does nothing.\n */\nzprint.zprint.order_out = (function zprint$zprint$order_out(caller,p__51521,access,out){\nvar map__51522 = p__51521;\nvar map__51522__$1 = (((((!((map__51522 == null))))?(((((map__51522.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51522.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51522):map__51522);\nvar options = map__51522__$1;\nvar map__51523 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51522__$1,caller);\nvar map__51523__$1 = (((((!((map__51523 == null))))?(((((map__51523.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51523.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51523):map__51523);\nvar sort_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51523__$1,new cljs.core.Keyword(null,\"sort?\",\"sort?\",-567661924));\nvar sort_in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51523__$1,new cljs.core.Keyword(null,\"sort-in-code?\",\"sort-in-code?\",111878497));\nvar key_order = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51523__$1,new cljs.core.Keyword(null,\"key-order\",\"key-order\",-356936372));\nvar key_value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51523__$1,new cljs.core.Keyword(null,\"key-value\",\"key-value\",-34906839));\nvar in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51522__$1,new cljs.core.Keyword(null,\"in-code?\",\"in-code?\",194866464));\nif(cljs.core.truth_((function (){var and__4115__auto__ = sort_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nif(cljs.core.truth_(in_code_QMARK_)){\nreturn sort_in_code_QMARK_;\n} else {\nreturn true;\n}\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn cljs.core.sort.cljs$core$IFn$_invoke$arity$2((function (p1__51519_SHARP_,p2__51520_SHARP_){\nreturn cljs.core.partial.cljs$core$IFn$_invoke$arity$3(zprint.zprint.compare_ordered_keys,(function (){var or__4126__auto__ = key_value;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})(),(zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0 ? zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0() : zprint.zfns.zdotdotdot.call(null)))((function (){var G__51526 = (access.cljs$core$IFn$_invoke$arity$1 ? access.cljs$core$IFn$_invoke$arity$1(p1__51519_SHARP_) : access.call(null,p1__51519_SHARP_));\nreturn (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(G__51526) : zprint.zfns.zsexpr.call(null,G__51526));\n})(),(function (){var G__51527 = (access.cljs$core$IFn$_invoke$arity$1 ? access.cljs$core$IFn$_invoke$arity$1(p2__51520_SHARP_) : access.call(null,p2__51520_SHARP_));\nreturn (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(G__51527) : zprint.zfns.zsexpr.call(null,G__51527));\n})());\n}),out);\n} else {\nreturn out;\n}\n});\n/**\n * This checks to see if an element should be considered part of a\n *   pair if it comes between other elements, and a single element on\n *   its own if it would otherwise be the first part of a pair.  Mostly\n *   this will trigger on comments, but a #_(...) element will also\n *   trigger this, as will a newline if one appears.\n */\nzprint.zprint.pair_element_QMARK_ = (function zprint$zprint$pair_element_QMARK_(zloc){\nvar or__4126__auto__ = (zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcomment_QMARK_.call(null,zloc));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = (zprint.zfns.zuneval_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zuneval_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zuneval_QMARK_.call(null,zloc));\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nreturn (zprint.zfns.znewline_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.znewline_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.znewline_QMARK_.call(null,zloc));\n}\n}\n});\n/**\n * This checks to see if an element should be considered the middle element\n *   of a pair.  At some point, we can expand this, but for now there is only\n *   one middle element.\n */\nzprint.zprint.middle_element_QMARK_ = (function zprint$zprint$middle_element_QMARK_(p__51528,zloc){\nvar map__51529 = p__51528;\nvar map__51529__$1 = (((((!((map__51529 == null))))?(((((map__51529.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51529.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51529):map__51529);\nvar options = map__51529__$1;\nvar in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51529__$1,new cljs.core.Keyword(null,\"in-code?\",\"in-code?\",194866464));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(in_code_QMARK_,\"condp\")){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)),\":>>\");\n} else {\nreturn null;\n}\n});\n/**\n * If given a non-collection, simply does a dissoc of the key, but\n *   if given a sequence of keys, will remove the final one.\n */\nzprint.zprint.remove_key_seq = (function zprint$zprint$remove_key_seq(m,ks){\nif(cljs.core.coll_QMARK_(ks)){\nvar this_key = cljs.core.first(ks);\nvar next_key = cljs.core.next(ks);\nif(next_key){\nvar removed_map = (function (){var G__51531 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,this_key);\nvar G__51532 = cljs.core.next(ks);\nreturn (zprint.zprint.remove_key_seq.cljs$core$IFn$_invoke$arity$2 ? zprint.zprint.remove_key_seq.cljs$core$IFn$_invoke$arity$2(G__51531,G__51532) : zprint.zprint.remove_key_seq.call(null,G__51531,G__51532));\n})();\nif(cljs.core.empty_QMARK_(removed_map)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(m,this_key);\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,this_key,removed_map);\n}\n} else {\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(m,this_key);\n}\n} else {\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(m,ks);\n}\n});\n/**\n * Given a map and a key sequence, remove that key sequence if\n *   it appears in the map, and terminate the reduce if it changes\n *   the map.\n */\nzprint.zprint.ignore_key_seq_silent = (function zprint$zprint$ignore_key_seq_silent(m,ks){\nif(cljs.core.coll_QMARK_(ks)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m,ks,new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411)),new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411))){\nreturn m;\n} else {\nreturn zprint.zprint.remove_key_seq(m,ks);\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ks,new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411)),new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411))){\nreturn m;\n} else {\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(m,ks);\n}\n}\n});\n/**\n * Given a map and a key sequence, remove that key sequence if\n *   it appears in the map leaving behind a key :zprint-ignored, \n *   and terminate the reduce if it changes the map.\n */\nzprint.zprint.ignore_key_seq = (function zprint$zprint$ignore_key_seq(m,ks){\nif(cljs.core.coll_QMARK_(ks)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m,ks,new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411)),new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411))){\nreturn m;\n} else {\nreturn cljs.core.assoc_in(m,ks,new cljs.core.Keyword(null,\"zprint-ignored\",\"zprint-ignored\",434436784));\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ks,new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411)),new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411))){\nreturn m;\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,ks,new cljs.core.Keyword(null,\"zprint-ignored\",\"zprint-ignored\",434436784));\n}\n}\n});\n/**\n * Take a map and remove any of the key sequences specified from it.\n *   Note that this only works for sexpressions, not for actual zippers.\n */\nzprint.zprint.map_ignore = (function zprint$zprint$map_ignore(caller,p__51533,zloc){\nvar map__51534 = p__51533;\nvar map__51534__$1 = (((((!((map__51534 == null))))?(((((map__51534.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51534.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51534):map__51534);\nvar options = map__51534__$1;\nvar map__51535 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51534__$1,caller);\nvar map__51535__$1 = (((((!((map__51535 == null))))?(((((map__51535.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51535.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51535):map__51535);\nvar key_ignore = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51535__$1,new cljs.core.Keyword(null,\"key-ignore\",\"key-ignore\",75506668));\nvar key_ignore_silent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51535__$1,new cljs.core.Keyword(null,\"key-ignore-silent\",\"key-ignore-silent\",-1720115060));\nvar ignored_silent = (cljs.core.truth_(key_ignore_silent)?cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(zprint.zprint.ignore_key_seq_silent,zloc,key_ignore_silent):zloc);\nvar ignored = (cljs.core.truth_(key_ignore)?cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(zprint.zprint.ignore_key_seq,ignored_silent,key_ignore):ignored_silent);\nreturn ignored;\n});\n/**\n * Input is (zseqnws zloc) or (zseqnws-w-nl) where one assumes that\n *   these are pairs.  Thus, a seq of zlocs.  Output is a sequence of\n *   seqs, where the seqs are usually pairs, but might be single things.\n *   Doesn't pair up comments or #_(...) unevaled sexpressions.  The\n *   ones before the first part of a pair come as a single element in\n *   what would usually be a pair, and the ones between the first and\n *   second parts of a pair come inside the pair.  There may be an\n *   arbitrary number of elements between the first and second elements\n *   of the pair (one per line).  If there are any comments or unevaled\n *   sexpressions, don't sort the keys, as we might lose track of where\n *   the comments or unevaled s-expressions go.\n */\nzprint.zprint.partition_all_2_nc = (function zprint$zprint$partition_all_2_nc(options,coll){\nif(cljs.core.empty_QMARK_(coll)){\nreturn null;\n} else {\nvar max_length = zprint.zprint.get_max_length(options);\nvar remaining = coll;\nvar no_sort_QMARK_ = null;\nvar index = (0);\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(cljs.core.not(remaining)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [no_sort_QMARK_,cljs.core.persistent_BANG_(out)], null);\n} else {\nvar vec__51548 = (cljs.core.truth_(zprint.zprint.pair_element_QMARK_(cljs.core.first(remaining)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.next(remaining),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(remaining)], null),true], null):(cljs.core.truth_((function (){var or__4126__auto__ = zprint.zprint.pair_element_QMARK_(cljs.core.second(remaining));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn zprint.zprint.middle_element_QMARK_(options,cljs.core.second(remaining));\n}\n})())?(function (){var vec__51551 = cljs.core.split_with(((function (remaining,no_sort_QMARK_,index,out,max_length){\nreturn (function (p1__51538_SHARP_){\nvar or__4126__auto__ = zprint.zprint.pair_element_QMARK_(p1__51538_SHARP_);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn zprint.zprint.middle_element_QMARK_(options,p1__51538_SHARP_);\n}\n});})(remaining,no_sort_QMARK_,index,out,max_length))\n,cljs.core.next(remaining));\nvar comment_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51551,(0),null);\nvar rest_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51551,(1),null);\nif(cljs.core.truth_(cljs.core.first(rest_seq))){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.next(rest_seq),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(remaining)], null),comment_seq,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(rest_seq)], null)], 0))),true], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.next(remaining),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(remaining)], null),true], null);\n}\n})():((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(remaining),(1)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.next(remaining),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(remaining)], null),null], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.next(cljs.core.next(remaining)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(remaining),cljs.core.second(remaining)], null),null], null)\n)));\nvar new_remaining = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51548,(0),null);\nvar pair_vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51548,(1),null);\nvar new_no_sort_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51548,(2),null);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"partition-all-nc-new: pair-vec: first:\",(function (){var G__51554 = cljs.core.first(pair_vec);\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__51554) : zprint.zfns.zstring.call(null,G__51554));\n})(),\"first tag:\",(function (){var G__51555 = cljs.core.first(pair_vec);\nreturn (zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(G__51555) : zprint.zfns.ztag.call(null,G__51555));\n})(),\"count:\",cljs.core.count(pair_vec),\"last:\",(function (){var G__51556 = cljs.core.last(pair_vec);\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__51556) : zprint.zfns.zstring.call(null,G__51556));\n})()], 0))], 0));\n} else {\n}\n\nvar G__52201 = ((((index + (1)) < max_length))?new_remaining:(cljs.core.truth_(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((index + (1)),max_length))?new_remaining:false))?(new cljs.core.List(null,(zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0 ? zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0() : zprint.zfns.zdotdotdot.call(null)),null,(1),null)):null\n));\nvar G__52202 = (function (){var or__4126__auto__ = no_sort_QMARK_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new_no_sort_QMARK_;\n}\n})();\nvar G__52203 = (index + (1));\nvar G__52204 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,pair_vec);\nremaining = G__52201;\nno_sort_QMARK_ = G__52202;\nindex = G__52203;\nout = G__52204;\ncontinue;\n}\nbreak;\n}\n}\n});\n/**\n * Take a seq, and if it is contains a single symbol, simply return\n *   it in another seq.  If it contains something else, remove any non\n *   collections off of the end and return them in their own double seqs,\n *   as well as return the remainder (the beginning) as a double seq.\n */\nzprint.zprint.cleave_end = (function zprint$zprint$cleave_end(coll){\nif(cljs.core.truth_((function (){var or__4126__auto__ = (function (){var G__51559 = cljs.core.first(coll);\nreturn (zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1(G__51559) : zprint.zfns.zsymbol_QMARK_.call(null,G__51559));\n})();\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar G__51560 = cljs.core.first(coll);\nreturn (zprint.zfns.zreader_cond_w_symbol_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zreader_cond_w_symbol_QMARK_.cljs$core$IFn$_invoke$arity$1(G__51560) : zprint.zfns.zreader_cond_w_symbol_QMARK_.call(null,G__51560));\n}\n})())){\nreturn (new cljs.core.List(null,coll,null,(1),null));\n} else {\nvar rev_seq = cljs.core.reverse(coll);\nvar vec__51561 = cljs.core.split_with((function (p1__51557_SHARP_){\nreturn cljs.core.not((function (){var or__4126__auto__ = (zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__51557_SHARP_) : zprint.zfns.zcoll_QMARK_.call(null,p1__51557_SHARP_));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (zprint.zfns.zreader_cond_w_coll_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zreader_cond_w_coll_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__51557_SHARP_) : zprint.zfns.zreader_cond_w_coll_QMARK_.call(null,p1__51557_SHARP_));\n}\n})());\n}),rev_seq);\nvar split_non_coll = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51561,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51561,(1),null);\nvar split_non_coll__$1 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.list,cljs.core.reverse(split_non_coll));\nvar remainder = cljs.core.take.cljs$core$IFn$_invoke$arity$2((cljs.core.count(coll) - cljs.core.count(split_non_coll__$1)),coll);\nif(cljs.core.empty_QMARK_(remainder)){\nreturn split_non_coll__$1;\n} else {\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,remainder,null,(1),null)),split_non_coll__$1);\n}\n}\n});\n/**\n * Similar to partition-all-2-nc, but instead of trying to pair things\n *   up (modulo comments and unevaled expressions), this begins things\n *   with a symbol, and then accumulates collections until the next symbol.\n *   Returns a seq of seqs, where the first thing in each internal seq is\n *   a protocol and the remaining thing(s) in that seq are the expressions that\n *   follow.  If there is a single thing, it is returned in its own internal\n *   seq. ((P (foo [this a) (bar-me [this] b) (barx [this y] (+ c y))) ...)\n *   Made harder by the fact that the symbol might be inside of a #?() reader\n *   conditional.  It handles comments before symbols on the symbol indent, \n *   and the comments before the collections on the collection indent.  \n *   Since it doesn't know how many collections there are, this is not trivial.  \n *   Must be called with a sequence of z-things (these days called a zseq)\n */\nzprint.zprint.partition_all_sym = (function zprint$zprint$partition_all_sym(options,modifier_set,coll){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"partition-all-sym: coll:\",cljs.core.map.cljs$core$IFn$_invoke$arity$2(zprint.zfns.zstring,coll)], 0));\n} else {\n}\n\nvar part_sym = cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2((function (p1__51564_SHARP_){\nvar or__4126__auto__ = (zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__51564_SHARP_) : zprint.zfns.zsymbol_QMARK_.call(null,p1__51564_SHARP_));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = (zprint.zfns.znil_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.znil_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__51564_SHARP_) : zprint.zfns.znil_QMARK_.call(null,p1__51564_SHARP_));\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nreturn (zprint.zfns.zreader_cond_w_symbol_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zreader_cond_w_symbol_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__51564_SHARP_) : zprint.zfns.zreader_cond_w_symbol_QMARK_.call(null,p1__51564_SHARP_));\n}\n}\n}),coll);\nvar split_non_coll = cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(zprint.zprint.cleave_end,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([part_sym], 0));\nvar remaining = split_non_coll;\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(cljs.core.empty_QMARK_(remaining)){\nreturn cljs.core.persistent_BANG_(out);\n} else {\nvar vec__51605 = (cljs.core.truth_((function (){var and__4115__auto__ = (function (){var or__4126__auto__ = (function (){var G__51619 = cljs.core.ffirst(remaining);\nreturn (zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1(G__51619) : zprint.zfns.zsymbol_QMARK_.call(null,G__51619));\n})();\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = (function (){var G__51621 = cljs.core.ffirst(remaining);\nreturn (zprint.zfns.znil_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.znil_QMARK_.cljs$core$IFn$_invoke$arity$1(G__51621) : zprint.zfns.znil_QMARK_.call(null,G__51621));\n})();\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nvar G__51622 = cljs.core.ffirst(remaining);\nreturn (zprint.zfns.zreader_cond_w_symbol_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zreader_cond_w_symbol_QMARK_.cljs$core$IFn$_invoke$arity$1(G__51622) : zprint.zfns.zreader_cond_w_symbol_QMARK_.call(null,G__51622));\n}\n}\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nif((!(cljs.core.empty_QMARK_(cljs.core.second(remaining))))){\nvar or__4126__auto__ = (!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((function (){var G__51640 = cljs.core.first(cljs.core.second(remaining));\nreturn (zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(G__51640) : zprint.zfns.ztag.call(null,G__51640));\n})(),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((function (){var G__51641 = cljs.core.first(cljs.core.second(remaining));\nreturn (zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(G__51641) : zprint.zfns.ztag.call(null,G__51641));\n})(),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))))));\nif(or__4126__auto__){\nreturn or__4126__auto__;\n} else {\nvar G__51642 = cljs.core.last(cljs.core.second(remaining));\nreturn (zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1(G__51642) : zprint.zfns.zcoll_QMARK_.call(null,G__51642));\n}\n} else {\nreturn false;\n}\n} else {\nreturn and__4115__auto__;\n}\n})())?((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(cljs.core.first(remaining)),(1)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.nthnext(remaining,(2)),cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.first(remaining),cljs.core.second(remaining)))], null):(cljs.core.truth_((function (){var and__4115__auto__ = modifier_set;\nif(cljs.core.truth_(and__4115__auto__)){\nvar G__51643 = (function (){var G__51644 = cljs.core.ffirst(remaining);\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__51644) : zprint.zfns.zstring.call(null,G__51644));\n})();\nreturn (modifier_set.cljs$core$IFn$_invoke$arity$1 ? modifier_set.cljs$core$IFn$_invoke$arity$1(G__51643) : modifier_set.call(null,G__51643));\n} else {\nreturn and__4115__auto__;\n}\n})())?((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(cljs.core.first(remaining)),(2)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.nthnext(remaining,(2)),cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.first(remaining),cljs.core.second(remaining)))], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((cljs.core.next(cljs.core.next(cljs.core.first(remaining))))?cljs.core.cons(cljs.core.next(cljs.core.next(cljs.core.first(remaining))),cljs.core.next(remaining)):cljs.core.next(remaining)),cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,(new cljs.core.List(null,cljs.core.ffirst(remaining),(new cljs.core.List(null,cljs.core.second(cljs.core.first(remaining)),null,(1),null)),(2),null)))], null)):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cons(cljs.core.next(cljs.core.first(remaining)),cljs.core.next(remaining)),cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,(new cljs.core.List(null,cljs.core.ffirst(remaining),null,(1),null)))], null))):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.next(remaining),cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,cljs.core.first(remaining))], null)\n);\nvar next_remaining = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51605,(0),null);\nvar new_out = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51605,(1),null);\nvar G__52206 = next_remaining;\nvar G__52207 = new_out;\nremaining = G__52206;\nout = G__52207;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Create an r-str-vec with, possibly, a newline at the beginning if\n *   the last thing before it is a comment.\n */\nzprint.zprint.rstr_vec = (function zprint$zprint$rstr_vec(var_args){\nvar G__51646 = arguments.length;\nswitch (G__51646) {\ncase 5:\nreturn zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ncase 4:\nreturn zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$5 = (function (options,ind,zloc,r_str,r_type){\nvar nl = (cljs.core.truth_((function (){var G__51647 = (zprint.zfns.zlast.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zlast.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zlast.call(null,zloc));\nreturn (zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1(G__51647) : zprint.zfns.zcomment_QMARK_.call(null,G__51647));\n})())?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(ind))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null):null);\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(nl,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r_str,zprint.zprint.zcolor_map(options,(function (){var or__4126__auto__ = r_type;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn r_str;\n}\n})()),(function (){var or__4126__auto__ = r_type;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"right\",\"right\",-452581833);\n}\n})()], null)], null));\n}));\n\n(zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4 = (function (options,ind,zloc,r_str){\nreturn zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$5(options,ind,zloc,r_str,null);\n}));\n\n(zprint.zprint.rstr_vec.cljs$lang$maxFixedArity = 5);\n\nzprint.zprint.fzprint_binding_vec = (function zprint$zprint$fzprint_binding_vec(p__51648,ind,zloc){\nvar map__51649 = p__51648;\nvar map__51649__$1 = (((((!((map__51649 == null))))?(((((map__51649.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51649.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51649):map__51649);\nvar options = map__51649__$1;\nvar map__51650 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51649__$1,new cljs.core.Keyword(null,\"binding\",\"binding\",539932593));\nvar map__51650__$1 = (((((!((map__51650 == null))))?(((((map__51650.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51650.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51650):map__51650);\nvar nl_separator_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51650__$1,new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-binding-vec: ind:\",ind,\"zloc:\",(function (){var G__51653 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst.call(null,zloc));\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__51653) : zprint.zfns.zstring.call(null,G__51653));\n})()], 0));\n} else {\n}\n\nvar options__$1 = zprint.zprint.rightmost(options);\nvar l_str = \"[\";\nvar r_str = \"]\";\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options__$1,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options__$1,(ind + (1)),zloc,r_str);\nvar value__51281__auto__ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcount.call(null,zloc)),(0)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,r_str_vec], 0)):zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,(function (){var G__51654 = new cljs.core.Keyword(null,\"binding\",\"binding\",539932593).cljs$core$IFn$_invoke$arity$1(options__$1);\nvar G__51655 = (ind + (1));\nvar G__51656 = zprint.zprint.fzprint_map_two_up(new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),options__$1,(ind + (1)),false,cljs.core.second(zprint.zprint.partition_all_2_nc(options__$1,(zprint.zfns.zseqnws.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zseqnws.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zseqnws.call(null,zloc)))));\nreturn (zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3(G__51654,G__51655,G__51656) : zprint.zprint.interpose_nl_hf.call(null,G__51654,G__51655,G__51656));\n})(),r_str_vec], 0)));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),\"fzprint-binding-vec exit:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([value__51281__auto__], 0))], 0));\n} else {\n}\n\nreturn value__51281__auto__;\n});\n/**\n * Try to hang something and try to flow it, and then see which is\n *   better.  Has hang and flow indents. fzfn is the function to use \n *   to do zloc.  Note what fzfn does with the input.  For instance,\n *   fzprint-pairs does a (zmap-right identity zloc).  Presumably the\n *   caller knows what the fzfn does, so it has to count the items\n *   itself and pass it in here as zloc-count if it isn't just (zcount zloc).\n */\nzprint.zprint.fzprint_hang = (function zprint$zprint$fzprint_hang(p__51657,caller,hindent,findent,fzfn,zloc_count,zloc){\nvar map__51658 = p__51657;\nvar map__51658__$1 = (((((!((map__51658 == null))))?(((((map__51658.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51658.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51658):map__51658);\nvar options = map__51658__$1;\nvar one_line_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51658__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111));\nvar hanging = (cljs.core.truth_(((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(hindent,findent))?(function (){var and__4115__auto__ = (function (){var fexpr__51663 = (options.cljs$core$IFn$_invoke$arity$1 ? options.cljs$core$IFn$_invoke$arity$1(caller) : options.call(null,caller));\nreturn (fexpr__51663.cljs$core$IFn$_invoke$arity$1 ? fexpr__51663.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854)) : fexpr__51663.call(null,new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854)));\n})();\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not((function (){var G__51664 = cljs.core.first(zloc);\nreturn (zprint.zfns.znewline_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.znewline_QMARK_.cljs$core$IFn$_invoke$arity$1(G__51664) : zprint.zfns.znewline_QMARK_.call(null,G__51664));\n})());\n} else {\nreturn and__4115__auto__;\n}\n})():false))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),(function (){var G__51665 = zprint.zprint.in_hang(options);\nvar G__51666 = hindent;\nvar G__51667 = zloc;\nreturn (fzfn.cljs$core$IFn$_invoke$arity$3 ? fzfn.cljs$core$IFn$_invoke$arity$3(G__51665,G__51666,G__51667) : fzfn.call(null,G__51665,G__51666,G__51667));\n})()], 0)):null);\nvar hanging__$1 = ((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.second(hanging),(2)),new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405)))?hanging:null);\nvar hang_count = (function (){var or__4126__auto__ = zloc_count;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcount.call(null,zloc));\n}\n})();\nvar hr_lines = zprint.zprint.style_lines(options,(hindent - (1)),hanging__$1);\nif(cljs.core.truth_((function (){var or__4126__auto__ = zprint.zprint.fzfit_one_line(options,hr_lines);\nif(or__4126__auto__){\nreturn or__4126__auto__;\n} else {\nreturn one_line_QMARK_;\n}\n})())){\nreturn hanging__$1;\n} else {\nvar flow = zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(findent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),(fzfn.cljs$core$IFn$_invoke$arity$3 ? fzfn.cljs$core$IFn$_invoke$arity$3(options,findent,zloc) : fzfn.call(null,options,findent,zloc))], 0));\nvar _ = zprint.zprint.log_lines(options,\"fzprint-hang: flow:\",findent,flow);\nvar fd_lines = zprint.zprint.style_lines(options,findent,flow);\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang: ending: hang-count:\",hang_count,\"hanging:\",hanging__$1,\"flow:\",flow], 0)):null);\nvar hr_good_QMARK_ = (cljs.core.truth_(new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854).cljs$core$IFn$_invoke$arity$1((caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options))))?zprint.zprint.good_enough_QMARK_(caller,options,new cljs.core.Keyword(null,\"none-hang\",\"none-hang\",-1101780299),hang_count,(hindent - findent),hr_lines,fd_lines):null);\nif(cljs.core.truth_(hr_good_QMARK_)){\nreturn hanging__$1;\n} else {\nreturn flow;\n}\n}\n});\n/**\n * Always prints pairs on a different line from other pairs. Takes a zloc-seq\n */\nzprint.zprint.fzprint_pairs = (function zprint$zprint$fzprint_pairs(p__51668,ind,zloc_seq){\nvar map__51669 = p__51668;\nvar map__51669__$1 = (((((!((map__51669 == null))))?(((((map__51669.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51669.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51669):map__51669);\nvar options = map__51669__$1;\nvar map__51670 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51669__$1,new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312));\nvar map__51670__$1 = (((((!((map__51670 == null))))?(((((map__51670.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51670.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51670):map__51670);\nvar nl_separator_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51670__$1,new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-pairs:\",(function (){var G__51673 = cljs.core.first(zloc_seq);\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__51673) : zprint.zfns.zstring.call(null,G__51673));\n})()], 0))], 0));\n} else {\n}\n\nvar value__51281__auto__ = (function (){var G__51674 = new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312).cljs$core$IFn$_invoke$arity$1(options);\nvar G__51675 = ind;\nvar G__51676 = zprint.zprint.fzprint_map_two_up(new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),options,ind,false,(function (){var vec__51677 = zprint.zprint.partition_all_2_nc(options,zloc_seq);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51677,(0),null);\nvar part = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51677,(1),null);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-pairs: partition:\",cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(zprint.zfns.zstring,cljs.core.first),part)], 0));\n} else {\n}\n\nreturn part;\n})());\nreturn (zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3(G__51674,G__51675,G__51676) : zprint.zprint.interpose_nl_hf.call(null,G__51674,G__51675,G__51676));\n})();\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-pairs: exit:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([value__51281__auto__], 0))], 0));\n} else {\n}\n\nreturn value__51281__auto__;\n});\n/**\n * Print things with a symbol and collections following.  Kind of like with\n *   pairs, but not quite. Takes a zloc-seq.\n */\nzprint.zprint.fzprint_extend = (function zprint$zprint$fzprint_extend(p__51681,ind,zloc_seq){\nvar map__51682 = p__51681;\nvar map__51682__$1 = (((((!((map__51682 == null))))?(((((map__51682.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51682.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51682):map__51682);\nvar options = map__51682__$1;\nvar map__51683 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51682__$1,new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006));\nvar map__51683__$1 = (((((!((map__51683 == null))))?(((((map__51683.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51683.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51683):map__51683);\nvar nl_separator_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51683__$1,new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-extend:\",(function (){var G__51686 = cljs.core.first(zloc_seq);\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__51686) : zprint.zfns.zstring.call(null,G__51686));\n})()], 0));\n} else {\n}\n\nvar value__51281__auto__ = (function (){var G__51687 = new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006).cljs$core$IFn$_invoke$arity$1(options);\nvar G__51688 = ind;\nvar G__51689 = zprint.zprint.fzprint_map_two_up(new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"fn-style\",\"fn-style\",1330516917),new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204)),ind,false,(function (){var part = zprint.zprint.partition_all_sym(options,new cljs.core.Keyword(null,\"modifiers\",\"modifiers\",50378834).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006).cljs$core$IFn$_invoke$arity$1(options)),zloc_seq);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-extend: partition:\",cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__51680_SHARP_){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(zprint.zfns.zstring,p1__51680_SHARP_);\n}),part)], 0));\n} else {\n}\n\nreturn part;\n})());\nreturn (zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3(G__51687,G__51688,G__51689) : zprint.zprint.interpose_nl_hf.call(null,G__51687,G__51688,G__51689));\n})();\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-extend: exit:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([value__51281__auto__], 0))], 0));\n} else {\n}\n\nreturn value__51281__auto__;\n});\n/**\n * Given a transient vector v, concatenate all of the other\n *   elements in all of the remaining collections onto v.\n */\nzprint.zprint.concatv_BANG_ = (function zprint$zprint$concatv_BANG_(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___52223 = arguments.length;\nvar i__4737__auto___52224 = (0);\nwhile(true){\nif((i__4737__auto___52224 < len__4736__auto___52223)){\nargs__4742__auto__.push((arguments[i__4737__auto___52224]));\n\nvar G__52225 = (i__4737__auto___52224 + (1));\ni__4737__auto___52224 = G__52225;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn zprint.zprint.concatv_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(zprint.zprint.concatv_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (v,rest){\nvar cols = rest;\nvar out = v;\nwhile(true){\nif(cljs.core.truth_(cols)){\nvar G__52226 = cljs.core.next(cols);\nvar G__52227 = (function (){var col = cljs.core.first(cols);\nvar out__$1 = out;\nwhile(true){\nif(cljs.core.truth_(col)){\nvar G__52228 = cljs.core.next(col);\nvar G__52229 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out__$1,cljs.core.first(col));\ncol = G__52228;\nout__$1 = G__52229;\ncontinue;\n} else {\nreturn out__$1;\n}\nbreak;\n}\n})();\ncols = G__52226;\nout = G__52227;\ncontinue;\n} else {\nreturn out;\n}\nbreak;\n}\n}));\n\n(zprint.zprint.concatv_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(zprint.zprint.concatv_BANG_.cljs$lang$applyTo = (function (seq51690){\nvar G__51691 = cljs.core.first(seq51690);\nvar seq51690__$1 = cljs.core.next(seq51690);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__51691,seq51690__$1);\n}));\n\n/**\n * Do a fzprint-seq like thing, but do it incrementally and\n *   if it gets too big, return nil.\n */\nzprint.zprint.fzprint_one_line = (function zprint$zprint$fzprint_one_line(options,ind,zloc_seq){\nif(cljs.core.truth_((function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"dbg-print?\",\"dbg-print?\",-660113872).cljs$core$IFn$_invoke$arity$1(options);\n}\n})())){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-one-line:\"], 0));\n} else {\n}\n\nvar seq_right = zloc_seq;\nvar len = cljs.core.count(seq_right);\nvar last_index = (len - (1));\nvar gt_1_QMARK_ = (cljs.core.count(seq_right) > (1));\nvar options__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111),true);\nvar zloc_seq__$1 = seq_right;\nvar new_ind = cljs.core.long$(ind);\nvar index = (0);\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(cljs.core.empty_QMARK_(zloc_seq__$1)){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),\"fzprint-one-line: exiting count:\",cljs.core.count(out)], 0));\n} else {\n}\n\nreturn cljs.core.persistent_BANG_(out);\n} else {\nvar next_zloc = cljs.core.first(zloc_seq__$1);\nvar vec__51698 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(index,last_index))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(((!((index === (0)))))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null):null),options__$1], null):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(index,(0)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,zprint.zprint.not_rightmost(options__$1)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),zprint.zprint.not_rightmost(options__$1)], null)\n));\nvar sep = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51698,(0),null);\nvar next_options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51698,(1),null);\nvar next_out = (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(next_options,new_ind,next_zloc) : zprint.zprint.fzprint_STAR_.call(null,next_options,new_ind,next_zloc));\nvar _ = zprint.zprint.log_lines(options__$1,\"fzprint-one-line:\",new_ind,next_out);\nvar vec__51701 = zprint.zprint.style_lines(options__$1,new_ind,next_out);\nvar line_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51701,(0),null);\nvar max_width = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51701,(1),null);\nvar next_lines = vec__51701;\nif((!(zprint.zprint.fzfit_one_line(next_options,next_lines)))){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),\"fzprint-one-line: failed, too wide or too many lines!\"], 0));\n} else {\n}\n\nreturn null;\n} else {\nvar G__52235 = cljs.core.next(zloc_seq__$1);\nvar G__52236 = (cljs.core.long$(max_width) + (1));\nvar G__52237 = (index + (1));\nvar G__52238 = zprint.zprint.concatv_BANG_.cljs$core$IFn$_invoke$arity$variadic(out,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([sep,next_out], 0));\nzloc_seq__$1 = G__52235;\nnew_ind = G__52236;\nindex = G__52237;\nout = G__52238;\ncontinue;\n}\n}\nbreak;\n}\n});\n/**\n * Take a seq of a zloc, created by (zmap identity zloc) when zloc\n *   is a collection, or (zmap-right identity zloc) when zloc is already\n *   inside of a collection, and return a seq of the fzprint* of each \n *   element.  No spacing between any of these elements. Note that this\n *   is not a style-vec, but a seq of style-vecs of each of the elements.\n *   These would need to be concatenated together to become a style-vec.\n *   ind is either a constant or a seq of indents, one for each element in\n *   zloc-seq.\n */\nzprint.zprint.fzprint_seq = (function zprint$zprint$fzprint_seq(options,ind,zloc_seq){\nvar max_length = zprint.zprint.get_max_length(options);\nvar len = cljs.core.count(zloc_seq);\nvar zloc_seq__$1 = (((len > max_length))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.take.cljs$core$IFn$_invoke$arity$2(max_length,zloc_seq),(new cljs.core.List(null,(zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0 ? zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0() : zprint.zfns.zdotdotdot.call(null)),null,(1),null))):zloc_seq);\nvar len__$1 = cljs.core.count(zloc_seq__$1);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-seq: (count zloc-seq):\",len__$1,\"max-length:\",max_length,\"ind:\",ind], 0));\n} else {\n}\n\nif(cljs.core.empty_QMARK_(zloc_seq__$1)){\nreturn null;\n} else {\nif((max_length === (0))){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"#?#\",zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null)], null);\n} else {\nvar left = zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$4(options,(function (p1__51704_SHARP_,p2__51705_SHARP_){\nvar G__51706 = zprint.zprint.not_rightmost(options);\nvar G__51707 = p1__51704_SHARP_;\nvar G__51708 = p2__51705_SHARP_;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51706,G__51707,G__51708) : zprint.zprint.fzprint_STAR_.call(null,G__51706,G__51707,G__51708));\n}),((cljs.core.coll_QMARK_(ind))?ind:cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(ind)),cljs.core.butlast(zloc_seq__$1));\nvar right = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__51709 = options;\nvar G__51710 = ((cljs.core.coll_QMARK_(ind))?cljs.core.last(ind):ind);\nvar G__51711 = cljs.core.last(zloc_seq__$1);\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51709,G__51710,G__51711) : zprint.zprint.fzprint_STAR_.call(null,G__51709,G__51710,G__51711));\n})()], null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$1,(1))){\nreturn right;\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([left,right], 0));\n\n}\n\n}\n}\n});\n/**\n * Take a seq of a zloc, created by (zmap identity zloc) and return\n *   a style-vec of the result.  Either it fits on one line, or it is\n *   rendered on multiple lines.  You can force multiple lines with\n *   force-nl?. If you want it to do less than everything in the\n *   original zloc, modify the result of (zmap identity zloc) to just\n *   contain what you want to print. ind is either a single indent,\n *   or a seq of indents, one for each element in zloc-seq.  Don't\n *   concatenate an indent/newline on to the beginning of the output\n *   from this routine.  Let this routine do it for you, as it needs\n *   to know one is there in order to properly deal with any newlines\n *   in the actual stream.  Else you will get two where you only should\n *   have one.\n */\nzprint.zprint.fzprint_flow_seq = (function zprint$zprint$fzprint_flow_seq(var_args){\nvar G__51713 = arguments.length;\nswitch (G__51713) {\ncase 5:\nreturn zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ncase 3:\nreturn zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$5 = (function (options,ind,zloc_seq,force_nl_QMARK_,nl_first_QMARK_){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-flow-seq: count zloc-seq:\",cljs.core.count(zloc_seq)], 0));\n} else {\n}\n\nvar coll_print = zprint.zprint.fzprint_seq(options,ind,zloc_seq);\nvar one_line = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),coll_print));\nvar _ = zprint.zprint.log_lines(options,\"fzprint-flow-seq:\",ind,one_line);\nvar one_line_lines = zprint.zprint.style_lines(options,ind,one_line);\nvar value__51281__auto__ = ((((cljs.core.not(force_nl_QMARK_)) && (zprint.zprint.fzfit_one_line(options,one_line_lines))))?one_line:cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,(function (){var G__51714 = ind;\nvar G__51715 = coll_print;\nvar G__51716 = cljs.core.not(nl_first_QMARK_);\nreturn (zprint.zprint.precede_w_nl.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.precede_w_nl.cljs$core$IFn$_invoke$arity$3(G__51714,G__51715,G__51716) : zprint.zprint.precede_w_nl.call(null,G__51714,G__51715,G__51716));\n})()));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-flow-seq: exit:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([value__51281__auto__], 0))], 0));\n} else {\n}\n\nreturn value__51281__auto__;\n}));\n\n(zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$3 = (function (options,ind,zloc_seq){\nreturn zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$5(options,ind,zloc_seq,null,null);\n}));\n\n(zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$4 = (function (options,ind,zloc_seq,force_nl_QMARK_){\nreturn zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$5(options,ind,zloc_seq,force_nl_QMARK_,null);\n}));\n\n(zprint.zprint.fzprint_flow_seq.cljs$lang$maxFixedArity = 5);\n\n/**\n * Try out the given zloc, and if it fits on the current line, just\n *   do that. It might fit on the same line, as this may not be the rest\n *   of the list that we are printing. If not, check it out with good-enough?\n *   and do the best you can.  Three choices, really: fits on same line, \n *   does ok as hanging, or better with flow. hindent is hang-indent, and \n *   findent is flow-indent, and each contains the initial separator.  \n *   Might be nice if the fn-style actually got sent to this fn.\n */\nzprint.zprint.fzprint_hang_one = (function zprint$zprint$fzprint_hang_one(caller,p__51717,hindent,findent,zloc){\nvar map__51718 = p__51717;\nvar map__51718__$1 = (((((!((map__51718 == null))))?(((((map__51718.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51718.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51718):map__51718);\nvar options = map__51718__$1;\nvar map__51719 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51718__$1,caller);\nvar map__51719__$1 = (((((!((map__51719 == null))))?(((((map__51719.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51719.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51719):map__51719);\nvar hang_avoid = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51719__$1,new cljs.core.Keyword(null,\"hang-avoid\",\"hang-avoid\",-138703568));\nvar one_line_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51718__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111));\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51718__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-hang-one:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)),\" hindent:\",hindent,\"findent:\",findent], 0))], 0));\n} else {\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg-hang\",\"dbg-hang\",-1928862076).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([zprint.zprint.dots(new cljs.core.Keyword(null,\"pdepth\",\"pdepth\",-1943862342).cljs$core$IFn$_invoke$arity$1(options)),\"h1 caller:\",caller,(function (){var G__51722 = (cljs.core.truth_((zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcoll_QMARK_.call(null,zloc)))?(zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst.call(null,zloc)):zloc);\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__51722) : zprint.zfns.zstring.call(null,G__51722));\n})()], 0));\n} else {\n}\n\nvar local_options = ((((cljs.core.not(one_line_QMARK_)) && (cljs.core.not(new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854).cljs$core$IFn$_invoke$arity$1((caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options)))))))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111),true):options);\nvar hindent__$1 = (function (){var or__4126__auto__ = hindent;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn findent;\n}\n})();\nvar hang_count = (zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcount.call(null,zloc));\nvar hanging = ((((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(hindent__$1,findent)) && (((cljs.core.not(hang_avoid)) || ((hang_count < ((width - hindent__$1) * hang_avoid)))))))?(function (){var G__51723 = zprint.zprint.in_hang(local_options);\nvar G__51724 = hindent__$1;\nvar G__51725 = zloc;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51723,G__51724,G__51725) : zprint.zprint.fzprint_STAR_.call(null,G__51723,G__51724,G__51725));\n})():null);\nvar hanging__$1 = zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),hanging], 0));\nvar _ = zprint.zprint.log_lines(options,\"fzprint-hang-one: hanging:\",(hindent__$1 - (1)),hanging__$1);\nvar hr_lines = zprint.zprint.style_lines(options,(hindent__$1 - (1)),hanging__$1);\n\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-one: hr-lines:\",hr_lines,\"hang-count:\",hang_count], 0));\n} else {\n}\n\nif(cljs.core.truth_((function (){var or__4126__auto__ = zprint.zprint.fzfit_one_line(options,hr_lines);\nif(or__4126__auto__){\nreturn or__4126__auto__;\n} else {\nreturn one_line_QMARK_;\n}\n})())){\nreturn hanging__$1;\n} else {\nvar flow = zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(findent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),(zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(options,findent,zloc) : zprint.zprint.fzprint_STAR_.call(null,options,findent,zloc))], 0));\nvar ___$1 = zprint.zprint.log_lines(options,\"fzprint-hang-one: flow:\",findent,flow);\nvar fd_lines = zprint.zprint.style_lines(options,findent,flow);\nvar ___$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-one: fd-lines:\",fd_lines], 0)):null);\nvar ___$3 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-one: ending: hang-count:\",hang_count,\"hanging:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([hanging__$1], 0)),\"flow:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([flow], 0))], 0)):null);\nvar hr_good_QMARK_ = (function (){var and__4115__auto__ = new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854).cljs$core$IFn$_invoke$arity$1((caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options)));\nif(cljs.core.truth_(and__4115__auto__)){\nreturn zprint.zprint.good_enough_QMARK_(caller,options,new cljs.core.Keyword(null,\"none-hang-one\",\"none-hang-one\",-1392848107),hang_count,(hindent__$1 - findent),hr_lines,fd_lines);\n} else {\nreturn and__4115__auto__;\n}\n})();\nif(cljs.core.truth_(hr_good_QMARK_)){\nreturn hanging__$1;\n} else {\nreturn flow;\n}\n}\n});\n/**\n * Given a seq of zlocs, work backwards from the end, and see how\n *   many elements are pairs of constants (using zconstant?).  So that\n *   (... :a (stuff) :b (bother)) returns 4, since both :a and :b are\n *   zconstant? true. This is made more difficult by having to skip\n *   comments along the way as part of the pair check, but keep track\n *   of the ones we skip so the count is right in the end.  We don't\n *   expect any whitespace in this, because this seq should have been\n *   produced by zmap-right or its equivalent, which already skips the\n *   whitespace.\n */\nzprint.zprint.count_constant_pairs = (function zprint$zprint$count_constant_pairs(seq_right){\nvar seq_right_rev = cljs.core.reverse(seq_right);\nvar element_count = (0);\nvar constant_required_QMARK_ = null;\nvar pair_size = (0);\nwhile(true){\nvar element = cljs.core.first(seq_right_rev);\nif(cljs.core.empty_QMARK_(seq_right_rev)){\nreturn (element_count - pair_size);\n} else {\nvar comment_or_newline_QMARK_ = (zprint.zprint.zcomment_or_newline_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.zcomment_or_newline_QMARK_.cljs$core$IFn$_invoke$arity$1(element) : zprint.zprint.zcomment_or_newline_QMARK_.call(null,element));\nif(cljs.core.truth_(((cljs.core.not(comment_or_newline_QMARK_))?(function (){var and__4115__auto__ = constant_required_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not((zprint.zfns.zconstant_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zconstant_QMARK_.cljs$core$IFn$_invoke$arity$1(element) : zprint.zfns.zconstant_QMARK_.call(null,element)));\n} else {\nreturn and__4115__auto__;\n}\n})():false))){\nreturn (element_count - pair_size);\n} else {\nvar G__52248 = cljs.core.next(seq_right_rev);\nvar G__52249 = (element_count + (1));\nvar G__52250 = (cljs.core.truth_(comment_or_newline_QMARK_)?constant_required_QMARK_:cljs.core.not(constant_required_QMARK_));\nvar G__52251 = (cljs.core.truth_((function (){var and__4115__auto__ = constant_required_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not(comment_or_newline_QMARK_);\n} else {\nreturn and__4115__auto__;\n}\n})())?(0):(pair_size + (1)));\nseq_right_rev = G__52248;\nelement_count = G__52249;\nconstant_required_QMARK_ = G__52250;\npair_size = G__52251;\ncontinue;\n}\n}\nbreak;\n}\n});\n/**\n * Argument is a zloc-seq.  Output is a [pair-seq non-paired-item-count],\n *   if any.  If there are no pair-seqs, pair-seq must be nil, not an\n *   empty seq.  This will largely ignore newlines.\n */\nzprint.zprint.constant_pair = (function zprint$zprint$constant_pair(caller,p__51726,seq_right){\nvar map__51727 = p__51726;\nvar map__51727__$1 = (((((!((map__51727 == null))))?(((((map__51727.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51727.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51727):map__51727);\nvar options = map__51727__$1;\nvar map__51728 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51727__$1,caller);\nvar map__51728__$1 = (((((!((map__51728 == null))))?(((((map__51728.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51728.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51728):map__51728);\nvar constant_pair_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51728__$1,new cljs.core.Keyword(null,\"constant-pair?\",\"constant-pair?\",-1009181437));\nvar constant_pair_min = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51728__$1,new cljs.core.Keyword(null,\"constant-pair-min\",\"constant-pair-min\",1245759721));\nif(cljs.core.truth_(constant_pair_QMARK_)){\nvar paired_item_count = zprint.zprint.count_constant_pairs(seq_right);\nvar non_paired_item_count = (cljs.core.count(seq_right) - paired_item_count);\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"constant-pair: non-paired-items:\",non_paired_item_count], 0)):null);\nvar pair_seq = (((paired_item_count >= constant_pair_min))?cljs.core.drop.cljs$core$IFn$_invoke$arity$2(non_paired_item_count,seq_right):null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pair_seq,non_paired_item_count], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,cljs.core.count(seq_right)], null);\n}\n});\n/**\n * If this zloc is a comment or a newline, return true.\n */\nzprint.zprint.zcomment_or_newline_QMARK_ = (function zprint$zprint$zcomment_or_newline_QMARK_(zloc){\nvar or__4126__auto__ = (zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcomment_QMARK_.call(null,zloc));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (zprint.zfns.znewline_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.znewline_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.znewline_QMARK_.call(null,zloc));\n}\n});\n/**\n * Given a style-vec, ensure it starts with a newline.  If it doesn't,\n *   then put one in.  We could take the whole newline, but the indent is\n *   really the only unique thing.\n */\nzprint.zprint.ensure_start_w_nl = (function zprint$zprint$ensure_start_w_nl(ind,style_vec){\nvar element_type = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(style_vec),(2));\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(element_type,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(element_type,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125))))){\nreturn style_vec;\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(ind))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),style_vec], 0));\n}\n});\n/**\n * Given a style-vec, ensure it ends with a newline.  If it doesn't,\n *   then put one in.\n */\nzprint.zprint.ensure_end_w_nl = (function zprint$zprint$ensure_end_w_nl(ind,style_vec){\nvar element_type = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.last(style_vec),(2));\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(element_type,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(element_type,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125))))){\nreturn style_vec;\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([style_vec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(ind))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null)], 0));\n}\n});\n/**\n * zloc-seq is a seq of zlocs of a collection.  We already know\n *   that the given zloc won't fit on the current line. [Besides, we\n *   ensure that if there are two things remaining anyway. ???] So\n *   now, try hanging and see if that is better than flow.  Unless\n *   :hang? is nil, in which case we will just flow.  hindent is\n *   hang-indent, and findent is flow-indent. This should never be\n *   called with :one-line because this is only called from fzprint-list*\n *   after the one-line processing is done. If the hindent equals the\n *   flow indent, then just do flow.  Do only zloc-count non-whitespace\n *   elements of zloc-seq if it exists.\n */\nzprint.zprint.fzprint_hang_remaining = (function zprint$zprint$fzprint_hang_remaining(var_args){\nvar G__51732 = arguments.length;\nswitch (G__51732) {\ncase 7:\nreturn zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$7((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]));\n\nbreak;\ncase 6:\nreturn zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$7 = (function (caller,p__51733,hindent,findent,zloc_seq,fn_style,zloc_count){\nvar map__51734 = p__51733;\nvar map__51734__$1 = (((((!((map__51734 == null))))?(((((map__51734.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51734.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51734):map__51734);\nvar options = map__51734__$1;\nvar map__51735 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51734__$1,caller);\nvar map__51735__$1 = (((((!((map__51735 == null))))?(((((map__51735.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51735.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51735):map__51735);\nvar hang_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51735__$1,new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854));\nvar constant_pair_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51735__$1,new cljs.core.Keyword(null,\"constant-pair?\",\"constant-pair?\",-1009181437));\nvar constant_pair_min = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51735__$1,new cljs.core.Keyword(null,\"constant-pair-min\",\"constant-pair-min\",1245759721));\nvar hang_avoid = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51735__$1,new cljs.core.Keyword(null,\"hang-avoid\",\"hang-avoid\",-138703568));\nvar hang_expand = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51735__$1,new cljs.core.Keyword(null,\"hang-expand\",\"hang-expand\",1086807559));\nvar hang_diff = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51735__$1,new cljs.core.Keyword(null,\"hang-diff\",\"hang-diff\",-1575205424));\nvar nl_separator_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51735__$1,new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767));\nvar respect_nl_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51735__$1,new cljs.core.Keyword(null,\"respect-nl?\",\"respect-nl?\",604814635));\nvar dbg_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51734__$1,new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771));\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51734__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg-hang\",\"dbg-hang\",-1928862076).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([zprint.zprint.dots(new cljs.core.Keyword(null,\"pdepth\",\"pdepth\",-1943862342).cljs$core$IFn$_invoke$arity$1(options)),\"hr:\",(function (){var G__51738 = cljs.core.first(zloc_seq);\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__51738) : zprint.zfns.zstring.call(null,G__51738));\n})()], 0));\n} else {\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-remaining first:\",(function (){var G__51739 = cljs.core.first(zloc_seq);\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__51739) : zprint.zfns.zstring.call(null,G__51739));\n})(),\"hindent:\",hindent,\"findent:\",findent,\"caller:\",caller,\"nl-separator?:\",nl_separator_QMARK_,\"respect-nl?:\",respect_nl_QMARK_,\"(count zloc-seq):\",cljs.core.count(zloc_seq)], 0));\n} else {\n}\n\nvar seq_right = zloc_seq;\nvar seq_right__$1 = (cljs.core.truth_(zloc_count)?cljs.core.take.cljs$core$IFn$_invoke$arity$2(zloc_count,seq_right):seq_right);\nvar vec__51740 = zprint.zprint.constant_pair(caller,options,seq_right__$1);\nvar pair_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51740,(0),null);\nvar non_paired_item_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51740,(1),null);\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-remaining count pair-seq:\",cljs.core.count(pair_seq)], 0)):null);\nvar flow = (function (){var flow_result = ((cljs.core.not(pair_seq))?zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$5(options,findent,seq_right__$1,new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826),new cljs.core.Keyword(null,\"nl-first\",\"nl-first\",-462968863)):(((!((non_paired_item_count === (0)))))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([zprint.zprint.ensure_end_w_nl(findent,zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$5(zprint.zprint.not_rightmost(options),findent,cljs.core.take.cljs$core$IFn$_invoke$arity$2(non_paired_item_count,seq_right__$1),new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826),new cljs.core.Keyword(null,\"nl-first\",\"nl-first\",-462968863))),zprint.zprint.fzprint_pairs(options,findent,pair_seq)], 0)):zprint.zprint.fzprint_pairs(options,findent,pair_seq)));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [flow_result,zprint.zprint.style_lines(options,findent,((cljs.core.not(pair_seq))?cljs.core.next(flow_result):flow_result))], null);\n})();\nvar vec__51743 = zprint.zprint.zat(options,flow);\nvar flow__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51743,(0),null);\nvar flow_lines = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51743,(1),null);\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-remaining: first hang?\",hang_QMARK_,\"hang-avoid\",hang_avoid,\"findent:\",findent,\"hindent:\",hindent,\"(count seq-right):\",cljs.core.count(seq_right__$1),\"thing:\",(cljs.core.truth_(hang_avoid)?((width - hindent) * hang_avoid):null)], 0)):null);\nvar hang_QMARK___$1 = (function (){var and__4115__auto__ = hang_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn ((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(hindent,findent)) && (((cljs.core.not(hang_avoid)) || ((cljs.core.count(seq_right__$1) < ((width - hindent) * hang_avoid))))) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(flow__$1),(2)),new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405))));\n} else {\nreturn and__4115__auto__;\n}\n})();\nvar ___$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-remaining: second hang?\",hang_QMARK___$1], 0)):null);\nvar hanging = (function (){var hang_result = (cljs.core.truth_(hang_QMARK___$1)?((cljs.core.not(pair_seq))?zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$5(zprint.zprint.in_hang(options),hindent,seq_right__$1,new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826),null):(((!((non_paired_item_count === (0)))))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (){var value__51281__auto__ = zprint.zprint.ensure_end_w_nl(hindent,zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$5(zprint.zprint.not_rightmost(zprint.zprint.in_hang(options)),hindent,cljs.core.take.cljs$core$IFn$_invoke$arity$2(non_paired_item_count,seq_right__$1),new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826),null));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-remaining: mapv:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([value__51281__auto__], 0))], 0));\n} else {\n}\n\nreturn value__51281__auto__;\n})(),(function (){var value__51281__auto__ = zprint.zprint.fzprint_pairs(zprint.zprint.in_hang(options),hindent,pair_seq);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-remaining: fzprint-hang:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([value__51281__auto__], 0))], 0));\n} else {\n}\n\nreturn value__51281__auto__;\n})()], 0)):zprint.zprint.fzprint_pairs(zprint.zprint.in_hang(options),hindent,pair_seq))):null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [hang_result,zprint.zprint.style_lines(options,hindent,hang_result)], null);\n})();\nvar vec__51746 = zprint.zprint.zat(options,hanging);\nvar hanging__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51746,(0),null);\nvar hanging_lines = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51746,(1),null);\nvar hang_count = cljs.core.count(seq_right__$1);\nvar ___$3 = zprint.zprint.log_lines(options,\"fzprint-hang-remaining: hanging:\",hindent,hanging__$1);\nvar ___$4 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-remaining: hanging-lines:\",hanging_lines,\"hang-count:\",hang_count], 0)):null);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-remaining: flow-lines:\",flow_lines], 0));\n} else {\n}\n\nif(cljs.core.truth_(dbg_QMARK_)){\nif((hang_count === (0))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"hang-count = 0:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(zprint.zfns.zstring,zloc_seq))], 0));\n} else {\n}\n} else {\n}\n\nzprint.zprint.log_lines(options,\"fzprint-hang-remaining: flow\",findent,flow__$1);\n\nif(cljs.core.truth_(flow_lines)){\nif(cljs.core.truth_(zprint.zprint.good_enough_QMARK_(caller,options,fn_style,hang_count,(hindent - findent),hanging_lines,flow_lines))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),hanging__$1], 0));\n} else {\nreturn zprint.zprint.ensure_start_w_nl(findent,flow__$1);\n}\n} else {\nreturn null;\n}\n}));\n\n(zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$6 = (function (caller,options,hindent,findent,zloc,fn_style){\nreturn zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$7(caller,options,hindent,findent,zloc,fn_style,null);\n}));\n\n(zprint.zprint.fzprint_hang_remaining.cljs$lang$maxFixedArity = 7);\n\n/**\n * Get the zloc seq, with or without newlines, as indicated by the options.\n */\nzprint.zprint.fzprint_get_zloc_seq = (function zprint$zprint$fzprint_get_zloc_seq(caller,options,zloc){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"respect-nl?\",\"respect-nl?\",604814635).cljs$core$IFn$_invoke$arity$1((caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options))))){\nreturn (zprint.zfns.zmap_w_nl.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap_w_nl.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap_w_nl.call(null,cljs.core.identity,zloc));\n} else {\nreturn (zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap.call(null,cljs.core.identity,zloc));\n}\n});\n/**\n * Given an zloc, is it a newline or a comment?\n */\nzprint.zprint.newline_or_comment_QMARK_ = (function zprint$zprint$newline_or_comment_QMARK_(zloc){\nif(cljs.core.truth_(zloc)){\nvar zloc_tag = (zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.ztag.call(null,zloc));\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(zloc_tag,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(zloc_tag,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))));\n} else {\nreturn null;\n}\n});\n/**\n * Given a seq of style-vecs, look at the last one, and if it is a\n *   :newline, then remove it.  But the last one might be a single\n *   one, in which case we will remove the whole thing, and it might be\n *   the last one in a sequence, in which case we will remove just that\n *   one.  If there is nothing left, return [[[\"\" :none :none]]].\n */\nzprint.zprint.remove_last_newline = (function zprint$zprint$remove_last_newline(ssv){\nvar last_style_vec = cljs.core.last(ssv);\nif((!(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.last(last_style_vec),(2)),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))))){\nreturn ssv;\n} else {\nvar last_len = cljs.core.count(last_style_vec);\nvar total_len = cljs.core.count(ssv);\nvar remove_one = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.butlast(ssv),((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(last_len,(1)))?cljs.core.PersistentVector.EMPTY:(new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.butlast(last_style_vec)],null))));\nif(cljs.core.empty_QMARK_(remove_one)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"none\",\"none\",1333468478)], null)], null)], null);\n} else {\nreturn remove_one;\n}\n}\n});\n/**\n * Given [[[\";stuff\" :none :comment]]] or \n *   [[[\";bother\" :none :comment-inline 1]]] add [\"\n * \" :none :newline]\n *   to the inside of it.\n */\nzprint.zprint.add_newline_to_comment = (function zprint$zprint$add_newline_to_comment(indent,fzprint_STAR__return){\nvar the_type = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fzprint_STAR__return),(2));\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(the_type,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(the_type,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405))))){\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(fzprint_STAR__return,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(indent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null)], null));\n} else {\nreturn fzprint_STAR__return;\n}\n});\n/**\n * Given a zloc-seq, gather newlines and comments up to the next\n *   zloc into a seq.  Returns [seq next-zloc next-count].\n */\nzprint.zprint.gather_up_to_next_zloc = (function zprint$zprint$gather_up_to_next_zloc(zloc_seq){\nvar nloc_seq = zloc_seq;\nvar out = cljs.core.PersistentVector.EMPTY;\nvar next_count = (0);\nwhile(true){\nif(cljs.core.not(zprint.zprint.newline_or_comment_QMARK_(cljs.core.first(nloc_seq)))){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [out,cljs.core.first(nloc_seq),next_count], null);\n} else {\nvar G__52255 = cljs.core.next(nloc_seq);\nvar G__52256 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,cljs.core.first(nloc_seq));\nvar G__52257 = (next_count + (1));\nnloc_seq = G__52255;\nout = G__52256;\nnext_count = G__52257;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Using the information returned from fzprint-up-to-first-zloc or\n *   fzprint-up-to-next-zloc, find the next zloc and return \n *   [pre-next-style-vec next-zloc next-count zloc-seq]\n */\nzprint.zprint.fzprint_up_to_next_zloc = (function zprint$zprint$fzprint_up_to_next_zloc(caller,options,ind,p__51749){\nvar vec__51750 = p__51749;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51750,(0),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51750,(1),null);\nvar current_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51750,(2),null);\nvar zloc_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51750,(3),null);\nvar next_data = vec__51750;\nvar starting_count = (current_count + (1));\nvar nloc_seq = cljs.core.nthnext(zloc_seq,starting_count);\nif((!(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"ztype\",\"ztype\",-562179020).cljs$core$IFn$_invoke$arity$1(options),new cljs.core.Keyword(null,\"zipper\",\"zipper\",1500694438))))){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"noseq\",\"noseq\",405935768),cljs.core.first(nloc_seq),starting_count,zloc_seq], null);\n} else {\nvar vec__51753 = zprint.zprint.gather_up_to_next_zloc(nloc_seq);\nvar pre_next_zloc_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51753,(0),null);\nvar next_zloc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51753,(1),null);\nvar next_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51753,(2),null);\nvar next_count__$1 = (starting_count + next_count);\nif(cljs.core.empty_QMARK_(pre_next_zloc_seq)){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"noseq\",\"noseq\",405935768),next_zloc,next_count__$1,zloc_seq], null);\n} else {\nvar coll_print = zprint.zprint.fzprint_seq(options,ind,pre_next_zloc_seq);\nvar coll_print__$1 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(zprint.zprint.add_newline_to_comment,ind),coll_print);\nvar coll_print__$2 = ((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(starting_count,(0)))?zprint.zprint.remove_last_newline(coll_print__$1):coll_print__$1);\nvar coll_out = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,coll_print__$2);\nvar coll_out__$1 = ((((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(starting_count,(0)))?(function (){var first_type = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(coll_out),(2));\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(first_type,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(first_type,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405))));\n})():false))?zprint.zprint.ensure_start_w_nl(ind,coll_out):coll_out);\nvar coll_out__$2 = ((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(starting_count,(0)))?coll_out__$1:zprint.zprint.ensure_end_w_nl(ind,coll_out__$1));\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [coll_out__$2,next_zloc,next_count__$1,zloc_seq], null);\n}\n}\n});\n/**\n * Returns [pre-first-style-vec first-zloc first-count zloc-seq], where\n *   pre-first-style-vec will be :noseq if there isn't anything, and first-count\n *   is what you give to nthnext to get to the first-zloc in zloc-seq.\n */\nzprint.zprint.fzprint_up_to_first_zloc = (function zprint$zprint$fzprint_up_to_first_zloc(caller,options,ind,zloc){\nif((!(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"ztype\",\"ztype\",-562179020).cljs$core$IFn$_invoke$arity$1(options),new cljs.core.Keyword(null,\"zipper\",\"zipper\",1500694438))))){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"noseq\",\"noseq\",405935768),cljs.core.first(zloc),(0),zloc], null);\n} else {\nvar zloc_seq = zprint.zprint.fzprint_get_zloc_seq(caller,options,zloc);\nreturn zprint.zprint.fzprint_up_to_next_zloc(caller,options,ind,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,null,(-1),zloc_seq], null));\n}\n});\n/**\n * Using return from fzprint-up-to-first-zloc or fzprint-up-to-next-zloc,\n *   [pre-next-style-vec next-zloc next-count zloc-seq], return a zloc-seq\n *   pointer to just beyond the specific zloc which was found by the\n *   fzprint-up-to-first or fzprint-up-to-next call.  You don't give this\n *   a number, you give it the data structure from the thing that you found.\n */\nzprint.zprint.get_zloc_seq_right = (function zprint$zprint$get_zloc_seq_right(p__51756){\nvar vec__51757 = p__51756;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51757,(0),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51757,(1),null);\nvar next_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51757,(2),null);\nvar zloc_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51757,(3),null);\nvar input_data = vec__51757;\nif((next_count >= cljs.core.count(zloc_seq))){\nthrow (new Error([\"get-zloc-seq-right input data inconsistent:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(input_data)].join('')));\n} else {\nvar zloc_seq__$1 = cljs.core.nthnext(zloc_seq,(next_count + (1)));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(\"get-zloc-seq-right:\"))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(\"get-zloc-seq-right:\"),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.map.cljs$core$IFn$_invoke$arity$2(zprint.zfns.zstring,zloc_seq__$1)], 0))], 0));\n} else {\n}\n\nreturn zloc_seq__$1;\n}\n});\n/**\n * Is this a newline or equivalent?  Comments and newlines are both\n *   newlines for the purposed of this routine.\n */\nzprint.zprint.at_newline_QMARK_ = (function zprint$zprint$at_newline_QMARK_(zloc){\nvar this_tag = (zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.ztag.call(null,zloc));\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this_tag,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this_tag,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))));\n});\n/**\n * Given a zloc that is down inside of a collection, presumably\n *   a list, return a vector containing the number of printing elements\n *   we had to traverse to get to it as well as the newline.\n */\nzprint.zprint.next_newline = (function zprint$zprint$next_newline(zloc){\nvar nloc = zloc;\nvar index = (0);\nwhile(true){\nvar next_right = (zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.right_STAR_.call(null,nloc));\nif(cljs.core.truth_(next_right)){\nif(zprint.zprint.at_newline_QMARK_(nloc)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index,nloc], null);\n} else {\nvar G__52258 = (zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.right_STAR_.call(null,nloc));\nvar G__52259 = (((!(zprint.zutil.whitespace_QMARK_(nloc))))?(index + (1)):index);\nnloc = G__52258;\nindex = G__52259;\ncontinue;\n}\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index,nloc], null);\n}\nbreak;\n}\n});\n/**\n * Given a string, return the number of characters to the right\n *   of any newlines in the string.  Will return nil if no newlines\n *   in the string.\n */\nzprint.zprint.length_after_newline = (function zprint$zprint$length_after_newline(s){\nvar nl_split = clojure.string.split.cljs$core$IFn$_invoke$arity$2([cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),\" \"].join(''),/\\n/);\nvar nl_num = (cljs.core.count(nl_split) - (1));\nif((nl_num === (0))){\nreturn null;\n} else {\nreturn (cljs.core.count(cljs.core.last(nl_split)) - (1));\n}\n});\n/**\n * Given a tag into which you can go down from rewrite-clj, which must be\n *   a collection of some kind, return the size the l-str.  All of the tag\n *   values into which you can go down must be in this list for indent-before\n *   to work correctly.  It uses these values when it steps up out of one of\n *   these things to see how big the thing would have been if it showed up\n *   as characters.\n */\nzprint.zprint.tag_l_size = (function zprint$zprint$tag_l_size(t){\nvar G__51760 = t;\nvar G__51760__$1 = (((G__51760 instanceof cljs.core.Keyword))?G__51760.fqn:null);\nswitch (G__51760__$1) {\ncase \"list\":\nreturn (1);\n\nbreak;\ncase \"vector\":\nreturn (1);\n\nbreak;\ncase \"set\":\nreturn (2);\n\nbreak;\ncase \"map\":\nreturn (1);\n\nbreak;\ncase \"uneval\":\nreturn (2);\n\nbreak;\ncase \"reader-macro\":\nreturn (1);\n\nbreak;\ncase \"meta\":\nreturn (1);\n\nbreak;\ncase \"quote\":\nreturn (1);\n\nbreak;\ncase \"syntax-quote\":\nreturn (1);\n\nbreak;\ncase \"fn\":\nreturn (2);\n\nbreak;\ncase \"unquote\":\nreturn (1);\n\nbreak;\ncase \"deref\":\nreturn (1);\n\nbreak;\ncase \"namespaced-map\":\nreturn (1);\n\nbreak;\ndefault:\nreturn (0);\n\n}\n});\n/**\n * Take a zloc and move left if possible, or move up if necessary.\n *   Return a vector with [up-size new-zloc]\n */\nzprint.zprint.left_or_up = (function zprint$zprint$left_or_up(zloc){\nvar ploc = zloc;\nvar total_up = (0);\nwhile(true){\nvar next_left = (zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1(ploc) : zprint.zutil.left_STAR_.call(null,ploc));\nif(cljs.core.truth_(next_left)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [total_up,next_left], null);\n} else {\nvar moving_up = (zprint.zutil.up_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.up_STAR_.cljs$core$IFn$_invoke$arity$1(ploc) : zprint.zutil.up_STAR_.call(null,ploc));\nvar up_tag = (cljs.core.truth_(moving_up)?(zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1(moving_up) : zprint.zutil.tag.call(null,moving_up)):null);\nvar up_size = zprint.zprint.tag_l_size(up_tag);\nif(cljs.core.not(moving_up)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [total_up,null], null);\n} else {\nvar G__52265 = moving_up;\nvar G__52266 = (total_up + up_size);\nploc = G__52265;\ntotal_up = G__52266;\ncontinue;\n}\n}\nbreak;\n}\n});\n/**\n * Given a zloc, find the amount of printing space before it on its\n *   current line.\n */\nzprint.zprint.length_before = (function zprint$zprint$length_before(zloc){\nvar vec__51761 = zprint.zprint.left_or_up(zloc);\nvar up_size = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51761,(0),null);\nvar next_zloc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51761,(1),null);\nvar ploc = next_zloc;\nvar indent_before = up_size;\nwhile(true){\nif(cljs.core.not(ploc)){\nreturn indent_before;\n} else {\nvar zstr = (cljs.core.truth_(ploc)?(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(ploc) : zprint.zfns.zstring.call(null,ploc)):\"\");\nvar length_right_of_newline = zprint.zprint.length_after_newline(zstr);\nvar vec__51767 = zprint.zprint.left_or_up(ploc);\nvar up_size__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51767,(0),null);\nvar next_zloc__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51767,(1),null);\nif(cljs.core.truth_(length_right_of_newline)){\nreturn (length_right_of_newline + indent_before);\n} else {\nvar G__52267 = next_zloc__$1;\nvar G__52268 = ((indent_before + cljs.core.count(zstr)) + up_size__$1);\nploc = G__52267;\nindent_before = G__52268;\ncontinue;\n}\n}\nbreak;\n}\n});\n/**\n * Return the next actual element, ignoring comments and whitespace\n *   and everything else but real elements.\n */\nzprint.zprint.next_actual = (function zprint$zprint$next_actual(zloc){\nvar nloc = zloc;\nwhile(true){\nif(cljs.core.not(nloc)){\nreturn nloc;\n} else {\nvar next_nloc = zprint.zutil.zrightnws(nloc);\nvar next_tag = (zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1(next_nloc) : zprint.zutil.tag.call(null,next_nloc));\nif((!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(next_tag,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(next_tag,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))))))){\nreturn next_nloc;\n} else {\nvar G__52269 = next_nloc;\nnloc = G__52269;\ncontinue;\n}\n}\nbreak;\n}\n});\n/**\n * Return the first actual element, ignoring comments and whitespace\n *   and everything else but real elements.\n */\nzprint.zprint.first_actual = (function zprint$zprint$first_actual(zloc){\nif(zprint.zprint.at_newline_QMARK_(zloc)){\nreturn zprint.zprint.next_actual(zloc);\n} else {\nreturn zloc;\n}\n});\n/**\n * Should we hang this zloc, or flow it.  We assume that we are at\n *   the start of the collection (though this could be generalized to\n *   deal with other starting locations easily enough).  Return true\n *   if we should hang it based just on the information in the zloc\n *   itself.  The criteria are: If there is a newline after the second\n *   thing in the zloc, and the amount of space prior to the third thing\n *   is the same as the amount of space prior to the second thing, then\n *   the incoming zloc was hung and we should do the same. Of course, it\n *   would also only be hung if the second thing was on the same line as\n *   the first thing.\n */\nzprint.zprint.hang_zloc_QMARK_ = (function zprint$zprint$hang_zloc_QMARK_(zloc){\nvar zloc__$1 = zprint.zprint.first_actual(zloc);\nvar vec__51770 = zprint.zprint.next_newline(zloc__$1);\nvar count_prior_to_newline = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51770,(0),null);\nvar newline = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51770,(1),null);\nif((count_prior_to_newline < (2))){\nreturn false;\n} else {\nvar second_element = zprint.zutil.zrightnws(((zprint.zutil.whitespace_QMARK_(zloc__$1))?zprint.zutil.zrightnws(zloc__$1):zloc__$1));\nvar second_indent = zprint.zprint.length_before(second_element);\nvar third_element = zprint.zprint.next_actual(second_element);\nvar third_indent = zprint.zprint.length_before(third_element);\nvar and__4115__auto__ = second_element;\nif(cljs.core.truth_(and__4115__auto__)){\nvar and__4115__auto____$1 = third_element;\nif(cljs.core.truth_(and__4115__auto____$1)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(second_indent,third_indent);\n} else {\nreturn and__4115__auto____$1;\n}\n} else {\nreturn and__4115__auto__;\n}\n}\n});\n/**\n * Take a style-vec that was once output from indent-zmap, and fix\n *   up all of the :indent elements in it by adding (- actual-ind ind)\n *   to them.  If we find a multiple thing in here, call indent-shift\n *   recursively with the ind and cur-ind that is approprite.  All of\n *   the actual indents are correct already -- all we are doing is\n *   setting up their base.  There is no attempt to determine if we\n *   are exceeding any configured width.\n */\nzprint.zprint.indent_shift = (function zprint$zprint$indent_shift(caller,options,ind,actual_ind,svec){\nvar shift_ind = actual_ind;\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"indent-shift: ind:\",ind,\"actual-ind:\",actual_ind,\"shift-ind:\",shift_ind,\"svec:\",svec], 0))], 0));\n} else {\n}\n\nvar cur_seq = svec;\nvar cur_ind = actual_ind;\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.not(cur_seq)){\nreturn out;\n} else {\nvar this_seq = cljs.core.first(cur_seq);\nvar new_seq = ((cljs.core.vector_QMARK_(cljs.core.first(this_seq)))?(zprint.zprint.indent_shift.cljs$core$IFn$_invoke$arity$5 ? zprint.zprint.indent_shift.cljs$core$IFn$_invoke$arity$5(caller,options,ind,cur_ind,this_seq) : zprint.zprint.indent_shift.call(null,caller,options,ind,cur_ind,this_seq)):(function (){var vec__51782 = this_seq;\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51782,(0),null);\nvar color = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51782,(1),null);\nvar type = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51782,(2),null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(type,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125))){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(s),cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(shift_ind))].join(''),color,type], null);\n} else {\nreturn this_seq;\n}\n})());\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"indent-shift: cur-ind:\",cur_ind,\"this-seq:\",this_seq,\"new-seq:\",new_seq], 0))], 0)):null);\nvar vec__51779 = zprint.zprint.style_lines(options,cur_ind,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_seq], null));\nvar linecnt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51779,(0),null);\nvar max_width = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51779,(1),null);\nvar lines = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51779,(2),null);\nvar last_width = cljs.core.last(lines);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"indent-shift: last-width:\",last_width,\"new-seq:\",new_seq], 0))], 0));\n} else {\n}\n\nvar G__52270 = cljs.core.next(cur_seq);\nvar G__52271 = last_width;\nvar G__52272 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,new_seq);\ncur_seq = G__52270;\ncur_ind = G__52271;\nout = G__52272;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Implement :indent-only?.  This routine is the central one through\n *   which all :indent-only? processing flows, and replaces all of the\n *   detailed logic in fzprint-list*, fzprint-vec*, and fzprint-map*.\n *   This is called directly by fzprint-vec*, which handles both vectors\n *   and sets, and through fzprint-indent by fzprint-list* and\n *   fzprint-map*.  Thus, all of the data structures get their\n *   :indent-only? processing handled by ident-zmap.  coll-print is\n *   the output from fzprint-seq, which is a style-vec in the making\n *   without spacing, but with extra [] around the elements.  Everything\n *   is based off of ind, and we know nothing to the left of that.\n *   ind must be the left end of everything, not the right of l-str!\n *   The actual-ind is to the right of l-str.  When we get a newline,\n *   replace any spaces after it with our own, and that would be to\n *   bring it to ind + indent.  \n */\nzprint.zprint.indent_zmap = (function zprint$zprint$indent_zmap(var_args){\nvar G__51786 = arguments.length;\nswitch (G__51786) {\ncase 7:\nreturn zprint.zprint.indent_zmap.cljs$core$IFn$_invoke$arity$7((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]));\n\nbreak;\ncase 6:\nreturn zprint.zprint.indent_zmap.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.indent_zmap.cljs$core$IFn$_invoke$arity$7 = (function (caller,p__51787,ind,actual_ind,coll_print,indent,first_indent_only_QMARK_){\nvar map__51788 = p__51787;\nvar map__51788__$1 = (((((!((map__51788 == null))))?(((((map__51788.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51788.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51788):map__51788);\nvar options = map__51788__$1;\nvar map__51789 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51788__$1,caller);\nvar map__51789__$1 = (((((!((map__51789 == null))))?(((((map__51789.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51789.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51789):map__51789);\nvar wrap_after_multi_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51789__$1,new cljs.core.Keyword(null,\"wrap-after-multi?\",\"wrap-after-multi?\",1010808052));\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51788__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar rightcnt = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51788__$1,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070));\nvar coll_print__$1 = (zprint.zprint.merge_fzprint_seq.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.merge_fzprint_seq.cljs$core$IFn$_invoke$arity$1(coll_print) : zprint.zprint.merge_fzprint_seq.call(null,coll_print));\nvar last_index = (cljs.core.count(coll_print__$1) - (1));\nvar rightcnt__$1 = zprint.zprint.fix_rightcnt(rightcnt);\nvar actual_indent = (ind + indent);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"indent-zmap: ind:\",ind,\"actual-ind:\",actual_ind,\"first-indent-only?\",first_indent_only_QMARK_,\"indent:\",indent,\"actual-indent:\",actual_indent,\"coll-print:\",coll_print__$1], 0))], 0));\n} else {\n}\n\nvar cur_seq = coll_print__$1;\nvar cur_ind = actual_ind;\nvar index = (0);\nvar beginning_QMARK_ = true;\nvar l_str_indent_QMARK_ = true;\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.not(cur_seq)){\nreturn out;\n} else {\nvar this_seq = cljs.core.first(cur_seq);\nif(cljs.core.truth_(this_seq)){\nvar multi_QMARK_ = (cljs.core.count(this_seq) > (1));\nvar _ = zprint.zprint.log_lines(options,\"indent-zmap:\",ind,this_seq);\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"indent-zmap: cur-ind:\",cur_ind,\"multi?\",multi_QMARK_,\"(count this-seq):\",cljs.core.count(this_seq),\"this-seq:\",this_seq,\"out:\",out], 0))], 0)):null);\nvar this_seq__$1 = ((multi_QMARK_)?zprint.zprint.indent_shift(caller,options,actual_ind,cur_ind,this_seq):this_seq);\nvar vec__51795 = zprint.zprint.style_lines(options,cur_ind,this_seq__$1);\nvar linecnt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51795,(0),null);\nvar max_width = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51795,(1),null);\nvar lines = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51795,(2),null);\nvar last_width = cljs.core.last(lines);\nvar thetype = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.last(this_seq__$1),(2));\nvar len = (last_width - cur_ind);\nvar ___$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"linecnt:\",linecnt,\"last-width:\",last_width,\"len:\",len,\"type:\",thetype], 0)):null);\nvar len__$1 = (function (){var x__4214__auto__ = (0);\nvar y__4215__auto__ = len;\nreturn ((x__4214__auto__ > y__4215__auto__) ? x__4214__auto__ : y__4215__auto__);\n})();\nvar newline_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(thetype,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323));\nvar comma_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(thetype,new cljs.core.Keyword(null,\"comma\",\"comma\",1699024745));\nvar isempty_QMARK_ = cljs.core.empty_QMARK_(cljs.core.first(cljs.core.first(this_seq__$1)));\nvar comment_QMARK_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(thetype,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(thetype,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405))));\nvar l_str_indent_QMARK___$1 = ((l_str_indent_QMARK_) && (((comment_QMARK_) || (newline_QMARK_))));\nvar actual_indent__$1 = (cljs.core.truth_((((index > (0)))?first_indent_only_QMARK_:false))?ind:(ind + indent));\nvar width__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(index,last_index))?(width - rightcnt__$1):width);\nvar fit_QMARK_ = ((cur_ind + len__$1) <= width__$1);\nvar newline_before_QMARK_ = null;\nvar newline_after_QMARK_ = comment_QMARK_;\nvar new_ind = ((((newline_after_QMARK_) || (newline_QMARK_)))?actual_indent__$1:(cljs.core.truth_(newline_before_QMARK_)?(actual_indent__$1 + len__$1):((cur_ind + (1)) + len__$1)\n));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"------ this-seq:\",this_seq__$1,\"lines:\",lines,\"linecnt:\",linecnt,\"multi?\",multi_QMARK_,\"thetype:\",thetype,\"newline?:\",newline_QMARK_,\"comment?:\",comment_QMARK_,\"comma?:\",comma_QMARK_,\"l-str-indent?:\",l_str_indent_QMARK___$1,\"first-indent-only?\",first_indent_only_QMARK_,\"actual-indent:\",actual_indent__$1,\"index:\",index,\"beginning?:\",beginning_QMARK_,\"max-width:\",max_width,\"last-width:\",last_width,\"len:\",len__$1,\"cur-ind:\",cur_ind,\"isempty?:\",isempty_QMARK_,\"newline-before?:\",newline_before_QMARK_,\"newline-after?:\",newline_after_QMARK_,\"new-ind:\",new_ind,\"width:\",width__$1,\"fit?\",fit_QMARK_], 0))], 0));\n} else {\n}\n\nvar G__52283 = cljs.core.next(cur_seq);\nvar G__52284 = new_ind;\nvar G__52285 = (index + (1));\nvar G__52286 = ((((isempty_QMARK_) && (beginning_QMARK_))) || (newline_QMARK_) || (newline_after_QMARK_) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(thetype,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125))));\nvar G__52287 = l_str_indent_QMARK___$1;\nvar G__52288 = ((isempty_QMARK_)?(cljs.core.truth_((function (){var or__4126__auto__ = newline_before_QMARK_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn newline_after_QMARK_;\n}\n})())?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(out,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(actual_indent__$1))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null)):out):cljs.core.concat.cljs$core$IFn$_invoke$arity$2(out,(cljs.core.truth_(newline_before_QMARK_)?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(actual_indent__$1))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),this_seq__$1], 0)):((newline_after_QMARK_)?((((beginning_QMARK_) || (comma_QMARK_)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([this_seq__$1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(((l_str_indent_QMARK___$1)?actual_ind:actual_indent__$1)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null)], 0)):zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),this_seq__$1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(actual_indent__$1))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null)], 0))):((newline_QMARK_)?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(((l_str_indent_QMARK___$1)?actual_ind:actual_indent__$1)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null):(((index === (0)))?this_seq__$1:((((beginning_QMARK_) || (comma_QMARK_)))?this_seq__$1:zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),this_seq__$1], 0)))\n))))));\ncur_seq = G__52283;\ncur_ind = G__52284;\nindex = G__52285;\nbeginning_QMARK_ = G__52286;\nl_str_indent_QMARK_ = G__52287;\nout = G__52288;\ncontinue;\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}));\n\n(zprint.zprint.indent_zmap.cljs$core$IFn$_invoke$arity$6 = (function (caller,options,ind,actual_ind,coll_print,indent){\nreturn zprint.zprint.indent_zmap.cljs$core$IFn$_invoke$arity$7(caller,options,ind,actual_ind,coll_print,indent,null);\n}));\n\n(zprint.zprint.indent_zmap.cljs$lang$maxFixedArity = 7);\n\nzprint.zprint.hang_indent = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),null,new cljs.core.Keyword(null,\"none-body\",\"none-body\",-171554854),null,new cljs.core.Keyword(null,\"none\",\"none\",1333468478),null], null), null);\nzprint.zprint.flow_indent = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [new cljs.core.Keyword(null,\"gt3-force-nl\",\"gt3-force-nl\",-1297517534),null,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),null,new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),null,new cljs.core.Keyword(null,\"arg2\",\"arg2\",1729550917),null,new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826),null,new cljs.core.Keyword(null,\"flow\",\"flow\",590489032),null,new cljs.core.Keyword(null,\"noarg1\",\"noarg1\",2031519464),null,new cljs.core.Keyword(null,\"noarg1-body\",\"noarg1-body\",774553320),null,new cljs.core.Keyword(null,\"gt2-force-nl\",\"gt2-force-nl\",-1746243317),null,new cljs.core.Keyword(null,\"force-nl-body\",\"force-nl-body\",1789087439),null,new cljs.core.Keyword(null,\"arg2-fn\",\"arg2-fn\",1172769072),null,new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),null,new cljs.core.Keyword(null,\"arg1-force-nl\",\"arg1-force-nl\",-945624718),null,new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),null,new cljs.core.Keyword(null,\"flow-body\",\"flow-body\",1355242804),null,new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),null], null), null);\n/**\n * Given a vector of vectors, decide if we should merge these individually\n *   into the top level vector.\n */\nzprint.zprint.newline_seq_QMARK_ = (function zprint$zprint$newline_seq_QMARK_(newline_vec){\nvar starts_with_nl_vec = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__51798_SHARP_){\nreturn clojure.string.starts_with_QMARK_(cljs.core.first(p1__51798_SHARP_),\"\\n\");\n}),newline_vec);\nvar true_seq = cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(starts_with_nl_vec);\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(true_seq),(1))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(true_seq),true)));\n});\n/**\n * Given the output from fzprint-seq, which is a seq of the\n *   output of fzprint*, apply a function to each of them that has\n *   more than one element (since less has no meaning) and when the\n *   function returns true, merge the vector in as individual elements.\n */\nzprint.zprint.merge_fzprint_seq = (function zprint$zprint$merge_fzprint_seq(fzprint_seq_vec){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__51800_SHARP_,p2__51799_SHARP_){\nif(zprint.zprint.newline_seq_QMARK_(p2__51799_SHARP_)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p1__51800_SHARP_,cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.vector,p2__51799_SHARP_)));\n} else {\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__51800_SHARP_,p2__51799_SHARP_);\n}\n}),cljs.core.PersistentVector.EMPTY,fzprint_seq_vec));\n});\n/**\n * This function assumes that :indent-only? was set for the caller\n *   in the options (since anything else doesn't make sense).  It takes\n *   a zloc and the ind, which is where we are on the line this point,\n *   and will process the zloc to include any newlines.  Of course we\n *   have to have all of the white space in the zloc too, since we\n *   need to ask some questions about what we are starting with at\n *   some point.  We don't add newlines and we let the newlines that\n *   are in there do their thing.  We might add newlines if we move\n *   beyond the right margin, but for now, we don't (and it isn't\n *   entirely clear how or if that would work).  This routine has to\n *   make decisions about the indent, that is whether to hang or flow\n *   the expression. It does that based on what was done in the input\n *   if the configuration allows.\n */\nzprint.zprint.fzprint_indent_x = (function zprint$zprint$fzprint_indent_x(caller,l_str,r_str,options,ind,zloc,fn_style,arg_1_indent){\nvar flow_indent = new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125).cljs$core$IFn$_invoke$arity$1((caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options)));\nvar l_str_len = cljs.core.count(l_str);\nvar flow_indent__$1 = (((((flow_indent > l_str_len)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(caller,new cljs.core.Keyword(null,\"list\",\"list\",765357683)))))?(cljs.core.truth_(arg_1_indent)?flow_indent:l_str_len):flow_indent);\nvar scalar_ind = ((cljs.core.coll_QMARK_(ind))?cljs.core.first(ind):ind);\nvar actual_ind = (scalar_ind + l_str_len);\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-indent: caller:\",caller,\"l-str-len:\",l_str_len,\"ind:\",ind,\"scalar-ind:\",scalar_ind,\"fn-style:\",fn_style,\"arg-1-indent:\",arg_1_indent,\"flow-indent:\",flow_indent__$1,\"actual-ind:\",actual_ind], 0))], 0)):null);\nvar zloc_seq = (zprint.zfns.zmap_w_nl.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap_w_nl.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap_w_nl.call(null,cljs.core.identity,zloc));\nvar coll_print = zprint.zprint.fzprint_seq(options,ind,zloc_seq);\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-indent: coll-print:\",coll_print], 0))], 0)):null);\nvar indent_only_style = new cljs.core.Keyword(null,\"indent-only-style\",\"indent-only-style\",708921086).cljs$core$IFn$_invoke$arity$1((caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options)));\nvar already_hung_QMARK_ = (cljs.core.truth_((function (){var and__4115__auto__ = indent_only_style;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(indent_only_style,new cljs.core.Keyword(null,\"input-hang\",\"input-hang\",-542766364));\n} else {\nreturn and__4115__auto__;\n}\n})())?zprint.zprint.hang_zloc_QMARK_(cljs.core.first(zloc_seq)):null);\nvar raw_indent = (cljs.core.truth_((function (){var and__4115__auto__ = arg_1_indent;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn already_hung_QMARK_;\n} else {\nreturn and__4115__auto__;\n}\n})())?arg_1_indent:flow_indent__$1);\nvar indent = raw_indent;\nvar coll_print_contains_nil_QMARK_ = zprint.zprint.contains_nil_QMARK_(coll_print);\nvar ___$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-indent:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)),\"ind:\",ind,\"fn-style:\",fn_style,\"indent-only-style:\",indent_only_style,\"already-hung?:\",already_hung_QMARK_,\"arg-1-indent:\",arg_1_indent,\"l-str-len:\",cljs.core.count(l_str),\"actual-ind:\",actual_ind,\"raw-indent:\",raw_indent,\"coll-print-contains-nil?:\",coll_print_contains_nil_QMARK_,\"indent:\",indent], 0))], 0)):null);\nvar coll_print__$1 = (cljs.core.truth_(coll_print_contains_nil_QMARK_)?null:coll_print);\nvar output = zprint.zprint.indent_zmap.cljs$core$IFn$_invoke$arity$6(caller,options,ind,actual_ind,coll_print__$1,indent);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-indent: output:\",output], 0))], 0));\n} else {\n}\n\nreturn output;\n});\n/**\n * This function assumes that :indent-only? was set for the caller\n *   in the options (since anything else doesn't make sense).  It takes\n *   a zloc and the ind, which is where we are on the line this point,\n *   and will process the zloc to include any newlines.  Of course we\n *   have to have all of the white space in the zloc too, since we\n *   need to ask some questions about what we are starting with at\n *   some point.  We don't add newlines and we let the newlines that\n *   are in there do their thing.  We might add newlines if we move\n *   beyond the right margin, but for now, we don't (and it isn't\n *   entirely clear how or if that would work).  This routine has to\n *   make decisions about the indent, that is whether to hang or flow\n *   the expression. It does that based on what was done in the input\n *   if the configuration allows.\n */\nzprint.zprint.fzprint_indent = (function zprint$zprint$fzprint_indent(var_args){\nvar G__51802 = arguments.length;\nswitch (G__51802) {\ncase 9:\nreturn zprint.zprint.fzprint_indent.cljs$core$IFn$_invoke$arity$9((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]));\n\nbreak;\ncase 8:\nreturn zprint.zprint.fzprint_indent.cljs$core$IFn$_invoke$arity$8((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.fzprint_indent.cljs$core$IFn$_invoke$arity$9 = (function (caller,l_str,r_str,options,ind,zloc,fn_style,arg_1_indent,first_indent_only_QMARK_){\nvar flow_indent = new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125).cljs$core$IFn$_invoke$arity$1((caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options)));\nvar flow_indent__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(caller,new cljs.core.Keyword(null,\"map\",\"map\",1371690461)))?(1):flow_indent);\nvar l_str_len = cljs.core.count(l_str);\nvar flow_indent__$2 = (((((flow_indent__$1 > l_str_len)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(caller,new cljs.core.Keyword(null,\"list\",\"list\",765357683)))))?(cljs.core.truth_(arg_1_indent)?flow_indent__$1:l_str_len):flow_indent__$1);\nvar actual_ind = (ind + l_str_len);\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-indent: caller:\",caller,\"l-str-len:\",l_str_len,\"ind:\",ind,\"fn-style:\",fn_style,\"arg-1-indent:\",arg_1_indent,\"flow-indent:\",flow_indent__$2,\"actual-ind:\",actual_ind], 0))], 0)):null);\nvar zloc_seq = (cljs.core.truth_(new cljs.core.Keyword(null,\"comma?\",\"comma?\",1532168963).cljs$core$IFn$_invoke$arity$1((caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options))))?(zprint.zfns.zmap_w_nl_comma.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap_w_nl_comma.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap_w_nl_comma.call(null,cljs.core.identity,zloc)):(zprint.zfns.zmap_w_nl.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap_w_nl.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap_w_nl.call(null,cljs.core.identity,zloc)));\nvar coll_print = zprint.zprint.fzprint_seq(options,ind,zloc_seq);\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-indent: coll-print:\",coll_print], 0))], 0)):null);\nvar indent_only_style = new cljs.core.Keyword(null,\"indent-only-style\",\"indent-only-style\",708921086).cljs$core$IFn$_invoke$arity$1((caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options)));\nvar already_hung_QMARK_ = (cljs.core.truth_((function (){var and__4115__auto__ = indent_only_style;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(indent_only_style,new cljs.core.Keyword(null,\"input-hang\",\"input-hang\",-542766364));\n} else {\nreturn and__4115__auto__;\n}\n})())?zprint.zprint.hang_zloc_QMARK_(cljs.core.first(zloc_seq)):null);\nvar raw_indent = (cljs.core.truth_((function (){var and__4115__auto__ = arg_1_indent;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn already_hung_QMARK_;\n} else {\nreturn and__4115__auto__;\n}\n})())?arg_1_indent:flow_indent__$2);\nvar indent = raw_indent;\nvar coll_print_contains_nil_QMARK_ = zprint.zprint.contains_nil_QMARK_(coll_print);\nvar ___$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-indent:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)),\"ind:\",ind,\"fn-style:\",fn_style,\"indent-only-style:\",indent_only_style,\"already-hung?:\",already_hung_QMARK_,\"arg-1-indent:\",arg_1_indent,\"l-str-len:\",cljs.core.count(l_str),\"actual-ind:\",actual_ind,\"raw-indent:\",raw_indent,\"coll-print-contains-nil?:\",coll_print_contains_nil_QMARK_,\"indent:\",indent], 0))], 0)):null);\nvar coll_print__$1 = (cljs.core.truth_(coll_print_contains_nil_QMARK_)?null:coll_print);\nvar output = zprint.zprint.indent_zmap.cljs$core$IFn$_invoke$arity$7(caller,options,ind,actual_ind,coll_print__$1,indent,first_indent_only_QMARK_);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-indent: output:\",output], 0))], 0));\n} else {\n}\n\nreturn output;\n}));\n\n(zprint.zprint.fzprint_indent.cljs$core$IFn$_invoke$arity$8 = (function (caller,l_str,r_str,options,ind,zloc,fn_style,arg_1_indent){\nreturn zprint.zprint.fzprint_indent.cljs$core$IFn$_invoke$arity$9(caller,l_str,r_str,options,ind,zloc,fn_style,arg_1_indent,null);\n}));\n\n(zprint.zprint.fzprint_indent.cljs$lang$maxFixedArity = 9);\n\n/**\n * Find the location, counting from zero, and counting every element \n *   in the seq, of the first zthing?.  Return its index if it is found, \n *   nil if not.\n */\nzprint.zprint.zfind_seq = (function zprint$zprint$zfind_seq(zthing_QMARK_,zloc_seq){\nvar nloc = zloc_seq;\nvar i = (0);\nwhile(true){\nif((!((nloc == null)))){\nif(cljs.core.truth_((function (){var G__51803 = cljs.core.first(nloc);\nreturn (zthing_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zthing_QMARK_.cljs$core$IFn$_invoke$arity$1(G__51803) : zthing_QMARK_.call(null,G__51803));\n})())){\nreturn i;\n} else {\nvar G__52302 = cljs.core.next(nloc);\nvar G__52303 = (i + (1));\nnloc = G__52302;\ni = G__52303;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});\nzprint.zprint.body_set = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [new cljs.core.Keyword(null,\"arg2-pair\",\"arg2-pair\",-1268132126),null,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),null,new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),null,new cljs.core.Keyword(null,\"arg2\",\"arg2\",1729550917),null,new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586),null,new cljs.core.Keyword(null,\"noarg1-body\",\"noarg1-body\",774553320),null,new cljs.core.Keyword(null,\"arg1-pair-body\",\"arg1-pair-body\",541801100),null,new cljs.core.Keyword(null,\"arg2-fn\",\"arg2-fn\",1172769072),null,new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),null,new cljs.core.Keyword(null,\"flow-body\",\"flow-body\",1355242804),null,new cljs.core.Keyword(null,\"arg1->\",\"arg1->\",1319654329),null,new cljs.core.Keyword(null,\"none-body\",\"none-body\",-171554854),null], null), null);\nzprint.zprint.body_map = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"arg1-pair-body\",\"arg1-pair-body\",541801100),new cljs.core.Keyword(null,\"arg1-pair\",\"arg1-pair\",-38672953),new cljs.core.Keyword(null,\"none-body\",\"none-body\",-171554854),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"flow-body\",\"flow-body\",1355242804),new cljs.core.Keyword(null,\"flow\",\"flow\",590489032),new cljs.core.Keyword(null,\"noarg1-body\",\"noarg1-body\",774553320),new cljs.core.Keyword(null,\"noarg1\",\"noarg1\",2031519464),new cljs.core.Keyword(null,\"force-nl-body\",\"force-nl-body\",1789087439),new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826)], null);\nzprint.zprint.noarg1_set = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"noarg1\",\"noarg1\",2031519464),null,new cljs.core.Keyword(null,\"arg1->\",\"arg1->\",1319654329),null], null), null);\nzprint.zprint.noarg1_map = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"arg1-pair\",\"arg1-pair\",-38672953),new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586),new cljs.core.Keyword(null,\"arg1-extend\",\"arg1-extend\",-157225050),new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.Keyword(null,\"arg2\",\"arg2\",1729550917),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"arg2-pair\",\"arg2-pair\",-1268132126),new cljs.core.Keyword(null,\"arg1-pair\",\"arg1-pair\",-38672953)], null);\n/**\n * Set noarg1 in the options if it is the right fn-type.\n */\nzprint.zprint.noarg1 = (function zprint$zprint$noarg1(options,fn_type){\nif(cljs.core.truth_((zprint.zprint.noarg1_set.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.noarg1_set.cljs$core$IFn$_invoke$arity$1(fn_type) : zprint.zprint.noarg1_set.call(null,fn_type)))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"no-arg1?\",\"no-arg1?\",1560368430),true);\n} else {\nreturn options;\n}\n});\nzprint.zprint.fn_style__GT_caller = new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"arg1-pair-body\",\"arg1-pair-body\",541801100),new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.Keyword(null,\"arg1-pair\",\"arg1-pair\",-38672953),new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.Keyword(null,\"arg2-pair\",\"arg2-pair\",-1268132126),new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"arg1-extend\",\"arg1-extend\",-157225050),new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.Keyword(null,\"arg2-extend\",\"arg2-extend\",1554629186),new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586),new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312)], null);\n/**\n * Should we allow this function to print on a single line?\n */\nzprint.zprint.allow_one_line_QMARK_ = (function zprint$zprint$allow_one_line_QMARK_(p__51804,len,fn_style){\nvar map__51805 = p__51804;\nvar map__51805__$1 = (((((!((map__51805 == null))))?(((((map__51805.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51805.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51805):map__51805);\nvar options = map__51805__$1;\nvar fn_force_nl = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51805__$1,new cljs.core.Keyword(null,\"fn-force-nl\",\"fn-force-nl\",1501458692));\nvar fn_gt2_force_nl = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51805__$1,new cljs.core.Keyword(null,\"fn-gt2-force-nl\",\"fn-gt2-force-nl\",1348579537));\nvar fn_gt3_force_nl = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51805__$1,new cljs.core.Keyword(null,\"fn-gt3-force-nl\",\"fn-gt3-force-nl\",-58306985));\nreturn cljs.core.not((function (){var or__4126__auto__ = (fn_force_nl.cljs$core$IFn$_invoke$arity$1 ? fn_force_nl.cljs$core$IFn$_invoke$arity$1(fn_style) : fn_force_nl.call(null,fn_style));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = (((len > (3)))?(fn_gt2_force_nl.cljs$core$IFn$_invoke$arity$1 ? fn_gt2_force_nl.cljs$core$IFn$_invoke$arity$1(fn_style) : fn_gt2_force_nl.call(null,fn_style)):false);\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nvar or__4126__auto____$2 = (((len > (4)))?(fn_gt3_force_nl.cljs$core$IFn$_invoke$arity$1 ? fn_gt3_force_nl.cljs$core$IFn$_invoke$arity$1(fn_style) : fn_gt3_force_nl.call(null,fn_style)):false);\nif(cljs.core.truth_(or__4126__auto____$2)){\nreturn or__4126__auto____$2;\n} else {\nvar temp__5733__auto__ = (zprint.zprint.fn_style__GT_caller.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.fn_style__GT_caller.cljs$core$IFn$_invoke$arity$1(fn_style) : zprint.zprint.fn_style__GT_caller.call(null,fn_style));\nif(cljs.core.truth_(temp__5733__auto__)){\nvar future_caller = temp__5733__auto__;\nvar caller_map = (future_caller.cljs$core$IFn$_invoke$arity$1 ? future_caller.cljs$core$IFn$_invoke$arity$1(options) : future_caller.call(null,options));\nvar or__4126__auto____$3 = new cljs.core.Keyword(null,\"flow?\",\"flow?\",96929057).cljs$core$IFn$_invoke$arity$1(caller_map);\nif(cljs.core.truth_(or__4126__auto____$3)){\nreturn or__4126__auto____$3;\n} else {\nreturn new cljs.core.Keyword(null,\"force-nl?\",\"force-nl?\",-1299761462).cljs$core$IFn$_invoke$arity$1(caller_map);\n}\n} else {\nreturn null;\n}\n}\n}\n}\n})());\n});\n/**\n * If the (caller options) has a value for :return-altered-zipper, then\n *   examine the value.  It should be [<depth> <symbol> <fn>]. \n *   If the <depth> is nil, any depth will do. If the\n *   <symbol> is nil, any symbol will do.  If the <depth> and <symbol>\n *   match, then the <fn> is called as (fn caller options zloc), and must\n *   return a new zloc.\n */\nzprint.zprint.modify_zloc = (function zprint$zprint$modify_zloc(caller,options,zloc){\nvar vec__51807 = new cljs.core.Keyword(null,\"return-altered-zipper\",\"return-altered-zipper\",837872379).cljs$core$IFn$_invoke$arity$1((caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options)));\nvar depth = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51807,(0),null);\nvar trigger_symbol = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51807,(1),null);\nvar modify_fn = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51807,(2),null);\nvar return_altered_zipper_value = vec__51807;\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"modify-zloc caller:\",caller,\"ztype\",new cljs.core.Keyword(null,\"ztype\",\"ztype\",-562179020).cljs$core$IFn$_invoke$arity$1(options),\"return-altered-zipper-value:\",return_altered_zipper_value], 0));\n} else {\n}\n\nif(((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"ztype\",\"ztype\",-562179020).cljs$core$IFn$_invoke$arity$1(options),new cljs.core.Keyword(null,\"zipper\",\"zipper\",1500694438))) || ((return_altered_zipper_value == null)))){\nreturn zloc;\n} else {\nvar call_fn_QMARK_ = (((((depth == null)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640).cljs$core$IFn$_invoke$arity$1(options),depth))))?((((cljs.core.not(trigger_symbol)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(trigger_symbol,(function (){var G__51817 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst.call(null,zloc));\nreturn (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(G__51817) : zprint.zfns.zsexpr.call(null,G__51817));\n})()))))?modify_fn:false):false);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"modify-zloc: zloc\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)),\"call-fn?\",call_fn_QMARK_], 0));\n} else {\n}\n\nif(cljs.core.truth_(call_fn_QMARK_)){\nvar return$ = (modify_fn.cljs$core$IFn$_invoke$arity$3 ? modify_fn.cljs$core$IFn$_invoke$arity$3(caller,options,zloc) : modify_fn.call(null,caller,options,zloc));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"modify-zloc return:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(return$) : zprint.zfns.zstring.call(null,return$))], 0));\n} else {\n}\n\nreturn return$;\n} else {\nreturn zloc;\n}\n}\n});\n/**\n * Print a list, which might be a list or an anon fn.  \n *   Lots of work to make a list look good, as that is typically code. \n *   Presently all of the callers of this are :list or :vector-fn.\n */\nzprint.zprint.fzprint_list_STAR_ = (function zprint$zprint$fzprint_list_STAR_(caller,l_str,r_str,p__51819,ind,zloc){\nvar map__51820 = p__51819;\nvar map__51820__$1 = (((((!((map__51820 == null))))?(((((map__51820.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51820.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51820):map__51820);\nvar options = map__51820__$1;\nvar fn_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51820__$1,new cljs.core.Keyword(null,\"fn-map\",\"fn-map\",565481146));\nvar user_fn_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51820__$1,new cljs.core.Keyword(null,\"user-fn-map\",\"user-fn-map\",-908243227));\nvar one_line_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51820__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111));\nvar fn_style = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51820__$1,new cljs.core.Keyword(null,\"fn-style\",\"fn-style\",1330516917));\nvar no_arg1_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51820__$1,new cljs.core.Keyword(null,\"no-arg1?\",\"no-arg1?\",1560368430));\nvar fn_force_nl = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51820__$1,new cljs.core.Keyword(null,\"fn-force-nl\",\"fn-force-nl\",1501458692));\nvar max_length = zprint.zprint.get_max_length(options);\nvar zloc__$1 = zprint.zprint.modify_zloc(caller,options,zloc);\nvar len = (zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc__$1) : zprint.zfns.zcount.call(null,zloc__$1));\nvar zloc__$2 = (((len > max_length))?(function (){var G__51831 = max_length;\nvar G__51832 = zloc__$1;\nvar G__51833 = new cljs.core.Symbol(null,\"...\",\"...\",-1926939749,null);\nreturn (zprint.zfns.ztake_append.cljs$core$IFn$_invoke$arity$3 ? zprint.zfns.ztake_append.cljs$core$IFn$_invoke$arity$3(G__51831,G__51832,G__51833) : zprint.zfns.ztake_append.call(null,G__51831,G__51832,G__51833));\n})():zloc__$1);\nvar len__$1 = (zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zcount.call(null,zloc__$2));\nvar l_str_len = cljs.core.count(l_str);\nvar indent = new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125).cljs$core$IFn$_invoke$arity$1((options.cljs$core$IFn$_invoke$arity$1 ? options.cljs$core$IFn$_invoke$arity$1(caller) : options.call(null,caller)));\nvar vec__51822 = zprint.zprint.fzprint_up_to_first_zloc(caller,options,(ind + l_str_len),zloc__$2);\nvar pre_arg_1_style_vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51822,(0),null);\nvar arg_1_zloc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51822,(1),null);\nvar arg_1_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51822,(2),null);\nvar zloc_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51822,(3),null);\nvar first_data = vec__51822;\nvar arg_1_coll_QMARK_ = cljs.core.not((function (){var or__4126__auto__ = (zprint.zfns.zkeyword_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zkeyword_QMARK_.cljs$core$IFn$_invoke$arity$1(arg_1_zloc) : zprint.zfns.zkeyword_QMARK_.call(null,arg_1_zloc));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1(arg_1_zloc) : zprint.zfns.zsymbol_QMARK_.call(null,arg_1_zloc));\n}\n})());\nvar arg_1_indent_alt_QMARK_ = ((arg_1_coll_QMARK_)?fn_style:false);\nvar fn_str = (((!(arg_1_coll_QMARK_)))?(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(arg_1_zloc) : zprint.zfns.zstring.call(null,arg_1_zloc)):null);\nvar fn_style__$1 = (function (){var or__4126__auto__ = fn_style;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = (fn_map.cljs$core$IFn$_invoke$arity$1 ? fn_map.cljs$core$IFn$_invoke$arity$1(fn_str) : fn_map.call(null,fn_str));\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nreturn (user_fn_map.cljs$core$IFn$_invoke$arity$1 ? user_fn_map.cljs$core$IFn$_invoke$arity$1(fn_str) : user_fn_map.call(null,fn_str));\n}\n}\n})();\nvar fn_style__$2 = (cljs.core.truth_(((cljs.core.not(fn_style__$1))?fn_str:false))?(function (){var G__51834 = cljs.core.last(clojure.string.split.cljs$core$IFn$_invoke$arity$2(fn_str,/\\//));\nreturn (fn_map.cljs$core$IFn$_invoke$arity$1 ? fn_map.cljs$core$IFn$_invoke$arity$1(G__51834) : fn_map.call(null,G__51834));\n})():fn_style__$1);\nvar options__$1 = ((cljs.core.vector_QMARK_(fn_style__$2))?cljs.core.first(zprint.config.config_and_validate(\"fn-style:\",null,options,cljs.core.second(fn_style__$2))):options);\nvar vec__51825 = ((cljs.core.vector_QMARK_(fn_style__$2))?zprint.zprint.fzprint_up_to_first_zloc(caller,options__$1,(ind + l_str_len),zloc__$2):first_data);\nvar pre_arg_1_style_vec__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51825,(0),null);\nvar arg_1_zloc__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51825,(1),null);\nvar arg_1_count__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51825,(2),null);\nvar zloc_seq__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51825,(3),null);\nvar first_data__$1 = vec__51825;\nvar fn_style__$3 = ((cljs.core.vector_QMARK_(fn_style__$2))?cljs.core.first(fn_style__$2):fn_style__$2);\nvar vec__51828 = zprint.zprint.fzprint_up_to_next_zloc(caller,options__$1,(ind + indent),first_data__$1);\nvar pre_arg_2_style_vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51828,(0),null);\nvar arg_2_zloc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51828,(1),null);\nvar arg_2_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51828,(2),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51828,(3),null);\nvar second_data = vec__51828;\nvar len__$2 = (zprint.zfns.zcount_zloc_seq_nc_nws.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount_zloc_seq_nc_nws.cljs$core$IFn$_invoke$arity$1(zloc_seq__$1) : zprint.zfns.zcount_zloc_seq_nc_nws.call(null,zloc_seq__$1));\nvar indent__$1 = new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125).cljs$core$IFn$_invoke$arity$1((options__$1.cljs$core$IFn$_invoke$arity$1 ? options__$1.cljs$core$IFn$_invoke$arity$1(caller) : options__$1.call(null,caller)));\nvar indent_arg = new cljs.core.Keyword(null,\"indent-arg\",\"indent-arg\",58691874).cljs$core$IFn$_invoke$arity$1((options__$1.cljs$core$IFn$_invoke$arity$1 ? options__$1.cljs$core$IFn$_invoke$arity$1(caller) : options__$1.call(null,caller)));\nvar indent_only_QMARK_ = new cljs.core.Keyword(null,\"indent-only?\",\"indent-only?\",375678842).cljs$core$IFn$_invoke$arity$1((options__$1.cljs$core$IFn$_invoke$arity$1 ? options__$1.cljs$core$IFn$_invoke$arity$1(caller) : options__$1.call(null,caller)));\nvar indent__$2 = (cljs.core.truth_((zprint.zprint.body_set.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.body_set.cljs$core$IFn$_invoke$arity$1(fn_style__$3) : zprint.zprint.body_set.call(null,fn_style__$3)))?indent__$1:(function (){var or__4126__auto__ = indent_arg;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn indent__$1;\n}\n})());\nvar indent__$3 = (indent__$2 + (l_str_len - (1)));\nvar one_line_ok_QMARK_ = zprint.zprint.allow_one_line_QMARK_(options__$1,len__$2,fn_style__$3);\nvar one_line_ok_QMARK___$1 = (cljs.core.truth_(indent_only_QMARK_)?null:one_line_ok_QMARK_);\nvar one_line_ok_QMARK___$2 = ((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(pre_arg_1_style_vec__$1,new cljs.core.Keyword(null,\"noseq\",\"noseq\",405935768)))?null:one_line_ok_QMARK___$1);\nvar fn_style__$4 = (function (){var or__4126__auto__ = (zprint.zprint.body_map.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.body_map.cljs$core$IFn$_invoke$arity$1(fn_style__$3) : zprint.zprint.body_map.call(null,fn_style__$3));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn fn_style__$3;\n}\n})();\nvar fn_style__$5 = (cljs.core.truth_((function (){var fexpr__51835 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"flow\",\"flow\",590489032),null,new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),null,new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),null,new cljs.core.Keyword(null,\"flow-body\",\"flow-body\",1355242804),null], null), null);\nreturn (fexpr__51835.cljs$core$IFn$_invoke$arity$1 ? fexpr__51835.cljs$core$IFn$_invoke$arity$1(fn_style__$4) : fexpr__51835.call(null,fn_style__$4));\n})())?fn_style__$4:(((len__$2 < (3)))?null:fn_style__$4));\nvar fn_style__$6 = (cljs.core.truth_(no_arg1_QMARK_)?(function (){var or__4126__auto__ = (zprint.zprint.noarg1_map.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.noarg1_map.cljs$core$IFn$_invoke$arity$1(fn_style__$5) : zprint.zprint.noarg1_map.call(null,fn_style__$5));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn fn_style__$5;\n}\n})():fn_style__$5);\nvar options__$2 = (cljs.core.truth_(no_arg1_QMARK_)?cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(options__$1,new cljs.core.Keyword(null,\"no-arg1?\",\"no-arg1?\",1560368430)):options__$1);\nvar indent_adj = (l_str_len - (1));\nvar default_indent = (cljs.core.truth_((zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1(arg_1_zloc__$1) : zprint.zfns.zlist_QMARK_.call(null,arg_1_zloc__$1)))?indent__$3:l_str_len);\nvar arg_1_indent = (((!(arg_1_coll_QMARK_)))?((ind + (l_str_len + (1))) + cljs.core.count(fn_str)):null);\nvar arg_1_indent__$1 = (function (){var or__4126__auto__ = arg_1_indent;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nif(cljs.core.truth_(arg_1_indent_alt_QMARK_)){\nreturn (indent__$3 + ind);\n} else {\nreturn null;\n}\n}\n})();\nvar arg_1_indent__$2 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(pre_arg_2_style_vec,new cljs.core.Keyword(null,\"noseq\",\"noseq\",405935768)))?arg_1_indent__$1:(cljs.core.truth_(arg_1_indent__$1)?(indent__$3 + ind):null));\nvar options__$3 = (((!(arg_1_coll_QMARK_)))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options__$2,new cljs.core.Keyword(null,\"in-code?\",\"in-code?\",194866464),fn_str):options__$2);\nvar options__$4 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options__$3,new cljs.core.Keyword(null,\"pdepth\",\"pdepth\",-1943862342),(cljs.core.long$((function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"pdepth\",\"pdepth\",-1943862342).cljs$core$IFn$_invoke$arity$1(options__$3);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (0);\n}\n})()) + (1)));\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg-hang\",\"dbg-hang\",-1928862076).cljs$core$IFn$_invoke$arity$1(options__$4))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([zprint.zprint.dots(new cljs.core.Keyword(null,\"pdepth\",\"pdepth\",-1943862342).cljs$core$IFn$_invoke$arity$1(options__$4)),\"fzs\",fn_str], 0)):null);\nvar new_ind = (indent__$3 + ind);\nvar one_line_ind = (l_str_len + ind);\nvar options__$5 = (cljs.core.truth_(fn_style__$6)?cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(options__$4,new cljs.core.Keyword(null,\"fn-style\",\"fn-style\",1330516917)):options__$4);\nvar loptions = zprint.zprint.not_rightmost(options__$5);\nvar roptions = options__$5;\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options__$5,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options__$5,(indent__$3 + ind),zloc__$2,r_str);\nvar ___$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$5))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$5),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-list*:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zstring.call(null,zloc__$2)),\"fn-str\",fn_str,\"fn-style:\",fn_style__$6,\"len:\",len__$2,\"ind:\",ind,\"indent:\",indent__$3,\"default-indent:\",default_indent,\"one-line-ok?\",one_line_ok_QMARK___$2,\"arg-1-coll?\",arg_1_coll_QMARK_,\"arg-1-indent:\",arg_1_indent__$2,\"arg-1-zloc:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(arg_1_zloc__$1) : zprint.zfns.zstring.call(null,arg_1_zloc__$1)),\"l-str:\",[\"'\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(l_str),\"'\"].join(''),\"indent-adj:\",indent_adj,\"len:\",len__$2,\"one-line?:\",one_line_QMARK_,\"indent-only?:\",indent_only_QMARK_,\"rightcnt:\",new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070).cljs$core$IFn$_invoke$arity$1(options__$5)], 0))], 0)):null);\nvar one_line = (((len__$2 === (0)))?new cljs.core.Keyword(null,\"empty\",\"empty\",767870958):(cljs.core.truth_(one_line_ok_QMARK___$2)?zprint.zprint.fzprint_one_line(options__$5,one_line_ind,zloc_seq__$1):null));\nif(cljs.core.truth_(one_line)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(one_line,new cljs.core.Keyword(null,\"empty\",\"empty\",767870958))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,r_str_vec], 0));\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,one_line,r_str_vec], 0));\n}\n} else {\nif(cljs.core.truth_(one_line_QMARK_)){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$5))){\nreturn cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$5),\"fzprint-list*:\",fn_str,\" one-line did not work!!!\"], 0));\n} else {\nreturn null;\n}\n} else {\nif(cljs.core.truth_((cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$5))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$5),\"fzprint-list*: fn-style:\",fn_style__$6], 0)):null))){\nreturn null;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$2,(0))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,r_str_vec], 0));\n} else {\nif(cljs.core.truth_(indent_only_QMARK_)){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,zprint.zprint.fzprint_indent.cljs$core$IFn$_invoke$arity$8(caller,l_str,r_str,options__$5,ind,zloc__$2,fn_style__$6,arg_1_indent__$2),r_str_vec], 0));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$2,(1))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,pre_arg_1_style_vec__$1,(zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(roptions,one_line_ind,arg_1_zloc__$1) : zprint.zprint.fzprint_STAR_.call(null,roptions,one_line_ind,arg_1_zloc__$1)),pre_arg_2_style_vec,r_str_vec], 0));\n} else {\nif(cljs.core.truth_(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"binding\",\"binding\",539932593)))?(((len__$2 > (1)))?(zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1(arg_2_zloc) : zprint.zfns.zvector_QMARK_.call(null,arg_2_zloc)):false):false))){\nvar vec__51836 = zprint.zprint.fzprint_hang_unless_fail(loptions,(function (){var or__4126__auto__ = arg_1_indent__$2;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (indent__$3 + ind);\n}\n})(),(indent__$3 + ind),zprint.zprint.fzprint_binding_vec,arg_2_zloc);\nvar hang_or_flow = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51836,(0),null);\nvar binding_style_vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51836,(1),null);\nvar binding_style_vec__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(hang_or_flow,new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),binding_style_vec], 0)):binding_style_vec);\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,pre_arg_1_style_vec__$1,(function (){var G__51839 = loptions;\nvar G__51840 = (ind + (1));\nvar G__51841 = arg_1_zloc__$1;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51839,G__51840,G__51841) : zprint.zprint.fzprint_STAR_.call(null,G__51839,G__51840,G__51841));\n})(),pre_arg_2_style_vec,binding_style_vec__$1,(((len__$2 > (2)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$5(options__$5,(indent__$3 + ind),zprint.zprint.get_zloc_seq_right(second_data),new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826),new cljs.core.Keyword(null,\"newline-first\",\"newline-first\",-638470720)),r_str_vec], 0)):r_str_vec)], 0));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586))){\nvar zloc_seq_right_first = zprint.zprint.get_zloc_seq_right(first_data__$1);\nvar zloc_count = cljs.core.count(zloc_seq__$1);\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,pre_arg_1_style_vec__$1,(function (){var G__51842 = loptions;\nvar G__51843 = (ind + (1));\nvar G__51844 = arg_1_zloc__$1;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51842,G__51843,G__51844) : zprint.zprint.fzprint_STAR_.call(null,G__51842,G__51843,G__51844));\n})(),zprint.zprint.fzprint_hang(options__$5,new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586),arg_1_indent__$2,(indent__$3 + ind),zprint.zprint.fzprint_pairs,zloc_count,zloc_seq_right_first),r_str_vec], 0));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006))){\nvar zloc_seq_right_first = zprint.zprint.get_zloc_seq_right(first_data__$1);\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,pre_arg_1_style_vec__$1,(function (){var G__51845 = loptions;\nvar G__51846 = (ind + (1));\nvar G__51847 = arg_1_zloc__$1;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51845,G__51846,G__51847) : zprint.zprint.fzprint_STAR_.call(null,G__51845,G__51846,G__51847));\n})(),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$3 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_extend(options__$5,(indent__$3 + ind),zloc_seq_right_first),r_str_vec], 0));\n} else {\nif(((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204))) && (cljs.core.not((zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1(arg_2_zloc) : zprint.zfns.zlist_QMARK_.call(null,arg_2_zloc)))))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2\",\"arg2\",1729550917))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-fn\",\"arg2-fn\",1172769072))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-pair\",\"arg2-pair\",-1268132126))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-extend\",\"arg2-extend\",1554629186))))){\nvar vec__51848 = zprint.zprint.fzprint_up_to_next_zloc(caller,options__$5,(ind + indent__$3),second_data);\nvar pre_arg_3_style_vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51848,(0),null);\nvar arg_3_zloc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51848,(1),null);\nvar arg_3_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51848,(2),null);\nvar ___$3 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51848,(3),null);\nvar third_data = vec__51848;\nvar zloc_seq_right_third = zprint.zprint.get_zloc_seq_right(third_data);\nvar second_element = zprint.zprint.fzprint_hang_one(caller,((cljs.core.not(arg_3_zloc))?options__$5:loptions),arg_1_indent__$2,(indent__$3 + ind),arg_2_zloc);\nvar vec__51851 = zprint.zprint.style_lines(loptions,arg_1_indent__$2,second_element);\nvar line_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51851,(0),null);\nvar max_width = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51851,(1),null);\nvar first_three = (cljs.core.truth_(second_element)?(function (){var first_two_wo_pre_arg_1 = zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (){var G__51854 = loptions;\nvar G__51855 = (indent__$3 + ind);\nvar G__51856 = arg_1_zloc__$1;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51854,G__51855,G__51856) : zprint.zprint.fzprint_STAR_.call(null,G__51854,G__51855,G__51856));\n})(),pre_arg_2_style_vec,second_element,pre_arg_3_style_vec], 0));\nvar local_options = ((cljs.core.not(zloc_seq_right_third))?options__$5:loptions);\nvar first_two_one_line_QMARK_ = zprint.zprint.fzfit_one_line(local_options,zprint.zprint.style_lines(local_options,(ind + indent__$3),first_two_wo_pre_arg_1));\nvar first_two = zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([pre_arg_1_style_vec__$1,first_two_wo_pre_arg_1], 0));\nif(first_two_one_line_QMARK_){\n} else {\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$5))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$5),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-list*: :arg2-* first two didn't fit:\",first_two], 0))], 0));\n} else {\n}\n}\n\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([first_two,(cljs.core.truth_((function (){var or__4126__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2\",\"arg2\",1729550917));\nif(or__4126__auto__){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-pair\",\"arg2-pair\",-1268132126));\nif(or__4126__auto____$1){\nreturn or__4126__auto____$1;\n} else {\nvar or__4126__auto____$2 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-fn\",\"arg2-fn\",1172769072));\nif(or__4126__auto____$2){\nreturn or__4126__auto____$2;\n} else {\nvar or__4126__auto____$3 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-extend\",\"arg2-extend\",1554629186));\nif(or__4126__auto____$3){\nreturn or__4126__auto____$3;\n} else {\nvar and__4115__auto__ = (zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1(arg_3_zloc) : zprint.zfns.zvector_QMARK_.call(null,arg_3_zloc));\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(line_count,(1));\n} else {\nreturn and__4115__auto__;\n}\n}\n}\n}\n}\n})())?zprint.zprint.fzprint_hang_one(caller,((cljs.core.not(zloc_seq_right_third))?options__$5:loptions),((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(pre_arg_3_style_vec,new cljs.core.Keyword(null,\"noseq\",\"noseq\",405935768))) && (first_two_one_line_QMARK_)))?max_width:(indent__$3 + ind)),(indent__$3 + ind),arg_3_zloc):zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$3 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),(function (){var G__51857 = ((cljs.core.not(zloc_seq_right_third))?options__$5:loptions);\nvar G__51858 = (indent__$3 + ind);\nvar G__51859 = arg_3_zloc;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51857,G__51858,G__51859) : zprint.zprint.fzprint_STAR_.call(null,G__51857,G__51858,G__51859));\n})()], 0)))], 0));\n})():null);\nif(cljs.core.truth_(first_three)){\nif(cljs.core.not(zloc_seq_right_third)){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,first_three,r_str_vec], 0));\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,first_three,((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-pair\",\"arg2-pair\",-1268132126)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$3 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_pairs(options__$5,(indent__$3 + ind),zloc_seq_right_third)], 0)):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-extend\",\"arg2-extend\",1554629186)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$3 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_extend(options__$5,(indent__$3 + ind),zloc_seq_right_third)], 0)):zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$6(caller,((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-fn\",\"arg2-fn\",1172769072)))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options__$5,new cljs.core.Keyword(null,\"fn-style\",\"fn-style\",1330516917),new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204)):options__$5),(indent__$3 + ind),(indent__$3 + ind),zloc_seq_right_third,fn_style__$6)\n)),r_str_vec], 0));\n}\n} else {\nreturn null;\n}\n} else {\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg1-mixin\",\"arg1-mixin\",1553512120))) && ((len__$2 > (3))))){\nvar vec__51860 = zprint.zprint.fzprint_up_to_next_zloc(caller,options__$5,(ind + indent__$3),second_data);\nvar pre_arg_3_style_vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51860,(0),null);\nvar arg_3_zloc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51860,(1),null);\nvar arg_3_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51860,(2),null);\nvar ___$3 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51860,(3),null);\nvar third_data = vec__51860;\nvar vec__51863 = zprint.zprint.fzprint_up_to_next_zloc(caller,options__$5,(ind + indent__$3),third_data);\nvar pre_arg_4_style_vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51863,(0),null);\nvar arg_4_zloc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51863,(1),null);\nvar arg_4_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51863,(2),null);\nvar ___$4 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51863,(3),null);\nvar fourth_data = vec__51863;\nvar arg_vec_index = (function (){var or__4126__auto__ = zprint.zprint.zfind_seq((function (p1__51818_SHARP_){\nvar or__4126__auto__ = (zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__51818_SHARP_) : zprint.zfns.zvector_QMARK_.call(null,p1__51818_SHARP_));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nif(cljs.core.truth_((zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__51818_SHARP_) : zprint.zfns.zlist_QMARK_.call(null,p1__51818_SHARP_)))){\nvar G__51867 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(p1__51818_SHARP_) : zprint.zfns.zfirst.call(null,p1__51818_SHARP_));\nreturn (zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1(G__51867) : zprint.zfns.zvector_QMARK_.call(null,G__51867));\n} else {\nreturn null;\n}\n}\n}),zloc_seq__$1);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (0);\n}\n})();\nvar doc_string_QMARK_ = typeof (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(arg_3_zloc) : zprint.zfns.zsexpr.call(null,arg_3_zloc)) === 'string';\nvar mixin_start = ((doc_string_QMARK_)?arg_4_count:arg_3_count);\nvar mixin_length = ((arg_vec_index - mixin_start) - (1));\nvar mixins_QMARK_ = (mixin_length > (0));\nvar doc_string = ((doc_string_QMARK_)?zprint.zprint.fzprint_hang_one(caller,loptions,(indent__$3 + ind),(indent__$3 + ind),arg_3_zloc):null);\nvar mixins = ((mixins_QMARK_)?(function (){var mixin_sentinal = zprint.zprint.fzprint_hang_one(caller,loptions,(indent__$3 + ind),(indent__$3 + ind),((doc_string_QMARK_)?arg_4_zloc:arg_3_zloc));\nvar vec__51868 = zprint.zprint.style_lines(loptions,(indent__$3 + ind),mixin_sentinal);\nvar line_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51868,(0),null);\nvar max_width = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51868,(1),null);\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([((doc_string_QMARK_)?pre_arg_4_style_vec:pre_arg_3_style_vec),mixin_sentinal,zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$7(caller,loptions,(max_width + (1)),(((indent__$3 + indent__$3) + ind) - (1)),zprint.zprint.get_zloc_seq_right((cljs.core.truth_(doc_string)?fourth_data:third_data)),fn_style__$6,mixin_length)], 0));\n})():null);\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,pre_arg_1_style_vec__$1,(function (){var G__51871 = loptions;\nvar G__51872 = (ind + (1));\nvar G__51873 = arg_1_zloc__$1;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51871,G__51872,G__51873) : zprint.zprint.fzprint_STAR_.call(null,G__51871,G__51872,G__51873));\n})(),pre_arg_2_style_vec,zprint.zprint.fzprint_hang_one(caller,((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$2,(2)))?options__$5:loptions),arg_1_indent__$2,(indent__$3 + ind),arg_2_zloc),((((doc_string_QMARK_) && (mixins_QMARK_)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([pre_arg_3_style_vec,doc_string,mixins], 0)):((doc_string_QMARK_)?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([pre_arg_3_style_vec,doc_string], 0)):((mixins_QMARK_)?mixins:new cljs.core.Keyword(null,\"noseq\",\"noseq\",405935768)\n))),zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$6(caller,zprint.zprint.noarg1(options__$5,fn_style__$6),(indent__$3 + ind),(indent__$3 + ind),cljs.core.nthnext(zloc_seq__$1,((mixins_QMARK_)?arg_vec_index:((doc_string_QMARK_)?arg_4_count:arg_3_count))),fn_style__$6),r_str_vec], 0));\n} else {\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg1-pair\",\"arg1-pair\",-38672953))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg1-force-nl\",\"arg1-force-nl\",-945624718))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg1->\",\"arg1->\",1319654329))))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,pre_arg_1_style_vec__$1,(function (){var G__51874 = loptions;\nvar G__51875 = (ind + (1));\nvar G__51876 = arg_1_zloc__$1;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51874,G__51875,G__51876) : zprint.zprint.fzprint_STAR_.call(null,G__51874,G__51875,G__51876));\n})(),pre_arg_2_style_vec,zprint.zprint.fzprint_hang_one(caller,((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$2,(2)))?options__$5:loptions),arg_1_indent__$2,(indent__$3 + ind),arg_2_zloc),((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg1-pair\",\"arg1-pair\",-38672953)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$3 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_pairs(options__$5,(indent__$3 + ind),zprint.zprint.get_zloc_seq_right(second_data))], 0)):zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$6(caller,zprint.zprint.noarg1(options__$5,fn_style__$6),(indent__$3 + ind),(indent__$3 + ind),zprint.zprint.get_zloc_seq_right(second_data),fn_style__$6)),r_str_vec], 0));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg1-extend\",\"arg1-extend\",-157225050))){\nvar zloc_seq_right_second = zprint.zprint.get_zloc_seq_right(second_data);\nif(cljs.core.truth_((zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1(arg_2_zloc) : zprint.zfns.zvector_QMARK_.call(null,arg_2_zloc)))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,pre_arg_1_style_vec__$1,(function (){var G__51877 = loptions;\nvar G__51878 = (indent__$3 + ind);\nvar G__51879 = arg_1_zloc__$1;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51877,G__51878,G__51879) : zprint.zprint.fzprint_STAR_.call(null,G__51877,G__51878,G__51879));\n})(),pre_arg_2_style_vec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$3 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),(function (){var G__51880 = loptions;\nvar G__51881 = (indent__$3 + ind);\nvar G__51882 = arg_2_zloc;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51880,G__51881,G__51882) : zprint.zprint.fzprint_STAR_.call(null,G__51880,G__51881,G__51882));\n})(),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$3 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_extend(options__$5,(indent__$3 + ind),zloc_seq_right_second),r_str_vec], 0));\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,pre_arg_1_style_vec__$1,(function (){var G__51883 = loptions;\nvar G__51884 = (ind + (1));\nvar G__51885 = arg_1_zloc__$1;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51883,G__51884,G__51885) : zprint.zprint.fzprint_STAR_.call(null,G__51883,G__51884,G__51885));\n})(),pre_arg_2_style_vec,zprint.zprint.fzprint_hang_one(caller,((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$2,(2)))?options__$5:loptions),arg_1_indent__$2,(indent__$3 + ind),arg_2_zloc),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$3 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_extend(options__$5,(indent__$3 + ind),zloc_seq_right_second),r_str_vec], 0));\n\n}\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,pre_arg_1_style_vec__$1,(function (){var G__51886 = loptions;\nvar G__51887 = (l_str_len + ind);\nvar G__51888 = arg_1_zloc__$1;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51886,G__51887,G__51888) : zprint.zprint.fzprint_STAR_.call(null,G__51886,G__51887,G__51888));\n})(),(function (){var zloc_seq_right_first = zprint.zprint.get_zloc_seq_right(first_data__$1);\nif(zloc_seq_right_first){\nif(cljs.core.truth_((function (){var and__4115__auto__ = arg_1_indent__$2;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"flow\",\"flow\",590489032));\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar result = zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$6(caller,zprint.zprint.noarg1(options__$5,fn_style__$6),arg_1_indent__$2,((indent__$3 + ind) + indent_adj),zloc_seq_right_first,fn_style__$6);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$5))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$5),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-list*: r-str-vec:\",r_str_vec,\"result:\",result], 0))], 0));\n} else {\n}\n\nreturn result;\n} else {\nvar local_indent = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"flow\",\"flow\",590489032)))?(indent__$3 + ind):((default_indent + ind) + indent_adj));\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$5(zprint.zprint.noarg1(options__$5,fn_style__$6),local_indent,zloc_seq_right_first,new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826),new cljs.core.Keyword(null,\"newline-first\",\"newline-first\",-638470720))], 0));\n}\n} else {\nreturn new cljs.core.Keyword(null,\"noseq\",\"noseq\",405935768);\n}\n})(),r_str_vec], 0));\n\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n});\n/**\n * Pretty print and focus style a :list element.\n */\nzprint.zprint.fzprint_list = (function zprint$zprint$fzprint_list(options,ind,zloc){\nreturn zprint.zprint.fzprint_list_STAR_(new cljs.core.Keyword(null,\"list\",\"list\",765357683),\"(\",\")\",zprint.zprint.rightmost(options),ind,zloc);\n});\n/**\n * Pretty print and focus style a fn element.\n */\nzprint.zprint.fzprint_anon_fn = (function zprint$zprint$fzprint_anon_fn(options,ind,zloc){\nreturn zprint.zprint.fzprint_list_STAR_(new cljs.core.Keyword(null,\"list\",\"list\",765357683),\"#(\",\")\",zprint.zprint.rightmost(options),ind,zloc);\n});\n/**\n * Return true if there are any collections in the collection.\n */\nzprint.zprint.any_zcoll_QMARK_ = (function zprint$zprint$any_zcoll_QMARK_(options,ind,zloc){\nvar coll_QMARK__seq = (zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2(zprint.zfns.zcoll_QMARK_,zloc) : zprint.zfns.zmap.call(null,zprint.zfns.zcoll_QMARK_,zloc));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__51889_SHARP_,p2__51890_SHARP_){\nvar or__4126__auto__ = p1__51889_SHARP_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn p2__51890_SHARP_;\n}\n}),null,coll_QMARK__seq);\n});\n/**\n * Given the output from fzprint-seq, which is a style-vec in\n *   the making without spacing, but with extra [] around the elements,\n *   wrap the elements to the right margin.\n */\nzprint.zprint.wrap_zmap = (function zprint$zprint$wrap_zmap(caller,p__51891,ind,coll_print){\nvar map__51892 = p__51891;\nvar map__51892__$1 = (((((!((map__51892 == null))))?(((((map__51892.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51892.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51892):map__51892);\nvar options = map__51892__$1;\nvar map__51893 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51892__$1,caller);\nvar map__51893__$1 = (((((!((map__51893 == null))))?(((((map__51893.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51893.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51893):map__51893);\nvar wrap_after_multi_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51893__$1,new cljs.core.Keyword(null,\"wrap-after-multi?\",\"wrap-after-multi?\",1010808052));\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51892__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar rightcnt = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51892__$1,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070));\nvar last_index = (cljs.core.count(coll_print) - (1));\nvar rightcnt__$1 = zprint.zprint.fix_rightcnt(rightcnt);\nvar cur_seq = coll_print;\nvar cur_ind = ind;\nvar index = (0);\nvar previous_newline_QMARK_ = false;\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.not(cur_seq)){\nreturn out;\n} else {\nvar next_seq = cljs.core.first(cur_seq);\nif(cljs.core.truth_(next_seq)){\nvar multi_QMARK_ = (cljs.core.count(cljs.core.first(cur_seq)) > (1));\nvar this_seq = cljs.core.first(cur_seq);\nvar _ = zprint.zprint.log_lines(options,\"wrap-zmap:\",ind,this_seq);\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"wrap-zmap: ind:\",ind,\"this-seq:\",this_seq], 0)):null);\nvar vec__51899 = zprint.zprint.style_lines(options,ind,this_seq);\nvar linecnt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51899,(0),null);\nvar max_width = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51899,(1),null);\nvar lines = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51899,(2),null);\nvar last_width = cljs.core.last(lines);\nvar len = (last_width - ind);\nvar len__$1 = (function (){var x__4214__auto__ = (0);\nvar y__4215__auto__ = len;\nreturn ((x__4214__auto__ > y__4215__auto__) ? x__4214__auto__ : y__4215__auto__);\n})();\nvar newline_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(this_seq),(2)),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323));\nvar comment_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(this_seq),(2)),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069));\nvar comment_inline_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(this_seq),(2)),new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405));\nvar width__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(index,last_index))?(width - rightcnt__$1):width);\nvar fit_QMARK_ = (((!(newline_QMARK_)))?(((((index === (0))) || ((!(comment_QMARK_)))))?(function (){var or__4126__auto__ = (index === (0));\nif(or__4126__auto__){\nreturn or__4126__auto__;\n} else {\nif(((multi_QMARK_)?cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(linecnt,(1)):true)){\nreturn ((cur_ind + len__$1) <= width__$1);\n} else {\nreturn false;\n}\n}\n})():false):false);\nvar new_ind = ((((comment_QMARK_) || (comment_inline_QMARK_)))?(width__$1 + (1)):((((multi_QMARK_) && ((linecnt > (1))) && (cljs.core.not(wrap_after_multi_QMARK_))))?width__$1:((fit_QMARK_)?((cur_ind + len__$1) + (1)):((newline_QMARK_)?ind:((ind + len__$1) + (1))\n))));\nvar G__52325 = cljs.core.next(cur_seq);\nvar G__52326 = new_ind;\nvar G__52327 = (index + (1));\nvar G__52328 = newline_QMARK_;\nvar G__52329 = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(out,((fit_QMARK_)?(((!((index === (0)))))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),this_seq], 0)):this_seq):((newline_QMARK_)?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((new_ind - (1))))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null):((previous_newline_QMARK_)?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),this_seq], 0)):zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(ind))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),this_seq], 0))))));\ncur_seq = G__52325;\ncur_ind = G__52326;\nindex = G__52327;\nprevious_newline_QMARK_ = G__52328;\nout = G__52329;\ncontinue;\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n/**\n * Remove any [_ _ :newline] from the seq.\n */\nzprint.zprint.remove_nl = (function zprint$zprint$remove_nl(coll){\nreturn cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p1__51902_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__51902_SHARP_),(2)),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323));\n}),coll);\n});\n/**\n * Validate an options map that was returned from some internal configuration\n *   expression or configuration.  Either returns the options map or throws\n *   an error.\n */\nzprint.zprint.internal_validate = (function zprint$zprint$internal_validate(options,error_str){\nvar errors = zprint.config.validate_options.cljs$core$IFn$_invoke$arity$1(options);\nvar errors__$1 = (cljs.core.truth_(errors)?[\"Options resulting from \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(error_str),\" had these errors: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(errors)].join(''):null);\nif((!(cljs.core.empty_QMARK_(errors__$1)))){\nthrow (new Error(errors__$1));\n} else {\nreturn options;\n}\n});\nzprint.zprint.lazy_sexpr_seq = (function zprint$zprint$lazy_sexpr_seq(nws_seq){\nif(cljs.core.seq(nws_seq)){\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.LazySeq(null,(function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__51903 = cljs.core.first(nws_seq);\nreturn (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(G__51903) : zprint.zfns.zsexpr.call(null,G__51903));\n})()], null);\n}),null,null)),(new cljs.core.LazySeq(null,(function (){\nvar G__51904 = cljs.core.rest(nws_seq);\nreturn (zprint.zprint.lazy_sexpr_seq.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.lazy_sexpr_seq.cljs$core$IFn$_invoke$arity$1(G__51904) : zprint.zprint.lazy_sexpr_seq.call(null,G__51904));\n}),null,null)));\n} else {\nreturn cljs.core.PersistentVector.EMPTY;\n}\n});\n/**\n * Print basic stuff like a vector or a set.  Several options for how to\n *   print them.\n */\nzprint.zprint.fzprint_vec_STAR_ = (function zprint$zprint$fzprint_vec_STAR_(caller,l_str,r_str,p__51905,ind,zloc){\nvar map__51906 = p__51905;\nvar map__51906__$1 = (((((!((map__51906 == null))))?(((((map__51906.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51906.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51906):map__51906);\nvar options = map__51906__$1;\nvar map__51907 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51906__$1,caller);\nvar map__51907__$1 = (((((!((map__51907 == null))))?(((((map__51907.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51907.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51907):map__51907);\nvar indent_only_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51907__$1,new cljs.core.Keyword(null,\"indent-only?\",\"indent-only?\",375678842));\nvar sort_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51907__$1,new cljs.core.Keyword(null,\"sort?\",\"sort?\",-567661924));\nvar sort_in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51907__$1,new cljs.core.Keyword(null,\"sort-in-code?\",\"sort-in-code?\",111878497));\nvar wrap_coll_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51907__$1,new cljs.core.Keyword(null,\"wrap-coll?\",\"wrap-coll?\",908181571));\nvar indent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51907__$1,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125));\nvar respect_nl_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51907__$1,new cljs.core.Keyword(null,\"respect-nl?\",\"respect-nl?\",604814635));\nvar option_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51907__$1,new cljs.core.Keyword(null,\"option-fn\",\"option-fn\",-959705456));\nvar wrap_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51907__$1,new cljs.core.Keyword(null,\"wrap?\",\"wrap?\",-1677427054));\nvar binding_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51907__$1,new cljs.core.Keyword(null,\"binding?\",\"binding?\",-1071925644));\nvar option_fn_first = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51907__$1,new cljs.core.Keyword(null,\"option-fn-first\",\"option-fn-first\",-1679196201));\nvar fn_format = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51907__$1,new cljs.core.Keyword(null,\"fn-format\",\"fn-format\",-1408187784));\nvar rightcnt = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51906__$1,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070));\nvar in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51906__$1,new cljs.core.Keyword(null,\"in-code?\",\"in-code?\",194866464));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-vec* ind:\",ind,\"indent:\",indent,\"caller:\",caller], 0));\n} else {\n}\n\nif(cljs.core.truth_((function (){var and__4115__auto__ = binding_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640).cljs$core$IFn$_invoke$arity$1(options),(1));\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn zprint.zprint.fzprint_binding_vec(options,ind,zloc);\n} else {\nvar l_str_len = cljs.core.count(l_str);\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options,ind,zloc,r_str);\nvar len = (zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcount.call(null,zloc));\nvar new_options = (cljs.core.truth_(option_fn_first)?(function (){var first_sexpr = (function (){var G__51912 = (zprint.zfns.zfirst_no_comment.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst_no_comment.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst_no_comment.call(null,zloc));\nreturn (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(G__51912) : zprint.zfns.zsexpr.call(null,G__51912));\n})();\nreturn zprint.zprint.internal_validate((option_fn_first.cljs$core$IFn$_invoke$arity$2 ? option_fn_first.cljs$core$IFn$_invoke$arity$2(options,first_sexpr) : option_fn_first.call(null,options,first_sexpr)),[\":vector :option-fn-first called with \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(first_sexpr)].join(''));\n})():null);\nvar _ = (cljs.core.truth_(option_fn_first)?(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-vec* option-fn-first new options\",new_options], 0))], 0)):null):null);\nvar options__$1 = zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([options,new_options], 0));\nvar new_options__$1 = (cljs.core.truth_(option_fn)?(function (){var nws_seq = cljs.core.remove.cljs$core$IFn$_invoke$arity$2(zprint.zfns.zwhitespaceorcomment_QMARK_,(zprint.zfns.zseqnws.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zseqnws.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zseqnws.call(null,zloc)));\nvar nws_count = cljs.core.count(nws_seq);\nvar sexpr_seq = zprint.zprint.lazy_sexpr_seq(nws_seq);\nreturn zprint.zprint.internal_validate((option_fn.cljs$core$IFn$_invoke$arity$3 ? option_fn.cljs$core$IFn$_invoke$arity$3(options__$1,nws_count,sexpr_seq) : option_fn.call(null,options__$1,nws_count,sexpr_seq)),[\":vector :option-fn called with sexpr count \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(nws_count)].join(''));\n})():null);\nvar ___$1 = (cljs.core.truth_(option_fn)?(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-vec* option-fn new options\",new_options__$1], 0))], 0)):null):null);\nvar map__51910 = zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([options__$1,new_options__$1], 0));\nvar map__51910__$1 = (((((!((map__51910 == null))))?(((((map__51910.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51910.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51910):map__51910);\nvar options__$2 = map__51910__$1;\nvar map__51911 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51910__$1,caller);\nvar map__51911__$1 = (((((!((map__51911 == null))))?(((((map__51911.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51911.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51911):map__51911);\nvar indent_only_QMARK___$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51911__$1,new cljs.core.Keyword(null,\"indent-only?\",\"indent-only?\",375678842));\nvar sort_QMARK___$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51911__$1,new cljs.core.Keyword(null,\"sort?\",\"sort?\",-567661924));\nvar sort_in_code_QMARK___$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51911__$1,new cljs.core.Keyword(null,\"sort-in-code?\",\"sort-in-code?\",111878497));\nvar wrap_coll_QMARK___$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51911__$1,new cljs.core.Keyword(null,\"wrap-coll?\",\"wrap-coll?\",908181571));\nvar indent__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51911__$1,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125));\nvar respect_nl_QMARK___$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51911__$1,new cljs.core.Keyword(null,\"respect-nl?\",\"respect-nl?\",604814635));\nvar wrap_QMARK___$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51911__$1,new cljs.core.Keyword(null,\"wrap?\",\"wrap?\",-1677427054));\nvar binding_QMARK___$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51911__$1,new cljs.core.Keyword(null,\"binding?\",\"binding?\",-1071925644));\nvar fn_format__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51911__$1,new cljs.core.Keyword(null,\"fn-format\",\"fn-format\",-1408187784));\nif(cljs.core.truth_(fn_format__$1)){\nreturn zprint.zprint.fzprint_list_STAR_(new cljs.core.Keyword(null,\"vector-fn\",\"vector-fn\",1515528250),\"[\",\"]\",cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options__$2,new cljs.core.Keyword(null,\"fn-style\",\"fn-style\",1330516917),fn_format__$1),ind,zloc);\n} else {\nvar indent__$2 = (function (){var or__4126__auto__ = indent__$1;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.count(l_str);\n}\n})();\nvar new_ind = (cljs.core.truth_(indent_only_QMARK___$1)?ind:(indent__$2 + ind));\nvar ___$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$2))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$2),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-vec*:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)),\"new-ind:\",new_ind], 0))], 0)):null);\nvar zloc_seq = (cljs.core.truth_((function (){var or__4126__auto__ = respect_nl_QMARK___$1;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn indent_only_QMARK___$1;\n}\n})())?(zprint.zfns.zmap_w_nl.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap_w_nl.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap_w_nl.call(null,cljs.core.identity,zloc)):(zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap.call(null,cljs.core.identity,zloc)));\nvar zloc_seq__$1 = (cljs.core.truth_((function (){var and__4115__auto__ = sort_QMARK___$1;\nif(cljs.core.truth_(and__4115__auto__)){\nvar and__4115__auto____$1 = (cljs.core.truth_(in_code_QMARK_)?sort_in_code_QMARK___$1:true);\nif(cljs.core.truth_(and__4115__auto____$1)){\nreturn ((cljs.core.not(respect_nl_QMARK___$1)) && (cljs.core.not(indent_only_QMARK___$1)));\n} else {\nreturn and__4115__auto____$1;\n}\n} else {\nreturn and__4115__auto__;\n}\n})())?zprint.zprint.order_out(caller,options__$2,cljs.core.identity,zloc_seq):zloc_seq);\nvar coll_print = (((len === (0)))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null)], null):zprint.zprint.fzprint_seq(options__$2,new_ind,zloc_seq__$1));\nvar ___$3 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$2))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$2),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-vec*: coll-print:\",coll_print], 0))], 0)):null);\nvar coll_print__$1 = ((cljs.core.not(zprint.zprint.contains_nil_QMARK_(coll_print)))?coll_print:null);\nvar one_line = (cljs.core.truth_(coll_print__$1)?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),(cljs.core.truth_((function (){var or__4126__auto__ = respect_nl_QMARK___$1;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn indent_only_QMARK___$1;\n}\n})())?coll_print__$1:zprint.zprint.remove_nl(coll_print__$1)))):null);\nvar ___$4 = zprint.zprint.log_lines(options__$2,\"fzprint-vec*:\",new_ind,one_line);\nvar ___$5 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$2))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$2),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-vec*: new-ind:\",new_ind,\"one-line:\",one_line], 0))], 0)):null);\nvar one_line_lines = zprint.zprint.style_lines(options__$2,new_ind,one_line);\nif((len === (0))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,r_str_vec], 0));\n} else {\nif(cljs.core.truth_(one_line_lines)){\nif(zprint.zprint.fzfit_one_line(options__$2,one_line_lines)){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,one_line,r_str_vec], 0));\n} else {\nif(cljs.core.truth_(indent_only_QMARK___$1)){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,zprint.zprint.indent_zmap.cljs$core$IFn$_invoke$arity$6(caller,options__$2,ind,(ind + l_str_len),coll_print__$1,indent__$2),r_str_vec], 0));\n} else {\nif(cljs.core.truth_((function (){var or__4126__auto__ = ((cljs.core.not(wrap_coll_QMARK___$1))?zprint.zprint.any_zcoll_QMARK_(options__$2,new_ind,zloc):false);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.not(wrap_QMARK___$1);\n}\n})())){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(new_ind))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.remove_nl(coll_print__$1))),r_str_vec], 0));\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,(function (){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$2))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$2),\"fzprint-vec*: wrap coll-print:\",coll_print__$1], 0));\n} else {\n}\n\nreturn zprint.zprint.wrap_zmap(caller,options__$2,new_ind,coll_print__$1);\n})()\n,r_str_vec], 0));\n}\n}\n}\n} else {\nreturn null;\n}\n}\n}\n}\n});\nzprint.zprint.fzprint_vec = (function zprint$zprint$fzprint_vec(options,ind,zloc){\nreturn zprint.zprint.fzprint_vec_STAR_(new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158),\"[\",\"]\",zprint.zprint.rightmost(options),ind,zloc);\n});\nzprint.zprint.fzprint_array = (function zprint$zprint$fzprint_array(options,ind,zloc){\nreturn zprint.zprint.fzprint_vec_STAR_(new cljs.core.Keyword(null,\"array\",\"array\",-2080713842),\"[\",\"]\",zprint.zprint.rightmost(options),ind,zloc);\n});\n/**\n * Pretty print and focus style a :set element.\n */\nzprint.zprint.fzprint_set = (function zprint$zprint$fzprint_set(options,ind,zloc){\nreturn zprint.zprint.fzprint_vec_STAR_(new cljs.core.Keyword(null,\"set\",\"set\",304602554),\"#{\",\"}\",zprint.zprint.rightmost(options),ind,zloc);\n});\n/**\n * Do the same as interpose, but different seps depending on pred?.\n *   If sep-nil is nil, then when pred? is false we don't interpose\n *   anything!\n */\nzprint.zprint.interpose_either = (function zprint$zprint$interpose_either(sep_true,sep_nil,pred_QMARK_,coll){\nvar coll__$1 = coll;\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nvar interpose_QMARK_ = null;\nwhile(true){\nif(cljs.core.empty_QMARK_(coll__$1)){\nreturn cljs.core.persistent_BANG_(out);\n} else {\nvar G__52373 = cljs.core.next(coll__$1);\nvar G__52374 = (cljs.core.truth_(interpose_QMARK_)?zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([out,sep_true,cljs.core.first(coll__$1)], 0)):(((((cljs.core.count(out) === (0))) || ((sep_nil == null))))?cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,cljs.core.first(coll__$1)):zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([out,sep_nil,cljs.core.first(coll__$1)], 0))));\nvar G__52375 = (function (){var G__51916 = cljs.core.first(coll__$1);\nreturn (pred_QMARK_.cljs$core$IFn$_invoke$arity$1 ? pred_QMARK_.cljs$core$IFn$_invoke$arity$1(G__51916) : pred_QMARK_.call(null,G__51916));\n})();\ncoll__$1 = G__52373;\nout = G__52374;\ninterpose_QMARK_ = G__52375;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Move through a sequence of style vecs and ensure that at least\n *   one newline (actually an indent) appears before each element.  If\n *   a newline in the style-vecs is where we wanted one, well and good.\n *   If there are more than we wanted, be sure that they come out.\n *   (Really? -- this is worth checking!)\n *   Also, a comment gets a newline and shouldn't overlay a following\n *   explicit newline.  If not-first? is truthy, then don't put a\n *   newline before the first element.\n */\nzprint.zprint.precede_w_nl = (function zprint$zprint$precede_w_nl(ind,coll,not_first_QMARK_){\nvar coll__$1 = coll;\nvar ind_seq = ((cljs.core.coll_QMARK_(ind))?ind:(new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[ind],null)));\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nvar added_nl_QMARK_ = not_first_QMARK_;\nvar previous_comment_QMARK_ = null;\nwhile(true){\nif(cljs.core.empty_QMARK_(coll__$1)){\nvar result = cljs.core.persistent_BANG_(out);\nif(cljs.core.truth_(previous_comment_QMARK_)){\nreturn cljs.core.butlast(result);\n} else {\nreturn result;\n}\n} else {\nvar vec__51923 = cljs.core.first(coll__$1);\nvar vec__51926 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51923,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51926,(0),null);\nvar color = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51926,(1),null);\nvar what = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51926,(2),null);\nvar element = vec__51923;\nvar indent = cljs.core.first(ind_seq);\nvar newline_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(what,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323));\nvar last_what = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.last(element),(2));\nvar comment_QMARK_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(last_what,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(last_what,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405))));\nvar G__52376 = cljs.core.next(coll__$1);\nvar G__52377 = (function (){var temp__5733__auto__ = cljs.core.next(ind_seq);\nif(temp__5733__auto__){\nvar next_ind = temp__5733__auto__;\nreturn next_ind;\n} else {\nreturn ind_seq;\n}\n})();\nvar G__52378 = ((newline_QMARK_)?cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,element):(cljs.core.truth_(added_nl_QMARK_)?((comment_QMARK_)?zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([out,element,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(indent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null)], 0)):cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,element)):((comment_QMARK_)?zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([out,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(indent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),element,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(indent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null)], 0)):zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([out,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(indent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),element], 0)))));\nvar G__52379 = ((newline_QMARK_) || (comment_QMARK_));\nvar G__52380 = comment_QMARK_;\ncoll__$1 = G__52376;\nind_seq = G__52377;\nout = G__52378;\nadded_nl_QMARK_ = G__52379;\nprevious_comment_QMARK_ = G__52380;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Analyze a style-vec which contains only newlines, the count of newlines\n *   in the style vec.  We assume that each :newline style-vec contains one\n *   newline (i.e., it was generated by fzprint-newlines).\n */\nzprint.zprint.count_newline_types = (function zprint$zprint$count_newline_types(newline_style_vec){\nvar count_of_types = cljs.core.count(cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__51929_SHARP_){\nreturn cljs.core.nth.cljs$core$IFn$_invoke$arity$2(p1__51929_SHARP_,(2));\n}),newline_style_vec)));\nif(((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(count_of_types,(1))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(newline_style_vec),(2)),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))))){\nthrow (new Error([\"count-newline-types: more than one type or wrong type! count:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(count_of_types),\" style-vec:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(newline_style_vec)].join('')));\n} else {\n}\n\nreturn cljs.core.count(newline_style_vec);\n});\n/**\n * Do very specialized interpose, but different seps depending on pred-fn\n *   return and nl-separator?. This assumes that sep-* does one line, and\n *   sep-*-nl does two lines.\n */\nzprint.zprint.interpose_either_nl_hf = (function zprint$zprint$interpose_either_nl_hf(sep_true,sep_true_nl,sep_nil,sep_nil_nl,p__51930,pred_fn,coll){\nvar map__51931 = p__51930;\nvar map__51931__$1 = (((((!((map__51931 == null))))?(((((map__51931.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51931.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51931):map__51931);\nvar suboptions = map__51931__$1;\nvar nl_separator_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51931__$1,new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767));\nvar nl_separator_flow_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51931__$1,new cljs.core.Keyword(null,\"nl-separator-flow?\",\"nl-separator-flow?\",495760215));\nvar coll__$1 = coll;\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nvar previous_pred_QMARK_ = null;\nvar add_nl_QMARK_ = null;\nvar first_QMARK_ = true;\nvar newline_count = (0);\nwhile(true){\nif(cljs.core.empty_QMARK_(coll__$1)){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,cljs.core.persistent_BANG_(out));\n} else {\nvar vec__51939 = cljs.core.first(coll__$1);\nvar hangflow = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51939,(0),null);\nvar style_vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51939,(1),null);\nvar style_vec_empty_QMARK_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(style_vec),(1))) && (cljs.core.empty_QMARK_(cljs.core.first(cljs.core.first(style_vec)))));\nif(style_vec_empty_QMARK_){\nthrow (new Error([\"empty style vec:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(style_vec)].join('')));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(style_vec),(2)),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))){\nvar G__52383 = cljs.core.next(coll__$1);\nvar G__52384 = out;\nvar G__52385 = previous_pred_QMARK_;\nvar G__52386 = add_nl_QMARK_;\nvar G__52387 = first_QMARK_;\nvar G__52388 = (newline_count + zprint.zprint.count_newline_types(style_vec));\ncoll__$1 = G__52383;\nout = G__52384;\nprevious_pred_QMARK_ = G__52385;\nadd_nl_QMARK_ = G__52386;\nfirst_QMARK_ = G__52387;\nnewline_count = G__52388;\ncontinue;\n} else {\nvar vec__51942 = (cljs.core.truth_(previous_pred_QMARK_)?(cljs.core.truth_(add_nl_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sep_true_nl,(2)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sep_true,(1)], null)):(cljs.core.truth_(add_nl_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sep_nil_nl,(2)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sep_nil,(1)], null)));\nvar interpose_style_vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51942,(0),null);\nvar interpose_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51942,(1),null);\nvar interpose_count__$1 = (cljs.core.truth_(first_QMARK_)?(1):interpose_count);\nvar addtl_nl_needed = (function (){var x__4214__auto__ = (newline_count - interpose_count__$1);\nvar y__4215__auto__ = (0);\nreturn ((x__4214__auto__ > y__4215__auto__) ? x__4214__auto__ : y__4215__auto__);\n})();\nvar G__52389 = cljs.core.next(coll__$1);\nvar G__52390 = (cljs.core.truth_(first_QMARK_)?(((addtl_nl_needed === (0)))?cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,style_vec):zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([out,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(addtl_nl_needed,cljs.core.first(sep_nil)),style_vec], 0))):(((addtl_nl_needed === (0)))?zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([out,interpose_style_vec,style_vec], 0)):zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([out,interpose_style_vec,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(addtl_nl_needed,cljs.core.first(sep_nil)),style_vec], 0))));\nvar G__52391 = (cljs.core.truth_(pred_fn)?(pred_fn.cljs$core$IFn$_invoke$arity$1 ? pred_fn.cljs$core$IFn$_invoke$arity$1(style_vec) : pred_fn.call(null,style_vec)):null);\nvar G__52392 = (function (){var and__4115__auto__ = nl_separator_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(hangflow,new cljs.core.Keyword(null,\"flow\",\"flow\",590489032));\n} else {\nreturn and__4115__auto__;\n}\n})();\nvar G__52393 = null;\nvar G__52394 = ((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.last(style_vec),(2)),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.last(style_vec),(2)),new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405)))))?(1):(0));\ncoll__$1 = G__52389;\nout = G__52390;\nprevious_pred_QMARK_ = G__52391;\nadd_nl_QMARK_ = G__52392;\nfirst_QMARK_ = G__52393;\nnewline_count = G__52394;\ncontinue;\n\n}\n}\n}\nbreak;\n}\n});\n/**\n * Put a single or double line between pairs returned from\n *   fzprint-map-two-up.  The second argument is the map resulting\n *   from (:map options) or (:pair options) or whatever.  It should\n *   have :nl-separator? and :nl-separator-flow? in it.\n */\nzprint.zprint.interpose_nl_hf = (function zprint$zprint$interpose_nl_hf(suboptions,ind,coll){\nreturn zprint.zprint.interpose_either_nl_hf(null,null,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(ind))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\\n\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(ind))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),suboptions,null,coll);\n});\nzprint.zprint.fzprint_map_STAR_ = (function zprint$zprint$fzprint_map_STAR_(caller,l_str,r_str,p__51946,ind,zloc,ns){\nvar map__51947 = p__51946;\nvar map__51947__$1 = (((((!((map__51947 == null))))?(((((map__51947.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51947.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51947):map__51947);\nvar options = map__51947__$1;\nvar map__51948 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51947__$1,caller);\nvar map__51948__$1 = (((((!((map__51948 == null))))?(((((map__51948.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51948.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51948):map__51948);\nvar map_options = map__51948__$1;\nvar indent_only_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51948__$1,new cljs.core.Keyword(null,\"indent-only?\",\"indent-only?\",375678842));\nvar nl_separator_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51948__$1,new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767));\nvar comma_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51948__$1,new cljs.core.Keyword(null,\"comma?\",\"comma?\",1532168963));\nvar indent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51948__$1,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125));\nvar force_nl_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51948__$1,new cljs.core.Keyword(null,\"force-nl?\",\"force-nl?\",-1299761462));\nvar respect_nl_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51948__$1,new cljs.core.Keyword(null,\"respect-nl?\",\"respect-nl?\",604814635));\nvar key_ignore = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51948__$1,new cljs.core.Keyword(null,\"key-ignore\",\"key-ignore\",75506668));\nvar key_ignore_silent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51948__$1,new cljs.core.Keyword(null,\"key-ignore-silent\",\"key-ignore-silent\",-1720115060));\nvar lift_ns_in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51948__$1,new cljs.core.Keyword(null,\"lift-ns-in-code?\",\"lift-ns-in-code?\",1444279377));\nvar lift_ns_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51948__$1,new cljs.core.Keyword(null,\"lift-ns?\",\"lift-ns?\",2021372853));\nvar one_line_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51947__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111));\nvar ztype = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51947__$1,new cljs.core.Keyword(null,\"ztype\",\"ztype\",-562179020));\nvar map_depth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51947__$1,new cljs.core.Keyword(null,\"map-depth\",\"map-depth\",-191378641));\nvar in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51947__$1,new cljs.core.Keyword(null,\"in-code?\",\"in-code?\",194866464));\nif(cljs.core.truth_(indent_only_QMARK_)){\nvar options__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"map-depth\",\"map-depth\",-191378641),(map_depth + (1)));\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options__$1,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options__$1,(indent + ind),zloc,r_str);\nif(((zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcount.call(null,zloc)) === (0))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,r_str_vec], 0));\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,zprint.zprint.fzprint_indent.cljs$core$IFn$_invoke$arity$8(caller,l_str,r_str,options__$1,ind,zloc,null,null),r_str_vec], 0));\n}\n} else {\nvar options__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"map-depth\",\"map-depth\",-191378641),(map_depth + (1)));\nvar zloc__$1 = (cljs.core.truth_(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ztype,new cljs.core.Keyword(null,\"sexpr\",\"sexpr\",-783344087)))?(function (){var or__4126__auto__ = key_ignore;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn key_ignore_silent;\n}\n})():false))?zprint.zprint.map_ignore(caller,options__$1,zloc):zloc);\nvar vec__51951 = zprint.zprint.partition_all_2_nc(zprint.zprint.no_max_length(options__$1),(cljs.core.truth_(respect_nl_QMARK_)?(zprint.zfns.zseqnws_w_nl.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zseqnws_w_nl.cljs$core$IFn$_invoke$arity$1(zloc__$1) : zprint.zfns.zseqnws_w_nl.call(null,zloc__$1)):(zprint.zfns.zseqnws.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zseqnws.cljs$core$IFn$_invoke$arity$1(zloc__$1) : zprint.zfns.zseqnws.call(null,zloc__$1))));\nvar no_sort_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51951,(0),null);\nvar pair_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51951,(1),null);\nvar no_sort_QMARK___$1 = (function (){var or__4126__auto__ = no_sort_QMARK_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn respect_nl_QMARK_;\n}\n})();\nvar vec__51954 = (function (){var G__51957 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(map_options,new cljs.core.Keyword(null,\"in-code?\",\"in-code?\",194866464),in_code_QMARK_);\nvar G__51958 = pair_seq;\nvar G__51959 = ns;\nreturn (zprint.zfns.zlift_ns.cljs$core$IFn$_invoke$arity$3 ? zprint.zfns.zlift_ns.cljs$core$IFn$_invoke$arity$3(G__51957,G__51958,G__51959) : zprint.zfns.zlift_ns.call(null,G__51957,G__51958,G__51959));\n})();\nvar ns__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51954,(0),null);\nvar lift_pair_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51954,(1),null);\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-map* zlift-ns ns:\",ns__$1], 0))], 0)):null);\nvar l_str__$1 = (cljs.core.truth_(ns__$1)?[\"#\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns__$1),cljs.core.str.cljs$core$IFn$_invoke$arity$1(l_str)].join(''):l_str);\nvar pair_seq__$1 = (function (){var or__4126__auto__ = lift_pair_seq;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn pair_seq;\n}\n})();\nvar pair_seq__$2 = (cljs.core.truth_(no_sort_QMARK___$1)?pair_seq__$1:zprint.zprint.order_out(caller,options__$1,cljs.core.first,pair_seq__$1));\nvar max_length = zprint.zprint.get_max_length(options__$1);\nvar pair_count = cljs.core.count(pair_seq__$2);\nvar pair_seq__$3 = (((pair_count > max_length))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.take.cljs$core$IFn$_invoke$arity$2(max_length,pair_seq__$2),(new cljs.core.List(null,(new cljs.core.List(null,(zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0 ? zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0() : zprint.zfns.zdotdotdot.call(null)),null,(1),null)),null,(1),null))):pair_seq__$2);\nvar indent__$1 = cljs.core.count(l_str__$1);\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str__$1,zprint.zprint.zcolor_map(options__$1,l_str__$1),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options__$1,(indent__$1 + ind),zloc__$1,r_str);\nif(cljs.core.empty_QMARK_(pair_seq__$3)){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,r_str_vec], 0));\n} else {\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),\"fzprint-map*:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc__$1) : zprint.zfns.zstring.call(null,zloc__$1)),\"ind:\",ind,\"comma?\",comma_QMARK_,\"rightcnt:\",new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070).cljs$core$IFn$_invoke$arity$1(options__$1)], 0)):null);\nvar pair_print_one_line = zprint.zprint.fzprint_map_two_up(caller,(cljs.core.truth_(one_line_QMARK_)?options__$1:cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111),true)),(indent__$1 + ind),comma_QMARK_,pair_seq__$3);\nvar pair_print_one_line__$1 = zprint.zprint.remove_hangflow(pair_print_one_line);\nvar pair_print_one_line__$2 = ((zprint.zprint.fzfit_one_line(options__$1,zprint.zprint.style_lines(options__$1,(indent__$1 + ind),pair_print_one_line__$1)))?pair_print_one_line__$1:null);\nvar one_line = (cljs.core.truth_(pair_print_one_line__$2)?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,zprint.zprint.interpose_either(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\", \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),cljs.core.constantly(comma_QMARK_),pair_print_one_line__$2)):null);\nvar one_line_lines = zprint.zprint.style_lines(options__$1,(indent__$1 + ind),one_line);\nvar one_line__$1 = ((zprint.zprint.fzfit_one_line(options__$1,one_line_lines))?one_line:null);\nif(cljs.core.truth_(one_line__$1)){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,one_line__$1,r_str_vec], 0));\n} else {\nif(cljs.core.not(one_line_QMARK_)){\nvar pair_print = zprint.zprint.fzprint_map_two_up(caller,options__$1,(indent__$1 + ind),comma_QMARK_,pair_seq__$3);\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,zprint.zprint.interpose_either_nl_hf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\",\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((ind + (1))))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\",\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\\n\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((ind + (1))))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((ind + (1))))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((ind + (1))))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((ind + (1))))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),new cljs.core.Keyword(null,\"map\",\"map\",1371690461).cljs$core$IFn$_invoke$arity$1(options__$1),(function (p1__51945_SHARP_){\nvar and__4115__auto__ = comma_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn ((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__51945_SHARP_),(2)),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__51945_SHARP_),(2)),new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405))));\n} else {\nreturn and__4115__auto__;\n}\n}),pair_print),r_str_vec], 0));\n} else {\nreturn null;\n}\n}\n}\n}\n});\n/**\n * Format a real map.\n */\nzprint.zprint.fzprint_map = (function zprint$zprint$fzprint_map(options,ind,zloc){\nvar vec__51960 = (cljs.core.truth_((zprint.zfns.znamespacedmap_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.znamespacedmap_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.znamespacedmap_QMARK_.call(null,zloc)))?(function (){var zloc_seq = (zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap.call(null,cljs.core.identity,zloc));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-map: zloc-seq\",cljs.core.map.cljs$core$IFn$_invoke$arity$2(zprint.zfns.zstring,zloc_seq)], 0))], 0));\n} else {\n}\n\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__51963 = cljs.core.first(zloc_seq);\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__51963) : zprint.zfns.zstring.call(null,G__51963));\n})(),cljs.core.second(zloc_seq)], null);\n})():null);\nvar ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51960,(0),null);\nvar lifted_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51960,(1),null);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-map: ns:\",ns,\"indent:\",new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"map\",\"map\",1371690461).cljs$core$IFn$_invoke$arity$1(options)),\"map-options:\",new cljs.core.Keyword(null,\"map\",\"map\",1371690461).cljs$core$IFn$_invoke$arity$1(options)], 0))], 0));\n} else {\n}\n\nif(cljs.core.truth_(ns)){\nreturn zprint.zprint.fzprint_map_STAR_(new cljs.core.Keyword(null,\"map\",\"map\",1371690461),\"{\",\"}\",zprint.zprint.rightmost(options),ind,lifted_map,ns);\n} else {\nreturn zprint.zprint.fzprint_map_STAR_(new cljs.core.Keyword(null,\"map\",\"map\",1371690461),\"{\",\"}\",zprint.zprint.rightmost(options),ind,zloc,null);\n}\n});\n/**\n * Return true if the string starts with #object[\n */\nzprint.zprint.object_str_QMARK_ = (function zprint$zprint$object_str_QMARK_(s){\nreturn cljs.core.re_find(/^#object\\[/,s);\n});\n/**\n * Print something that looks like #object[...] in a way\n *   that will acknowledge the structure inside of the [...]\n */\nzprint.zprint.fzprint_object = (function zprint$zprint$fzprint_object(var_args){\nvar G__51965 = arguments.length;\nswitch (G__51965) {\ncase 4:\nreturn zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ncase 3:\nreturn zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$4 = (function (options,ind,zloc,zloc_value){\nreturn zprint.zprint.fzprint_vec_STAR_(new cljs.core.Keyword(null,\"object\",\"object\",1474613949),\"#object[\",\"]\",options,ind,(zprint.zfns.zobj_to_vec.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zobj_to_vec.cljs$core$IFn$_invoke$arity$2(zloc,zloc_value) : zprint.zfns.zobj_to_vec.call(null,zloc,zloc_value)));\n}));\n\n(zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$3 = (function (options,ind,zloc){\nreturn zprint.zprint.fzprint_vec_STAR_(new cljs.core.Keyword(null,\"object\",\"object\",1474613949),\"#object[\",\"]\",options,ind,(zprint.zfns.zobj_to_vec.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zobj_to_vec.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zobj_to_vec.call(null,zloc)));\n}));\n\n(zprint.zprint.fzprint_object.cljs$lang$maxFixedArity = 4);\n\n/**\n * Find the hash-code identity for an object.\n */\nzprint.zprint.hash_identity_str = (function zprint$zprint$hash_identity_str(obj){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.hash(obj));\n});\nzprint.zprint.fzprint_atom = (function zprint$zprint$fzprint_atom(p__51966,ind,zloc){\nvar map__51967 = p__51966;\nvar map__51967__$1 = (((((!((map__51967 == null))))?(((((map__51967.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51967.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51967):map__51967);\nvar options = map__51967__$1;\nvar map__51968 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51967__$1,new cljs.core.Keyword(null,\"atom\",\"atom\",-397043653));\nvar map__51968__$1 = (((((!((map__51968 == null))))?(((((map__51968.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51968.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51968):map__51968);\nvar object_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51968__$1,new cljs.core.Keyword(null,\"object?\",\"object?\",-1313059217));\nif(cljs.core.truth_((function (){var and__4115__auto__ = object_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn zprint.zprint.object_str_QMARK_((zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)));\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$4(options,ind,zloc,(zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zderef.call(null,zloc)));\n} else {\nvar l_str = \"#<\";\nvar r_str = \">\";\nvar indent = ((l_str).length);\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options,(indent + ind),zloc,r_str);\nvar arg_1 = [\"Atom@\",zprint.zprint.hash_identity_str(zloc)].join('');\nvar arg_1_indent = (((ind + indent) + (1)) + ((arg_1).length));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-atom: arg-1:\",arg_1,\"zstring arg-1:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))], 0))], 0));\n} else {\n}\n\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg_1,zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"none\",\"none\",1333468478)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null),zprint.zprint.fzprint_hang_one(new cljs.core.Keyword(null,\"unknown\",\"unknown\",-935977881),zprint.zprint.rightmost(options),arg_1_indent,(indent + ind),(zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zderef.call(null,zloc))),r_str_vec], 0));\n}\n});\n/**\n * Print out a future or a promise or a delay.  These can only be \n *   sexpressions, since they don't exist in a textual representation \n *   of code (or data for that matter).  That means that we can use \n *   regular sexpression operations on zloc.\n */\nzprint.zprint.fzprint_future_promise_delay_agent = (function zprint$zprint$fzprint_future_promise_delay_agent(options,ind,zloc){\nvar zloc_type = (cljs.core.truth_((zprint.zfns.zfuture_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfuture_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfuture_QMARK_.call(null,zloc)))?new cljs.core.Keyword(null,\"future\",\"future\",1877842724):(cljs.core.truth_((zprint.zfns.zpromise_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zpromise_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zpromise_QMARK_.call(null,zloc)))?new cljs.core.Keyword(null,\"promise\",\"promise\",1767129287):(cljs.core.truth_((zprint.zfns.zdelay_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zdelay_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zdelay_QMARK_.call(null,zloc)))?new cljs.core.Keyword(null,\"delay\",\"delay\",-574225219):(cljs.core.truth_((zprint.zfns.zagent_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zagent_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zagent_QMARK_.call(null,zloc)))?new cljs.core.Keyword(null,\"agent\",\"agent\",-766455027):(function(){throw (new Error(\"Not a future, promise, or delay:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))))})()\n))));\nif(cljs.core.truth_((function (){var and__4115__auto__ = new cljs.core.Keyword(null,\"object?\",\"object?\",-1313059217).cljs$core$IFn$_invoke$arity$1((options.cljs$core$IFn$_invoke$arity$1 ? options.cljs$core$IFn$_invoke$arity$1(zloc_type) : options.call(null,zloc_type)));\nif(cljs.core.truth_(and__4115__auto__)){\nreturn zprint.zprint.object_str_QMARK_((zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)));\n} else {\nreturn and__4115__auto__;\n}\n})())){\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(zloc_type,new cljs.core.Keyword(null,\"agent\",\"agent\",-766455027))) || (cljs.core.realized_QMARK_(zloc)))){\nreturn zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$4(options,ind,zloc,(zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zderef.call(null,zloc)));\n} else {\nreturn zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$3(options,ind,zloc);\n}\n} else {\nvar l_str = \"#<\";\nvar r_str = \">\";\nvar indent = ((l_str).length);\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options,(indent + ind),zloc,r_str);\nvar type_str = (function (){var G__51971 = zloc_type;\nvar G__51971__$1 = (((G__51971 instanceof cljs.core.Keyword))?G__51971.fqn:null);\nswitch (G__51971__$1) {\ncase \"future\":\nreturn \"Future@\";\n\nbreak;\ncase \"promise\":\nreturn \"Promise@\";\n\nbreak;\ncase \"delay\":\nreturn \"Delay@\";\n\nbreak;\ncase \"agent\":\nreturn \"Agent@\";\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__51971__$1)].join('')));\n\n}\n})();\nvar arg_1 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(type_str),zprint.zprint.hash_identity_str(zloc)].join('');\nvar arg_1_indent = (((ind + indent) + (1)) + ((arg_1).length));\nvar zloc_realized_QMARK_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(zloc_type,new cljs.core.Keyword(null,\"agent\",\"agent\",-766455027)))?true:cljs.core.realized_QMARK_(zloc));\nvar value = ((zloc_realized_QMARK_)?(zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zderef.call(null,zloc)):(function (){var G__51972 = zloc_type;\nvar G__51972__$1 = (((G__51972 instanceof cljs.core.Keyword))?G__51972.fqn:null);\nswitch (G__51972__$1) {\ncase \"future\":\nreturn \"pending\";\n\nbreak;\ncase \"promise\":\nreturn \"not-delivered\";\n\nbreak;\ncase \"delay\":\nreturn \"pending\";\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__51972__$1)].join('')));\n\n}\n})());\nvar options__$1 = ((zloc_realized_QMARK_)?options:cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"string-str?\",\"string-str?\",2059147352),true));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-fpda: arg-1:\",arg_1,\"zstring arg-1:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))], 0))], 0));\n} else {\n}\n\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg_1,zprint.zprint.zcolor_map(options__$1,new cljs.core.Keyword(null,\"none\",\"none\",1333468478)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null),zprint.zprint.fzprint_hang_one(new cljs.core.Keyword(null,\"unknown\",\"unknown\",-935977881),zprint.zprint.rightmost(options__$1),arg_1_indent,(indent + ind),value),r_str_vec], 0));\n}\n});\n/**\n * Print a function object, what you get when you put a function in\n *   a collection, for instance.  This doesn't do macros, you will notice.\n *   It also can't be invoked when zloc is a zipper.\n */\nzprint.zprint.fzprint_fn_obj = (function zprint$zprint$fzprint_fn_obj(p__51973,ind,zloc){\nvar map__51974 = p__51973;\nvar map__51974__$1 = (((((!((map__51974 == null))))?(((((map__51974.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51974.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51974):map__51974);\nvar options = map__51974__$1;\nvar map__51975 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51974__$1,new cljs.core.Keyword(null,\"fn-obj\",\"fn-obj\",465065936));\nvar map__51975__$1 = (((((!((map__51975 == null))))?(((((map__51975.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51975.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51975):map__51975);\nvar object_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51975__$1,new cljs.core.Keyword(null,\"object?\",\"object?\",-1313059217));\nif(cljs.core.truth_((function (){var and__4115__auto__ = object_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn zprint.zprint.object_str_QMARK_((zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)));\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$3(options,ind,zloc);\n} else {\nvar l_str = \"#<\";\nvar r_str = \">\";\nvar indent = ((l_str).length);\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204)),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$5(options,(indent + ind),zloc,r_str,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204));\nvar arg_1_left = \"Fn@\";\nvar arg_1_right = zprint.zprint.hash_identity_str(zloc);\nvar arg_1_indent = ((((ind + indent) + (1)) + ((arg_1_left).length)) + ((arg_1_right).length));\nvar class_str = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.type(zloc)], 0));\nvar name_js = cljs.core.str.cljs$core$IFn$_invoke$arity$1(zloc.name);\nvar color = (cljs.core.truth_((function (){var or__4126__auto__ = cljs.core.re_find(/^clojure/,name_js);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.re_find(/^cljs/,name_js);\n}\n})())?zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204)):new cljs.core.Keyword(null,\"none\",\"none\",1333468478));\nvar name_split = clojure.string.split.cljs$core$IFn$_invoke$arity$2(name_js,/\\$/);\nvar arg_2 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\".\",cljs.core.butlast(name_split)))),\"/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.last(name_split))].join('');\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-fn-obj: arg-1:\",arg_1_left,arg_1_right,\"zstring arg-1:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))], 0))], 0));\n} else {\n}\n\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg_1_left,zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg_1_right,zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"none\",\"none\",1333468478)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null),zprint.zprint.fzprint_hang_one(new cljs.core.Keyword(null,\"unknown\",\"unknown\",-935977881),zprint.zprint.rightmost(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(options,new cljs.core.Keyword(null,\"string-str?\",\"string-str?\",2059147352),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"string-color\",\"string-color\",-1853875244),color], 0))),arg_1_indent,(indent + ind),arg_2),r_str_vec], 0));\n}\n});\nzprint.zprint.fzprint_ns = (function zprint$zprint$fzprint_ns(options,ind,zloc){\nvar l_str = \"#<\";\nvar r_str = \">\";\nvar indent = ((l_str).length);\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options,(indent + ind),zloc,r_str);\nvar arg_1 = \"Namespace\";\nvar arg_1_indent = (((ind + indent) + (1)) + ((arg_1).length));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-atom: arg-1:\",arg_1,\"zstring arg-1:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))], 0))], 0));\n} else {\n}\n\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg_1,zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"none\",\"none\",1333468478)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null),zprint.zprint.fzprint_hang_one(new cljs.core.Keyword(null,\"unknown\",\"unknown\",-935977881),zprint.zprint.rightmost(options),arg_1_indent,(indent + ind),cljs.core.ns_name(zloc)),r_str_vec], 0));\n});\n/**\n * Given an options map, decrement the :depth value and return the result.\n */\nzprint.zprint.dec_depth = (function zprint$zprint$dec_depth(options){\nif(cljs.core.truth_(options)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640),((function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (1);\n}\n})() - (1)));\n} else {\nreturn null;\n}\n});\nzprint.zprint.fzprint_record = (function zprint$zprint$fzprint_record(p__51978,ind,zloc){\nvar map__51979 = p__51978;\nvar map__51979__$1 = (((((!((map__51979 == null))))?(((((map__51979.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51979.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51979):map__51979);\nvar options = map__51979__$1;\nvar map__51980 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51979__$1,new cljs.core.Keyword(null,\"record\",\"record\",-779106859));\nvar map__51980__$1 = (((((!((map__51980 == null))))?(((((map__51980.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51980.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51980):map__51980);\nvar record_type_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51980__$1,new cljs.core.Keyword(null,\"record-type?\",\"record-type?\",-1195765660));\nvar to_string_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51980__$1,new cljs.core.Keyword(null,\"to-string?\",\"to-string?\",1452120886));\nif(cljs.core.truth_(to_string_QMARK_)){\nvar G__51983 = options;\nvar G__51984 = ind;\nvar G__51985 = zloc.toString();\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51983,G__51984,G__51985) : zprint.zprint.fzprint_STAR_.call(null,G__51983,G__51984,G__51985));\n} else {\nif(cljs.core.not(record_type_QMARK_)){\nvar G__51986 = options;\nvar G__51987 = ind;\nvar G__51988 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,zloc);\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51986,G__51987,G__51988) : zprint.zprint.fzprint_STAR_.call(null,G__51986,G__51987,G__51988));\n} else {\nvar l_str = \"#\";\nvar r_str = \"\";\nvar indent = ((l_str).length);\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options,(indent + ind),zloc,r_str);\nvar arg_1 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.type(zloc)], 0));\nvar arg_1__$1 = (function (){var tokens = clojure.string.split.cljs$core$IFn$_invoke$arity$2(arg_1,/\\./);\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\".\",tokens)));\n})();\nvar arg_1_indent = (((ind + indent) + (1)) + cljs.core.count(arg_1__$1));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-record: arg-1:\",arg_1__$1,\"zstring zloc:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))], 0))], 0));\n} else {\n}\n\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg_1__$1,zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"none\",\"none\",1333468478)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null),zprint.zprint.fzprint_hang_one(new cljs.core.Keyword(null,\"record\",\"record\",-779106859),zprint.zprint.dec_depth(options),arg_1_indent,(indent + ind),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,zloc)),r_str_vec], 0));\n}\n}\n});\n/**\n * Print the two items in a meta node.  Different because it doesn't print\n *   a single collection, so it doesn't do any indent or rightmost.  It also\n *   uses a different approach to calling fzprint-flow-seq with the\n *   results zmap, so that it prints all of the seq, not just the rightmost.\n */\nzprint.zprint.fzprint_meta = (function zprint$zprint$fzprint_meta(options,ind,zloc){\nvar l_str = \"^\";\nvar r_str = \"\";\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options,ind,zloc,r_str);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-meta: zloc:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))], 0))], 0));\n} else {\n}\n\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,(cljs.core.truth_(new cljs.core.Keyword(null,\"indent-only?\",\"indent-only?\",375678842).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"list\",\"list\",765357683).cljs$core$IFn$_invoke$arity$1(options)))?zprint.zprint.fzprint_indent.cljs$core$IFn$_invoke$arity$9(new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158),l_str,\"\",options,ind,zloc,null,null,new cljs.core.Keyword(null,\"first-indent-only?\",\"first-indent-only?\",319167353)):zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$3(options,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,(((l_str).length) + ind),cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(((zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcount.call(null,zloc)) - (1)),ind)),zprint.zprint.fzprint_get_zloc_seq(new cljs.core.Keyword(null,\"list\",\"list\",765357683),options,zloc))),r_str_vec], 0));\n});\n/**\n * Print a reader-macro, often a reader-conditional. Adapted for differences\n *   in parsing #?@ between rewrite-clj and rewrite-cljs.  Also adapted for\n *   the rewrite-clj not parsing namespaced maps in the version presently\n *   used.\n */\nzprint.zprint.fzprint_reader_macro = (function zprint$zprint$fzprint_reader_macro(options,ind,zloc){\nvar zstr = (function (){var G__51989 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst.call(null,zloc));\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__51989) : zprint.zfns.zstring.call(null,G__51989));\n})();\nvar alt_at_QMARK_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(zstr),(2))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.subs.cljs$core$IFn$_invoke$arity$3(zstr,(1),(2)),\"@\")));\nvar reader_cond_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.subs.cljs$core$IFn$_invoke$arity$3(zstr,(0),(1)),\"?\");\nvar namespaced_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.subs.cljs$core$IFn$_invoke$arity$3(zstr,(0),(1)),\":\");\nvar at_QMARK_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((function (){var G__51991 = (zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsecond.call(null,zloc));\nreturn (zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(G__51991) : zprint.zfns.ztag.call(null,G__51991));\n})(),new cljs.core.Keyword(null,\"deref\",\"deref\",-145586795))) || (alt_at_QMARK_));\nvar l_str = ((((reader_cond_QMARK_) && (at_QMARK_)))?\"#?@\":(cljs.core.truth_(((reader_cond_QMARK_)?(function (){var G__51993 = (zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsecond.call(null,zloc));\nreturn (zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1(G__51993) : zprint.zfns.zcoll_QMARK_.call(null,G__51993));\n})():false))?\"#?\":((reader_cond_QMARK_)?(function(){throw (new Error([\"Unknown reader macro: '\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))),\"' zfirst zloc: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var G__51995 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst.call(null,zloc));\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__51995) : zprint.zfns.zstring.call(null,G__51995));\n})())].join('')))})():((namespaced_QMARK_)?[\"#\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zstr)].join(''):\"#\"\n))));\nvar r_str = \"\";\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg-bug?\",\"dbg-bug?\",-315779526).cljs$core$IFn$_invoke$arity$1(options))?null:null);\nvar indent = ((l_str).length);\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options,(indent + ind),zloc,r_str);\nvar floc = ((((at_QMARK_) && ((!(alt_at_QMARK_)))))?(function (){var G__51996 = (zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsecond.call(null,zloc));\nreturn (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(G__51996) : zprint.zfns.zfirst.call(null,G__51996));\n})():(zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsecond.call(null,zloc)));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-reader-macro: zloc:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)),\"floc:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(floc) : zprint.zfns.zstring.call(null,floc)),\"l-str:\",l_str], 0))], 0));\n} else {\n}\n\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null),((reader_cond_QMARK_)?zprint.zprint.fzprint_map_STAR_(new cljs.core.Keyword(null,\"reader-cond\",\"reader-cond\",-2133265058),\"(\",\")\",zprint.zprint.rightmost(options),(indent + ind),floc,null):zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$3(options,(indent + ind),(function (){var zloc_seq = (zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap.call(null,cljs.core.identity,zloc));\nif(namespaced_QMARK_){\nreturn cljs.core.next(zloc_seq);\n} else {\nreturn zloc_seq;\n}\n})())),r_str_vec], 0));\n});\n/**\n * Given an element which contains newlines, split it up into individual\n *   newline elements.\n */\nzprint.zprint.fzprint_newline = (function zprint$zprint$fzprint_newline(options,ind,zloc){\nvar zstr = (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc));\nvar vec__51997 = zprint.finish.newline_vec(zstr);\nvar newline_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51997,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51997,(1),null);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-newline: zloc:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)),\"newline-count:\",newline_count,\"ind:\",ind], 0))], 0));\n} else {\n}\n\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(newline_count,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(ind))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null)));\n});\nzprint.zprint.prefix_tags = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245),\"'\",new cljs.core.Keyword(null,\"syntax-quote\",\"syntax-quote\",-1233164847),\"`\",new cljs.core.Keyword(null,\"unquote\",\"unquote\",1649741032),\"~\",new cljs.core.Keyword(null,\"unquote-splicing\",\"unquote-splicing\",1295267556),\"~@\",new cljs.core.Keyword(null,\"deref\",\"deref\",-145586795),\"@\",new cljs.core.Keyword(null,\"var\",\"var\",-769682797),\"#'\",new cljs.core.Keyword(null,\"uneval\",\"uneval\",1932037707),\"#_\"], null);\n/**\n * Change options as necessary based on prefix tag.\n */\nzprint.zprint.prefix_options = (function zprint$zprint$prefix_options(options,prefix_tag){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prefix_tag,new cljs.core.Keyword(null,\"uneval\",\"uneval\",1932037707))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684),new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"uneval\",\"uneval\",1932037707).cljs$core$IFn$_invoke$arity$1(options)));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prefix_tag,new cljs.core.Keyword(null,\"syntax-quote\",\"syntax-quote\",-1233164847))){\nreturn cljs.core.assoc_in(cljs.core.assoc_in(options,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684),new cljs.core.Keyword(null,\"paren\",\"paren\",-294107600)], null),new cljs.core.Keyword(null,\"syntax-quote-paren\",\"syntax-quote-paren\",646342677).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684).cljs$core$IFn$_invoke$arity$1(options))),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684),new cljs.core.Keyword(null,\"hash-paren\",\"hash-paren\",-1158425562)], null),new cljs.core.Keyword(null,\"syntax-quote-paren\",\"syntax-quote-paren\",646342677).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684).cljs$core$IFn$_invoke$arity$1(options)));\n} else {\nreturn options;\n\n}\n}\n});\n/**\n * Sometime we need to give a caller to a routine, and there isn't\n *   a specific caller in the configuration.  So, we will use the configuration\n *   from some other caller and make up a new one just for this situation.\n *   The key-seq is the series of keys to both look up and create.  The\n *   caller is the new caller, and the existing-caller is the one from which\n *   we we will extract the information. This returns a new options map with\n *   the new-caller in it.\n */\nzprint.zprint.make_caller = (function zprint$zprint$make_caller(options,new_caller,existing_caller,key_seq){\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(options,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_caller], null),key_seq),(function (p1__52000_SHARP_){\n\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(options,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [existing_caller], null),key_seq));\n}));\n});\n/**\n * The pretty print part of fzprint.\n */\nzprint.zprint.fzprint_STAR_ = (function zprint$zprint$fzprint_STAR_(p__52001,indent,zloc){\nvar map__52002 = p__52001;\nvar map__52002__$1 = (((((!((map__52002 == null))))?(((((map__52002.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52002.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52002):map__52002);\nvar options = map__52002__$1;\nvar max_depth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"max-depth\",\"max-depth\",127060793));\nvar fn_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"fn-map\",\"fn-map\",565481146));\nvar shift_seq = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"shift-seq\",\"shift-seq\",267527195));\nvar max_hang_count = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"max-hang-count\",\"max-hang-count\",637294812));\nvar in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"in-code?\",\"in-code?\",194866464));\nvar max_hang_depth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"max-hang-depth\",\"max-hang-depth\",-915232220));\nvar next_inner = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"next-inner\",\"next-inner\",608504966));\nvar in_hang_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"in-hang?\",\"in-hang?\",-1065695639));\nvar rightcnt = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070));\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar hex_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"hex?\",\"hex?\",890937870));\nvar dbg_print_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"dbg-print?\",\"dbg-print?\",-660113872));\nvar dbg_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771));\nvar string_color = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"string-color\",\"string-color\",-1853875244));\nvar trim_comments_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"trim-comments?\",\"trim-comments?\",-1532658667));\nvar max_hang_span = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"max-hang-span\",\"max-hang-span\",256100693));\nvar one_line_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111));\nvar depth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640));\nvar string_str_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"string-str?\",\"string-str?\",2059147352));\nvar avail = (width - indent);\nvar options__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640),(depth + (1)));\nvar options__$2 = (cljs.core.truth_(next_inner)?cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.first(zprint.config.config_and_validate(\"next-inner:\",null,options__$1,next_inner)),new cljs.core.Keyword(null,\"next-inner\",\"next-inner\",608504966)):options__$1);\nvar options__$3 = (cljs.core.truth_((function (){var or__4126__auto__ = dbg_QMARK_;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn dbg_print_QMARK_;\n}\n})())?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options__$2,new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$3(options__$2,new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778),\"\")),(cljs.core.truth_(one_line_QMARK_)?\"o\":(cljs.core.truth_(in_hang_QMARK_)?\"h\":\".\"\n))].join('')):options__$2);\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$3))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$3),\"fzprint* **** rightcnt:\",rightcnt,\"depth:\",depth,cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))], 0))], 0)):null);\nvar dbg_data = cljs.core.deref(zprint.zprint.fzprint_dbg);\nvar dbg_focus_QMARK_ = (function (){var and__4115__auto__ = dbg_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(dbg_data,cljs.core.second((zprint.zfns.zfind_path.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfind_path.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfind_path.call(null,zloc))));\n} else {\nreturn and__4115__auto__;\n}\n})();\nvar options__$4 = (cljs.core.truth_(dbg_focus_QMARK_)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options__$3,new cljs.core.Keyword(null,\"dbg\",\"dbg\",202767554),new cljs.core.Keyword(null,\"on\",\"on\",173873944)):options__$3);\nvar ___$1 = (cljs.core.truth_(dbg_focus_QMARK_)?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint dbg-data:\",dbg_data], 0)):null);\nif(cljs.core.truth_((function (){var and__4115__auto__ = (zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcoll_QMARK_.call(null,zloc));\nif(cljs.core.truth_(and__4115__auto__)){\nreturn (((depth >= max_depth)) || ((zprint.zprint.get_max_length(options__$4) === (0))));\n} else {\nreturn and__4115__auto__;\n}\n})())){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(zloc,(zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0 ? zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0() : zprint.zfns.zdotdotdot.call(null)))){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"...\",zprint.zprint.zcolor_map(options__$4,new cljs.core.Keyword(null,\"none\",\"none\",1333468478)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"max-depth-string\",\"max-depth-string\",-474325435).cljs$core$IFn$_invoke$arity$1(options__$4),zprint.zprint.zcolor_map(options__$4,new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n}\n} else {\nif(cljs.core.truth_((function (){var and__4115__auto__ = in_hang_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn ((cljs.core.not(in_code_QMARK_)) && (((((depth - in_hang_QMARK_) > max_hang_span)) || (((cljs.core.not(one_line_QMARK_)) && (((zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcount.call(null,zloc)) > max_hang_count)) && ((depth > max_hang_depth)))))));\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn null;\n} else {\nif(cljs.core.truth_((zprint.zfns.zrecord_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zrecord_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zrecord_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_record(options__$4,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zlist_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_list(options__$4,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zvector_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_vec(options__$4,indent,zloc);\n} else {\nif(cljs.core.truth_((function (){var or__4126__auto__ = (zprint.zfns.zmap_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zmap_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zmap_QMARK_.call(null,zloc));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (zprint.zfns.znamespacedmap_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.znamespacedmap_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.znamespacedmap_QMARK_.call(null,zloc));\n}\n})())){\nreturn zprint.zprint.fzprint_map(options__$4,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zset_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zset_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zset_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_set(options__$4,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zanonfn_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zanonfn_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zanonfn_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_anon_fn(options__$4,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zfn_obj_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfn_obj_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfn_obj_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_fn_obj(options__$4,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zarray_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zarray_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zarray_QMARK_.call(null,zloc)))){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"object?\",\"object?\",-1313059217).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"array\",\"array\",-2080713842).cljs$core$IFn$_invoke$arity$1(options__$4)))){\nreturn zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$3(options__$4,indent,zloc);\n} else {\nreturn zprint.zprint.fzprint_array(options__$4,indent,(zprint.zfns.zexpandarray.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zexpandarray.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zexpandarray.call(null,zloc)));\n}\n} else {\nif(cljs.core.truth_((zprint.zfns.zatom_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zatom_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zatom_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_atom(options__$4,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zmeta_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zmeta_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zmeta_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_meta(options__$4,indent,zloc);\n} else {\nif(cljs.core.truth_((function (){var G__52004 = (zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.ztag.call(null,zloc));\nreturn (zprint.zprint.prefix_tags.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.prefix_tags.cljs$core$IFn$_invoke$arity$1(G__52004) : zprint.zprint.prefix_tags.call(null,G__52004));\n})())){\nreturn zprint.zprint.fzprint_vec_STAR_(new cljs.core.Keyword(null,\"prefix-tags\",\"prefix-tags\",-348485792),(function (){var G__52005 = (zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.ztag.call(null,zloc));\nreturn (zprint.zprint.prefix_tags.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.prefix_tags.cljs$core$IFn$_invoke$arity$1(G__52005) : zprint.zprint.prefix_tags.call(null,G__52005));\n})(),\"\",zprint.zprint.make_caller(zprint.zprint.prefix_options(options__$4,(zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.ztag.call(null,zloc))),new cljs.core.Keyword(null,\"prefix-tags\",\"prefix-tags\",-348485792),new cljs.core.Keyword(null,\"list\",\"list\",765357683),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"indent-only?\",\"indent-only?\",375678842)], null)),indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zns_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zns_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zns_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_ns(options__$4,indent,zloc);\n} else {\nif(cljs.core.truth_((function (){var or__4126__auto__ = (zprint.zfns.zpromise_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zpromise_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zpromise_QMARK_.call(null,zloc));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = (zprint.zfns.zfuture_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfuture_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfuture_QMARK_.call(null,zloc));\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nvar or__4126__auto____$2 = (zprint.zfns.zdelay_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zdelay_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zdelay_QMARK_.call(null,zloc));\nif(cljs.core.truth_(or__4126__auto____$2)){\nreturn or__4126__auto____$2;\n} else {\nreturn (zprint.zfns.zagent_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zagent_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zagent_QMARK_.call(null,zloc));\n}\n}\n}\n})())){\nreturn zprint.zprint.fzprint_future_promise_delay_agent(options__$4,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zreader_macro_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zreader_macro_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zreader_macro_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_reader_macro(options__$4,indent,zloc);\n} else {\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.ztag.call(null,zloc)),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))) && ((depth > (0))))){\nreturn zprint.zprint.fzprint_newline(options__$4,indent,zloc);\n} else {\nvar zstr = (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc));\nvar overflow_in_hang_QMARK_ = (function (){var and__4115__auto__ = in_hang_QMARK_;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn (((cljs.core.count(zstr) + indent) + (function (){var or__4126__auto__ = rightcnt;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (0);\n}\n})()) > width);\n} else {\nreturn and__4115__auto__;\n}\n})();\nif(cljs.core.truth_((function (){var and__4115__auto__ = (zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcomment_QMARK_.call(null,zloc));\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core.not(cljs.core.some(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [\";\",null], null), null),zstr));\n} else {\nreturn and__4115__auto__;\n}\n})())){\nreturn zprint.zprint.fzprint_newline(options__$4,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcomment_QMARK_.call(null,zloc)))){\nvar zcomment = (((((depth === (0))) && (cljs.core.not(trim_comments_QMARK_))))?zstr:clojure.string.replace_first(zstr,\"\\n\",\"\"));\nvar inline_comment_vec = (cljs.core.truth_(new cljs.core.Keyword(null,\"inline?\",\"inline?\",-1674483791).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"comment\",\"comment\",532206069).cljs$core$IFn$_invoke$arity$1(options__$4)))?(zprint.zprint.inlinecomment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.inlinecomment_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zprint.inlinecomment_QMARK_.call(null,zloc)):null);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$4))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$4),\"fzprint* trim-comments?:\",trim_comments_QMARK_,\"inline-comment-vec:\",inline_comment_vec], 0));\n} else {\n}\n\nif(cljs.core.truth_((function (){var and__4115__auto__ = new cljs.core.Keyword(null,\"count?\",\"count?\",-122202128).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"comment\",\"comment\",532206069).cljs$core$IFn$_invoke$arity$1(options__$4));\nif(cljs.core.truth_(and__4115__auto__)){\nreturn overflow_in_hang_QMARK_;\n} else {\nreturn and__4115__auto__;\n}\n})())){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$4))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$4),\"fzprint*: overflow comment ========\"], 0));\n} else {\n}\n\nreturn null;\n} else {\nif(cljs.core.truth_(inline_comment_vec)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [zcomment,zprint.zprint.zcolor_map(options__$4,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069)),new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405),cljs.core.first(inline_comment_vec),cljs.core.second(inline_comment_vec)], null)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zcomment,zprint.zprint.zcolor_map(options__$4,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069)),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069)], null)], null);\n}\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.ztag.call(null,zloc)),new cljs.core.Keyword(null,\"comma\",\"comma\",1699024745))){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zstr,new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"comma\",\"comma\",1699024745)], null)], null);\n} else {\nif(cljs.core.truth_((zprint.zfns.zwhitespaceorcomment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zwhitespaceorcomment_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zwhitespaceorcomment_QMARK_.call(null,zloc)))){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zstr,new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null);\n} else {\nif(cljs.core.truth_(overflow_in_hang_QMARK_)){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$4))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$4),\"fzprint*: overflow <<<<<<<<<<\"], 0));\n} else {\n}\n\nreturn null;\n} else {\nif(cljs.core.truth_((zprint.zfns.zkeyword_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zkeyword_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zkeyword_QMARK_.call(null,zloc)))){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zstr,zprint.zprint.zcolor_map(options__$4,new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n} else {\nif(typeof (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsexpr.call(null,zloc)) === 'string'){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_(string_str_QMARK_)?cljs.core.str.cljs$core$IFn$_invoke$arity$1((zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsexpr.call(null,zloc))):(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))),(cljs.core.truth_(string_color)?string_color:zprint.zprint.zcolor_map(options__$4,new cljs.core.Keyword(null,\"string\",\"string\",-1989541586))),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n} else {\nif(cljs.core.truth_(zprint.zprint.showfn_QMARK_(fn_map,(zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsexpr.call(null,zloc))))){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zstr,zprint.zprint.zcolor_map(options__$4,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n} else {\nif(cljs.core.truth_(zprint.zprint.show_user_fn_QMARK_(options__$4,(zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsexpr.call(null,zloc))))){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zstr,zprint.zprint.zcolor_map(options__$4,new cljs.core.Keyword(null,\"user-fn\",\"user-fn\",223976490)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n} else {\nif(typeof (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsexpr.call(null,zloc)) === 'number'){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_(hex_QMARK_)?(zprint.zfns.znumstr.cljs$core$IFn$_invoke$arity$3 ? zprint.zfns.znumstr.cljs$core$IFn$_invoke$arity$3(zloc,hex_QMARK_,shift_seq) : zprint.zfns.znumstr.call(null,zloc,hex_QMARK_,shift_seq)):zstr),zprint.zprint.zcolor_map(options__$4,new cljs.core.Keyword(null,\"number\",\"number\",1570378438)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n} else {\nif(((zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsexpr.call(null,zloc)) == null)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zstr,zprint.zprint.zcolor_map(options__$4,new cljs.core.Keyword(null,\"nil\",\"nil\",99600501)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zstr,zprint.zprint.zcolor_map(options__$4,new cljs.core.Keyword(null,\"none\",\"none\",1333468478)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n});\n/**\n * If this is an inline comment, returns a vector with the amount\n *   of space that was between this and the previous element and the\n *   starting column of this inline comment.  That means that if we\n *   go left, we get something other than whitespace before a newline.\n *   If we get only whitespace before a newline, then this is considered\n *   an inline comment if the comment at the end of the previous line\n *   was an inline comment and we were aligned with that comment.\n *   Assumes zloc is a comment.\n */\nzprint.zprint.inlinecomment_QMARK_ = (function zprint$zprint$inlinecomment_QMARK_(zloc){\nvar nloc = (zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.left_STAR_.call(null,zloc));\nvar spaces = (0);\nwhile(true){\nvar tnloc = (zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zfns.ztag.call(null,nloc));\nif((tnloc == null)){\nreturn null;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tnloc,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))){\nreturn null;\n} else {\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tnloc,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tnloc,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405))))){\nif(cljs.core.truth_((zprint.zprint.inlinecomment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.inlinecomment_QMARK_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zprint.inlinecomment_QMARK_.call(null,nloc)))){\nvar nloc_length_before = zprint.zprint.length_before(nloc);\nvar zloc_length_before = zprint.zprint.length_before(zloc);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(nloc_length_before,zloc_length_before)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [spaces,zloc_length_before], null);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tnloc,new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [spaces,zprint.zprint.length_before(zloc)], null);\n} else {\nvar G__52439 = (zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.left_STAR_.call(null,nloc));\nvar G__52440 = ((zprint.zutil.length.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.length.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.length.call(null,nloc)) + spaces);\nnloc = G__52439;\nspaces = G__52440;\ncontinue;\n\n}\n}\n}\n}\nbreak;\n}\n});\n/**\n * Take a string and an index, and look for the last space prior to the\n *   index. If we wanted to tie ourselves to 1.8, we could use \n *   clojure.string/last-index-of, but we don't.  However, we use similar\n *   conventions, i.e., if no space is found, return nil, and if the index\n *   is a space return that value, and accept any from-index, including one\n *   larger than the length of the string.\n */\nzprint.zprint.last_space = (function zprint$zprint$last_space(s,from_index){\nvar from_index__$1 = (function (){var x__4217__auto__ = (cljs.core.count(s) - (1));\nvar y__4218__auto__ = from_index;\nreturn ((x__4217__auto__ < y__4218__auto__) ? x__4217__auto__ : y__4218__auto__);\n})();\nvar rev_seq = cljs.core.reverse(cljs.core.take.cljs$core$IFn$_invoke$arity$2((from_index__$1 + (1)),s));\nvar seq_after_space = cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__52006_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(p1__52006_SHARP_,\" \");\n}),rev_seq);\nvar space_index = (from_index__$1 - cljs.core.count(seq_after_space));\nif((space_index < (0))){\nreturn null;\n} else {\nreturn space_index;\n}\n});\n/**\n * Take a string and an index, and look for the next space *after* the\n *   index. If no space is found, return nil. Accept any from-index, \n *   including one larger than the length of the string.\n */\nzprint.zprint.next_space = (function zprint$zprint$next_space(s,from_index){\nvar from_index__$1 = (from_index + (1));\nif((from_index__$1 < cljs.core.count(s))){\nvar seq_after_space = cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__52007_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(p1__52007_SHARP_,\" \");\n}),cljs.core.drop.cljs$core$IFn$_invoke$arity$2(from_index__$1,cljs.core.seq(s)));\nvar space_index = (from_index__$1 + cljs.core.count(seq_after_space));\nif((space_index >= cljs.core.count(s))){\nreturn null;\n} else {\nreturn space_index;\n}\n} else {\nreturn null;\n}\n});\n/**\n * If this is a comment, and it is too long, word wrap it to the right width.\n *   Note that top level comments may well end with a newline, so remove it\n *   and reapply it at the end if that is the case.\n */\nzprint.zprint.wrap_comment = (function zprint$zprint$wrap_comment(width,p__52008,start){\nvar vec__52009 = p__52008;\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52009,(0),null);\nvar color = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52009,(1),null);\nvar stype = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52009,(2),null);\nvar element = vec__52009;\nif((!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(stype,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(stype,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405))))))){\nreturn element;\n} else {\nvar comment_width = (width - start);\nvar semi_str = cljs.core.re_find(/;*/,s);\nvar rest_str = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s,cljs.core.count(semi_str));\nvar space_str = cljs.core.re_find(/ */,rest_str);\nvar rest_str__$1 = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(rest_str,cljs.core.count(space_str));\nvar newline_QMARK_ = cljs.core.re_find(/\\n$/,s);\nvar comment_width__$1 = ((comment_width - cljs.core.count(semi_str)) - cljs.core.count(space_str));\nvar comment_str = rest_str__$1;\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(cljs.core.empty_QMARK_(comment_str)){\nif((cljs.core.count(out) === (0))){\nif(cljs.core.truth_(newline_QMARK_)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [semi_str,color,stype], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\\n\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [semi_str,color,stype], null)], null);\n}\n} else {\nreturn cljs.core.persistent_BANG_((cljs.core.truth_(newline_QMARK_)?cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\\n\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)):out));\n}\n} else {\nvar last_space_index = (((((comment_str).length) <= comment_width__$1))?(((comment_str).length) - (1)):(((comment_width__$1 <= (0)))?(function (){var or__4126__auto__ = zprint.zprint.next_space(comment_str,(0));\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (((comment_str).length) - (1));\n}\n})():(function (){var or__4126__auto__ = zprint.zprint.last_space(comment_str,comment_width__$1);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar or__4126__auto____$1 = zprint.zprint.next_space(comment_str,comment_width__$1);\nif(cljs.core.truth_(or__4126__auto____$1)){\nreturn or__4126__auto____$1;\n} else {\nreturn (((comment_str).length) - (1));\n}\n}\n})()));\nvar next_comment = clojure.string.trimr(cljs.core.subs.cljs$core$IFn$_invoke$arity$3(comment_str,(0),(last_space_index + (1))));\nvar G__52446 = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(comment_str,(last_space_index + (1)));\nvar G__52447 = (((cljs.core.count(out) === (0)))?cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(semi_str),cljs.core.str.cljs$core$IFn$_invoke$arity$1(space_str),next_comment].join(''),color,stype], null)):cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(start))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(semi_str),cljs.core.str.cljs$core$IFn$_invoke$arity$1(space_str),next_comment].join(''),color,new cljs.core.Keyword(null,\"comment-wrap\",\"comment-wrap\",720664128)], null)));\ncomment_str = G__52446;\nout = G__52447;\ncontinue;\n}\nbreak;\n}\n}\n});\n/**\n * Takes the start of this vector and the vector itself.\n */\nzprint.zprint.loc_vec = (function zprint$zprint$loc_vec(start,p__52012){\nvar vec__52013 = p__52012;\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52013,(0),null);\nvar split = zprint.zprint.split_lf(s);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(split),(1))){\nreturn (start + cljs.core.count(s));\n} else {\nreturn cljs.core.count(cljs.core.last(split));\n}\n});\n/**\n * Take a style-vec and produce a style-loc-vec with the starting column\n *   of each element in the style-vec.\n */\nzprint.zprint.style_loc_vec = (function zprint$zprint$style_loc_vec(style_vec){\nreturn cljs.core.butlast(cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(zprint.zprint.loc_vec,(0),style_vec));\n});\n/**\n * Take a transient output vector and a vector and lift any style-vec elements\n *   out of the input vector.\n */\nzprint.zprint.lift_vec = (function zprint$zprint$lift_vec(out_vec,element){\nif(typeof cljs.core.first(element) === 'string'){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out_vec,element);\n} else {\nvar element_vec = element;\nvar out = out_vec;\nwhile(true){\nif(cljs.core.not(element_vec)){\nreturn out;\n} else {\nvar G__52451 = cljs.core.next(element_vec);\nvar G__52452 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,cljs.core.first(element_vec));\nelement_vec = G__52451;\nout = G__52452;\ncontinue;\n}\nbreak;\n}\n}\n});\n/**\n * Take a style-vec [[s color type] [s color type] [[s color type]\n *   [s color type]] [s color type] ...] and lift out the inner vectors.\n */\nzprint.zprint.lift_style_vec = (function zprint$zprint$lift_style_vec(style_vec){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(zprint.zprint.lift_vec,cljs.core.PersistentVector.EMPTY,style_vec);\n});\n/**\n * Take the final output style-vec, and wrap any comments which run over\n *   the width. Looking for \n */\nzprint.zprint.fzprint_wrap_comments = (function zprint$zprint$fzprint_wrap_comments(p__52016,style_vec){\nvar map__52017 = p__52016;\nvar map__52017__$1 = (((((!((map__52017 == null))))?(((((map__52017.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52017.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52017):map__52017);\nvar options = map__52017__$1;\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52017__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar start_col = zprint.zprint.style_loc_vec(style_vec);\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-wrap-comments: style-vec:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([style_vec], 0))], 0)):null);\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-wrap-comments: start-col:\",start_col], 0)):null);\nvar wrap_style_vec = cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(zprint.zprint.wrap_comment,width),style_vec,start_col);\nvar ___$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-wrap-comments: wrap:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([style_vec], 0))], 0)):null);\nvar out_style_vec = zprint.zprint.lift_style_vec(wrap_style_vec);\nreturn out_style_vec;\n});\n/**\n * Find a the first element of this type working from the end of a \n *   style-vec.  Return the index of the element.\n */\nzprint.zprint.find_element_from_end = (function zprint$zprint$find_element_from_end(element_type,style_vec){\nvar index = (cljs.core.count(style_vec) - (1));\nwhile(true){\nif((index < (0))){\nreturn null;\n} else {\nvar vec__52019 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(style_vec,index);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52019,(0),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52019,(1),null);\nvar e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52019,(2),null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(e,element_type)){\nreturn index;\n} else {\nvar G__52457 = (index - (1));\nindex = G__52457;\ncontinue;\n}\n}\nbreak;\n}\n});\n/**\n * Given a style-vec, how big is it in actual characters.  This doesn't\n *   handle newlines.\n */\nzprint.zprint.line_size = (function zprint$zprint$line_size(style_vec){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(zprint.zprint.loc_vec,(0)),style_vec));\n});\n/**\n * Given a style-vec, whose last element in a comment, find the amount\n *   of space before that comment on the line.\n */\nzprint.zprint.space_before_comment = (function zprint$zprint$space_before_comment(style_vec){\nvar indent_index = zprint.zprint.find_element_from_end(new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125),style_vec);\nvar this_line_vec = (cljs.core.truth_(indent_index)?cljs.core.nthnext(style_vec,indent_index):style_vec);\nreturn zprint.zprint.line_size(cljs.core.butlast(this_line_vec));\n});\n/**\n * Try to bring inline comments back onto the line on which they belong.\n */\nzprint.zprint.fzprint_inline_comments = (function zprint$zprint$fzprint_inline_comments(p__52022,style_vec){\nvar map__52023 = p__52022;\nvar map__52023__$1 = (((((!((map__52023 == null))))?(((((map__52023.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52023.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52023):map__52023);\nvar options = map__52023__$1;\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52023__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-inline-comments:\",style_vec], 0))], 0));\n} else {\n}\n\nvar cvec = style_vec;\nvar last_out = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",null,null], null);\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.not(cvec)){\nreturn out;\n} else {\nvar vec__52034 = cljs.core.first(cvec);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52034,(0),null);\nvar c = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52034,(1),null);\nvar e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52034,(2),null);\nvar element = vec__52034;\nvar vec__52037 = cljs.core.second(cvec);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52037,(0),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52037,(1),null);\nvar ne = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52037,(2),null);\nvar nn = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52037,(3),null);\nvar next_element = vec__52037;\nvar vec__52040 = last_out;\nvar ___$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52040,(0),null);\nvar ___$3 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52040,(1),null);\nvar le = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52040,(2),null);\nvar new_element = ((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(e,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ne,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405)))))?(((!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(le,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(le,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405)))))))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zprint.zprint.blanks(nn),c,new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(zprint.zprint.space_before_comment(out)))].join(''),c,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)):element\n);\nvar G__52459 = cljs.core.next(cvec);\nvar G__52460 = new_element;\nvar G__52461 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,new_element);\ncvec = G__52459;\nlast_out = G__52460;\nout = G__52461;\ncontinue;\n}\nbreak;\n}\n});\nzprint.zprint.max_aligned_inline_comment_distance = (5);\n/**\n * Given a style-vec, find previously aligned inline comments and\n *   output the as a sequence of vectors of comments. The previously\n *   aligned comments do not have to be consecutive, but they can't\n *   be separated by more than max-aligned-inline-comment-distance.\n *   Each comment itself is a vector: [indent-index inline-comment-index],\n *   yielding a [[[indent-index inline-comment-index] [indent-index\n *   inline-comment-index] ...] ...].  The indexes are into the\n *   style-vec.\n */\nzprint.zprint.find_aligned_inline_comments = (function zprint$zprint$find_aligned_inline_comments(style_vec){\nvar cvec = style_vec;\nvar index = (0);\nvar last_indent = (0);\nvar current_seq = cljs.core.PersistentVector.EMPTY;\nvar current_column = (0);\nvar distance = (0);\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.not(cvec)){\nvar out__$1 = (((cljs.core.count(current_seq) > (1)))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,current_seq):out);\nreturn out__$1;\n} else {\nvar vec__52046 = cljs.core.first(cvec);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52046,(0),null);\nvar c = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52046,(1),null);\nvar e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52046,(2),null);\nvar spaces = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52046,(3),null);\nvar start_column = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52046,(4),null);\nvar element = vec__52046;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(e,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405))){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(start_column,current_column)){\nvar G__52468 = cljs.core.next(cvec);\nvar G__52469 = (index + (1));\nvar G__52470 = null;\nvar G__52471 = (cljs.core.truth_(last_indent)?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(current_seq,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [last_indent,index], null)):(function (){\nthrow (new Error([\"concat-no-nil:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(index)].join('')));\n\nreturn cljs.core.PersistentVector.EMPTY;\n})()\n);\nvar G__52472 = current_column;\nvar G__52473 = (0);\nvar G__52474 = out;\ncvec = G__52468;\nindex = G__52469;\nlast_indent = G__52470;\ncurrent_seq = G__52471;\ncurrent_column = G__52472;\ndistance = G__52473;\nout = G__52474;\ncontinue;\n} else {\nvar G__52475 = cljs.core.next(cvec);\nvar G__52476 = (index + (1));\nvar G__52477 = null;\nvar G__52478 = (cljs.core.truth_(last_indent)?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [last_indent,index], null)], null):(function (){\nthrow (new Error([\"concat-no-nil:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(index)].join('')));\n\nreturn cljs.core.PersistentVector.EMPTY;\n})()\n);\nvar G__52479 = start_column;\nvar G__52480 = (0);\nvar G__52481 = (((cljs.core.count(current_seq) > (1)))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,current_seq):out);\ncvec = G__52475;\nindex = G__52476;\nlast_indent = G__52477;\ncurrent_seq = G__52478;\ncurrent_column = G__52479;\ndistance = G__52480;\nout = G__52481;\ncontinue;\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(e,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125))){\nif((distance >= zprint.zprint.max_aligned_inline_comment_distance)){\nvar G__52482 = cljs.core.next(cvec);\nvar G__52483 = (index + (1));\nvar G__52484 = index;\nvar G__52485 = cljs.core.PersistentVector.EMPTY;\nvar G__52486 = (0);\nvar G__52487 = (0);\nvar G__52488 = (((cljs.core.count(current_seq) > (1)))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,current_seq):out);\ncvec = G__52482;\nindex = G__52483;\nlast_indent = G__52484;\ncurrent_seq = G__52485;\ncurrent_column = G__52486;\ndistance = G__52487;\nout = G__52488;\ncontinue;\n} else {\nvar G__52489 = cljs.core.next(cvec);\nvar G__52490 = (index + (1));\nvar G__52491 = index;\nvar G__52492 = current_seq;\nvar G__52493 = current_column;\nvar G__52494 = (distance + (1));\nvar G__52495 = out;\ncvec = G__52489;\nindex = G__52490;\nlast_indent = G__52491;\ncurrent_seq = G__52492;\ncurrent_column = G__52493;\ndistance = G__52494;\nout = G__52495;\ncontinue;\n}\n} else {\nvar G__52496 = cljs.core.next(cvec);\nvar G__52497 = (index + (1));\nvar G__52498 = last_indent;\nvar G__52499 = current_seq;\nvar G__52500 = current_column;\nvar G__52501 = distance;\nvar G__52502 = out;\ncvec = G__52496;\nindex = G__52497;\nlast_indent = G__52498;\ncurrent_seq = G__52499;\ncurrent_column = G__52500;\ndistance = G__52501;\nout = G__52502;\ncontinue;\n\n}\n}\n}\nbreak;\n}\n});\n/**\n * Given a style-vec, find consecutive inline comments and output\n *   the as a sequence of vectors of comments.  Each comment itself\n *   is a vector: [indent-index inline-comment-index], yielding a\n *   [[[indent-index inline-comment-index] [indent-index inline-comment-index]\n *   ...] ...]\n */\nzprint.zprint.find_consecutive_inline_comments = (function zprint$zprint$find_consecutive_inline_comments(style_vec){\nvar cvec = style_vec;\nvar index = (0);\nvar last_indent = (0);\nvar current_seq = cljs.core.PersistentVector.EMPTY;\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.not(cvec)){\nreturn out;\n} else {\nvar vec__52052 = cljs.core.first(cvec);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52052,(0),null);\nvar c = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52052,(1),null);\nvar e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52052,(2),null);\nvar element = vec__52052;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(e,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405))){\nvar G__52503 = cljs.core.next(cvec);\nvar G__52504 = (index + (1));\nvar G__52505 = null;\nvar G__52506 = (cljs.core.truth_(last_indent)?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(current_seq,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [last_indent,index], null)):(function (){\nthrow (new Error([\"concat-no-nil:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(index)].join('')));\n\nreturn cljs.core.PersistentVector.EMPTY;\n})()\n);\nvar G__52507 = out;\ncvec = G__52503;\nindex = G__52504;\nlast_indent = G__52505;\ncurrent_seq = G__52506;\nout = G__52507;\ncontinue;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(e,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125))){\nvar G__52508 = cljs.core.next(cvec);\nvar G__52509 = (index + (1));\nvar G__52510 = index;\nvar G__52511 = (cljs.core.truth_(last_indent)?cljs.core.PersistentVector.EMPTY:current_seq);\nvar G__52512 = (cljs.core.truth_(last_indent)?(((cljs.core.count(current_seq) > (1)))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,current_seq):out):out);\ncvec = G__52508;\nindex = G__52509;\nlast_indent = G__52510;\ncurrent_seq = G__52511;\nout = G__52512;\ncontinue;\n} else {\nvar G__52513 = cljs.core.next(cvec);\nvar G__52514 = (index + (1));\nvar G__52515 = last_indent;\nvar G__52516 = current_seq;\nvar G__52517 = out;\ncvec = G__52513;\nindex = G__52514;\nlast_indent = G__52515;\ncurrent_seq = G__52516;\nout = G__52517;\ncontinue;\n\n}\n}\n}\nbreak;\n}\n});\n/**\n * Takes a single vector of [indent-index comment-index] and will show the\n *   column on the line in which the comment starts.\n */\nzprint.zprint.comment_column = (function zprint$zprint$comment_column(p__52055,style_vec){\nvar vec__52056 = p__52055;\nvar indent_index = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52056,(0),null);\nvar comment_index = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52056,(1),null);\nif(cljs.core.vector_QMARK_(style_vec)){\n} else {\nthrow (new Error([\"comment-column: style-vec not a vector!! \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(style_vec)].join('')));\n}\n\nvar index = indent_index;\nvar column = (0);\nwhile(true){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(index,comment_index)){\nreturn column;\n} else {\nvar G__52518 = (index + (1));\nvar G__52519 = zprint.zprint.loc_vec(column,cljs.core.nth.cljs$core$IFn$_invoke$arity$2(style_vec,index));\nindex = G__52518;\ncolumn = G__52519;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Take a single inline comment vector:\n *   [indent-index inline-comment-index] \n *   and replace it with [inline-comment-index start-column spaces-before].\n */\nzprint.zprint.comment_vec_column = (function zprint$zprint$comment_vec_column(style_vec,p__52059){\nvar vec__52060 = p__52059;\nvar indent_index = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52060,(0),null);\nvar inline_comment_index = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52060,(1),null);\nvar comment_vec = vec__52060;\nvar start_column = zprint.zprint.comment_column(comment_vec,style_vec);\nvar spaces_before = zprint.zprint.loc_vec((0),cljs.core.nth.cljs$core$IFn$_invoke$arity$2(style_vec,(inline_comment_index - (1))));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [inline_comment_index,start_column,spaces_before], null);\n});\n/**\n * Take a single vector of inline comments\n *   [[indent-index inline-comment-index] [indent-index inline-comment-index]\n * ...] and replace it with [[inline-comment-index start-column spaces-before]\n * [inline-comment-index start-column spaces-before] ...]\n */\nzprint.zprint.comment_vec_seq_column = (function zprint$zprint$comment_vec_seq_column(style_vec,comment_vec_seq){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(zprint.zprint.comment_vec_column,style_vec),comment_vec_seq);\n});\n/**\n * Take a seq of all of the comments as produced by \n *   find-consecutive-inline-comments, and turn it into:\n *   [[[inline-comment-index start-column spaces-before] [inline-comment-index\n *   start-column spaces-before]\n *   ...] ...]\n */\nzprint.zprint.comment_vec_all_column = (function zprint$zprint$comment_vec_all_column(style_vec,comment_vec_all){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(zprint.zprint.comment_vec_seq_column,style_vec),comment_vec_all);\n});\n/**\n * Given a set of inline comments:\n *   [[inline-comment-index start-column spaces-before]\n * [inline-comment-index start-column spaces-before] ...], determine\n * the minimum column at which they could be aligned.\n */\nzprint.zprint.minimum_column = (function zprint$zprint$minimum_column(comment_vec){\nvar minimum_vec = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__52063_SHARP_){\nreturn ((cljs.core.second(p1__52063_SHARP_) - cljs.core.nth.cljs$core$IFn$_invoke$arity$2(p1__52063_SHARP_,(2))) + (1));\n}),comment_vec);\nvar minimum_col = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.max,minimum_vec);\nreturn minimum_col;\n});\n/**\n * Given a new start-column, and a vector \n *   [[inline-comment-index start-column spaces-before]\n *   and a style-vec, return a new style-vec with the inline-comment starting\n *   at a new column.\n */\nzprint.zprint.change_start_column = (function zprint$zprint$change_start_column(new_start_column,style_vec,p__52064){\nvar vec__52065 = p__52064;\nvar inline_comment_index = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52065,(0),null);\nvar start_column = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52065,(1),null);\nvar spaces_before = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52065,(2),null);\nvar comment_vec = vec__52065;\nvar delta_spaces = (new_start_column - start_column);\nvar new_spaces = (spaces_before + delta_spaces);\nvar previous_element_index = (inline_comment_index - (1));\nvar vec__52068 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(style_vec,previous_element_index);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52068,(0),null);\nvar c = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52068,(1),null);\nvar e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52068,(2),null);\nvar previous_element = vec__52068;\nvar new_previous_element = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(e,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(new_spaces))].join(''),c,e], null):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(e,new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(new_spaces)),c,e], null):(function(){throw (new Error([\"change-start-column: comment preceded by neither\",\" an :indent nor :whitespace!\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(e)].join('')))})()\n));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(style_vec,previous_element_index,new_previous_element);\n});\n/**\n * Given one set of inline comments: \n *   [[inline-comment-index start-column spaces-before]\n * [inline-comment-index start-column spaces-before] ...], align them \n * as best as possible, and return the modified style-vec.\n */\nzprint.zprint.align_comment_vec = (function zprint$zprint$align_comment_vec(style_vec,comment_vec){\nvar minimum_col = zprint.zprint.minimum_column(comment_vec);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(zprint.zprint.change_start_column,minimum_col),style_vec,comment_vec);\n});\n/**\n * Given the current style-vec, align all consecutive inline comments.\n */\nzprint.zprint.fzprint_align_inline_comments = (function zprint$zprint$fzprint_align_inline_comments(options,style_vec){\nvar style = new cljs.core.Keyword(null,\"inline-align-style\",\"inline-align-style\",1548722575).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"comment\",\"comment\",532206069).cljs$core$IFn$_invoke$arity$1(options));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(style,new cljs.core.Keyword(null,\"none\",\"none\",1333468478))){\nreturn style_vec;\n} else {\nvar comment_vec = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(style,new cljs.core.Keyword(null,\"aligned\",\"aligned\",-1015148916)))?zprint.zprint.find_aligned_inline_comments(style_vec):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(style,new cljs.core.Keyword(null,\"consecutive\",\"consecutive\",-1628234596)))?zprint.zprint.find_consecutive_inline_comments(style_vec):null));\nvar comment_vec_column = zprint.zprint.comment_vec_all_column(style_vec,comment_vec);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(zprint.zprint.align_comment_vec,style_vec,comment_vec_column);\n}\n});\n/**\n * The pretty print part of fzprint.\n */\nzprint.zprint.fzprint = (function zprint$zprint$fzprint(options,indent,zloc){\nvar zloc__$1 = ((cljs.core.not(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"ztype\",\"ztype\",-562179020).cljs$core$IFn$_invoke$arity$1(options),new cljs.core.Keyword(null,\"zipper\",\"zipper\",1500694438)))?new cljs.core.Keyword(null,\"value\",\"value\",305978217).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"spec\",\"spec\",347520401).cljs$core$IFn$_invoke$arity$1(options)):false)))?zloc:zprint.zutil.add_spec_to_docstring(zloc,new cljs.core.Keyword(null,\"value\",\"value\",305978217).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"spec\",\"spec\",347520401).cljs$core$IFn$_invoke$arity$1(options))));\nvar style_vec = zprint.zprint.fzprint_STAR_(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(options,new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640),(0),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"map-depth\",\"map-depth\",-191378641),(0)], 0)),indent,zloc__$1);\nreturn style_vec;\n});\n/**\n * Count lines in a string.\n */\nzprint.zprint.line_count = (function zprint$zprint$line_count(s){\nreturn (cljs.core.count(cljs.core.re_seq(/\\n/,s)) + (1));\n});\n/**\n * Return a vector the lengths of lines.\n */\nzprint.zprint.line_widths = (function zprint$zprint$line_widths(s){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.count,clojure.string.split.cljs$core$IFn$_invoke$arity$2(s,/\\n/));\n});\n/**\n * Split a string into lines, and figure the max width.\n */\nzprint.zprint.max_width = (function zprint$zprint$max_width(s){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.max,zprint.zprint.line_widths(s));\n});\n/**\n * Takes a string, and expands tabs inside of the string based\n *   on a tab-size argument.\n */\nzprint.zprint.expand_tabs = (function zprint$zprint$expand_tabs(var_args){\nvar G__52072 = arguments.length;\nswitch (G__52072) {\ncase 2:\nreturn zprint.zprint.expand_tabs.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn zprint.zprint.expand_tabs.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.expand_tabs.cljs$core$IFn$_invoke$arity$2 = (function (tab_size,s){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,(function (){var char_seq = cljs.core.seq(s);\nvar cur_len = cljs.core.long$((0));\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(cljs.core.empty_QMARK_(char_seq)){\nreturn cljs.core.persistent_BANG_(out);\n} else {\nvar this_char = cljs.core.first(char_seq);\nvar tab_expansion = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this_char,\"\\t\"))?(tab_size - cljs.core.mod(cur_len,tab_size)):null);\nvar G__52528 = cljs.core.rest(char_seq);\nvar G__52529 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this_char,\"\\n\"))?(0):(cur_len + cljs.core.long$((function (){var or__4126__auto__ = tab_expansion;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn (1);\n}\n})())));\nvar G__52530 = (cljs.core.truth_(tab_expansion)?cljs.core.apply.cljs$core$IFn$_invoke$arity$3(zprint.zprint.conj_it_BANG_,out,cljs.core.seq(zprint.zprint.blanks(tab_expansion))):cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,this_char));\nchar_seq = G__52528;\ncur_len = G__52529;\nout = G__52530;\ncontinue;\n}\nbreak;\n}\n})());\n}));\n\n(zprint.zprint.expand_tabs.cljs$core$IFn$_invoke$arity$1 = (function (s){\nreturn zprint.zprint.expand_tabs.cljs$core$IFn$_invoke$arity$2((8),s);\n}));\n\n(zprint.zprint.expand_tabs.cljs$lang$maxFixedArity = 2);\n\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nzprint.zprint.r = (function (left,right,__meta,__extmap,__hash){\nthis.left = left;\nthis.right = right;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\n(zprint.zprint.r.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4380__auto__,k__4381__auto__){\nvar self__ = this;\nvar this__4380__auto____$1 = this;\nreturn this__4380__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4381__auto__,null);\n}));\n\n(zprint.zprint.r.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4382__auto__,k52074,else__4383__auto__){\nvar self__ = this;\nvar this__4382__auto____$1 = this;\nvar G__52078 = k52074;\nvar G__52078__$1 = (((G__52078 instanceof cljs.core.Keyword))?G__52078.fqn:null);\nswitch (G__52078__$1) {\ncase \"left\":\nreturn self__.left;\n\nbreak;\ncase \"right\":\nreturn self__.right;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k52074,else__4383__auto__);\n\n}\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4399__auto__,f__4400__auto__,init__4401__auto__){\nvar self__ = this;\nvar this__4399__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__4402__auto__,p__52079){\nvar vec__52080 = p__52079;\nvar k__4403__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52080,(0),null);\nvar v__4404__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52080,(1),null);\nreturn (f__4400__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4400__auto__.cljs$core$IFn$_invoke$arity$3(ret__4402__auto__,k__4403__auto__,v__4404__auto__) : f__4400__auto__.call(null,ret__4402__auto__,k__4403__auto__,v__4404__auto__));\n}),init__4401__auto__,this__4399__auto____$1);\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4394__auto__,writer__4395__auto__,opts__4396__auto__){\nvar self__ = this;\nvar this__4394__auto____$1 = this;\nvar pr_pair__4397__auto__ = (function (keyval__4398__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4395__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4396__auto__,keyval__4398__auto__);\n});\nreturn cljs.core.pr_sequential_writer(writer__4395__auto__,pr_pair__4397__auto__,\"#zprint.zprint.r{\",\", \",\"}\",opts__4396__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"left\",\"left\",-399115937),self__.left],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"right\",\"right\",-452581833),self__.right],null))], null),self__.__extmap));\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__52073){\nvar self__ = this;\nvar G__52073__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__52073__$1,2,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"left\",\"left\",-399115937),new cljs.core.Keyword(null,\"right\",\"right\",-452581833)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4378__auto__){\nvar self__ = this;\nvar this__4378__auto____$1 = this;\nreturn self__.__meta;\n}));\n\n(zprint.zprint.r.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4375__auto__){\nvar self__ = this;\nvar this__4375__auto____$1 = this;\nreturn (new zprint.zprint.r(self__.left,self__.right,self__.__meta,self__.__extmap,self__.__hash));\n}));\n\n(zprint.zprint.r.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4384__auto__){\nvar self__ = this;\nvar this__4384__auto____$1 = this;\nreturn (2 + cljs.core.count(self__.__extmap));\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4376__auto__){\nvar self__ = this;\nvar this__4376__auto____$1 = this;\nvar h__4238__auto__ = self__.__hash;\nif((!((h__4238__auto__ == null)))){\nreturn h__4238__auto__;\n} else {\nvar h__4238__auto____$1 = (function (coll__4377__auto__){\nreturn (-1384233907 ^ cljs.core.hash_unordered_coll(coll__4377__auto__));\n})(this__4376__auto____$1);\n(self__.__hash = h__4238__auto____$1);\n\nreturn h__4238__auto____$1;\n}\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this52075,other52076){\nvar self__ = this;\nvar this52075__$1 = this;\nreturn (((!((other52076 == null)))) && ((this52075__$1.constructor === other52076.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this52075__$1.left,other52076.left)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this52075__$1.right,other52076.right)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this52075__$1.__extmap,other52076.__extmap)));\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4389__auto__,k__4390__auto__){\nvar self__ = this;\nvar this__4389__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"right\",\"right\",-452581833),null,new cljs.core.Keyword(null,\"left\",\"left\",-399115937),null], null), null),k__4390__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4389__auto____$1),self__.__meta),k__4390__auto__);\n} else {\nreturn (new zprint.zprint.r(self__.left,self__.right,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4390__auto__)),null));\n}\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4387__auto__,k__4388__auto__,G__52073){\nvar self__ = this;\nvar this__4387__auto____$1 = this;\nvar pred__52083 = cljs.core.keyword_identical_QMARK_;\nvar expr__52084 = k__4388__auto__;\nif(cljs.core.truth_((pred__52083.cljs$core$IFn$_invoke$arity$2 ? pred__52083.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"left\",\"left\",-399115937),expr__52084) : pred__52083.call(null,new cljs.core.Keyword(null,\"left\",\"left\",-399115937),expr__52084)))){\nreturn (new zprint.zprint.r(G__52073,self__.right,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((pred__52083.cljs$core$IFn$_invoke$arity$2 ? pred__52083.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"right\",\"right\",-452581833),expr__52084) : pred__52083.call(null,new cljs.core.Keyword(null,\"right\",\"right\",-452581833),expr__52084)))){\nreturn (new zprint.zprint.r(self__.left,G__52073,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new zprint.zprint.r(self__.left,self__.right,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4388__auto__,G__52073),null));\n}\n}\n}));\n\n(zprint.zprint.r.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4392__auto__){\nvar self__ = this;\nvar this__4392__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"left\",\"left\",-399115937),self__.left,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"right\",\"right\",-452581833),self__.right,null))], null),self__.__extmap));\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4379__auto__,G__52073){\nvar self__ = this;\nvar this__4379__auto____$1 = this;\nreturn (new zprint.zprint.r(self__.left,self__.right,G__52073,self__.__extmap,self__.__hash));\n}));\n\n(zprint.zprint.r.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4385__auto__,entry__4386__auto__){\nvar self__ = this;\nvar this__4385__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4386__auto__)){\nreturn this__4385__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth(entry__4386__auto__,(0)),cljs.core._nth(entry__4386__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4385__auto____$1,entry__4386__auto__);\n}\n}));\n\n(zprint.zprint.r.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"left\",\"left\",1241415590,null),new cljs.core.Symbol(null,\"right\",\"right\",1187949694,null)], null);\n}));\n\n(zprint.zprint.r.cljs$lang$type = true);\n\n(zprint.zprint.r.cljs$lang$ctorPrSeq = (function (this__4423__auto__){\nreturn (new cljs.core.List(null,\"zprint.zprint/r\",null,(1),null));\n}));\n\n(zprint.zprint.r.cljs$lang$ctorPrWriter = (function (this__4423__auto__,writer__4424__auto__){\nreturn cljs.core._write(writer__4424__auto__,\"zprint.zprint/r\");\n}));\n\n/**\n * Positional factory function for zprint.zprint/r.\n */\nzprint.zprint.__GT_r = (function zprint$zprint$__GT_r(left,right){\nreturn (new zprint.zprint.r(left,right,null,null,null));\n});\n\n/**\n * Factory function for zprint.zprint/r, taking a map of keywords to field values.\n */\nzprint.zprint.map__GT_r = (function zprint$zprint$map__GT_r(G__52077){\nvar extmap__4419__auto__ = (function (){var G__52086 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__52077,new cljs.core.Keyword(null,\"left\",\"left\",-399115937),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"right\",\"right\",-452581833)], 0));\nif(cljs.core.record_QMARK_(G__52077)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__52086);\n} else {\nreturn G__52086;\n}\n})();\nreturn (new zprint.zprint.r(new cljs.core.Keyword(null,\"left\",\"left\",-399115937).cljs$core$IFn$_invoke$arity$1(G__52077),new cljs.core.Keyword(null,\"right\",\"right\",-452581833).cljs$core$IFn$_invoke$arity$1(G__52077),null,cljs.core.not_empty(extmap__4419__auto__),null));\n});\n\nzprint.zprint.make_record = (function zprint$zprint$make_record(l,r){\nreturn (new r(l,r));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","zprint/zprint.cljc","~:line",1,"~:column",14,"~:end-line",1,"~:end-column",27,"~:no-doc",true],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$dbg","~$zprint.macros","~$dbg-pr","^M","~$dbg-form","^M","~$dbg-print","^M","~$zfuture","^M"],"~:excludes",["~#set",[]],"~:name","~$zprint.zprint","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$rewrite-clj.parser","^Z","~$p","^Z","~$zprint.config","^[","~$rewrite-clj.zip","^10","~$cljs.core","^11","~$zprint.finish","^12","~$goog","^13","~$zprint.zfns","^14","~$zprint.ansi","^15","~$s","~$clojure.string","~$z","^10","^16","^16","~$zprint.zutil","^17"],"~:seen",["^S",["~:require","~:require-macros"]],"~:uses",["^ ","~$zcount-zloc-seq-nc-nws","^14","~$zreader-cond-w-symbol?","^14","~$zarray-to-shift-seq","^14","~$zlist?","^14","~$zvector?","^14","~$zarray?","^14","~$zmap-w-nl-comma","^14","~$zcomment?","^14","~$znamespacedmap?","^14","~$zanonfn?","^14","~$zfirst-no-comment","^14","~$zkeyword?","^14","~$zseqnws-w-nl","^14","~$znextnws-w-nl","^14","~$zdelay?","^14","~$zns?","^14","~$zconstant?","^14","~$znewline?","^14","~$ztake-append","^14","~$merge-deep","^[","~$zmap?","^14","~$zatom?","^14","~$zstring","^14","~$validate-options","^[","~$zlast","^14","~$zdotdotdot","^14","~$znthnext","^14","~$znil?","^14","~$zset?","^14","~$color-str","^15","~$zsymbol?","^14","~$zfn-obj?","^14","~$zreader-cond-w-coll?","^14","~$zmeta?","^14","~$add-spec-to-docstring","^17","~$zfocus","^14","~$zfirst","^14","~$zagent?","^14","~$zbyte-array?","^14","~$zcount","^14","~$zexpandarray","^14","~$zstart","^14","~$zwhitespace?","^14","~$znextnws","^14","~$zreader-macro?","^14","~$zcoll?","^14","~$zmap-right","^14","~$zfuture?","^14","~$zpromise?","^14","~$zderef","^14","~$zlift-ns","^14","~$zsecond","^14","~$zsexpr","^14","~$zrecord?","^14","~$zobj-to-vec","^14","~$zfocus-style","^14","~$zwhitespaceorcomment?","^14","~$zmap-all","^14","~$zmap","^14","~$ztag","^14","~$zseqnws","^14","~$zmap-w-nl","^14","~$newline-vec","^12","~$zfind-path","^14","~$zuneval?","^14","~$zfind","^14","~$znumstr","^14"],"^1:",["^ ","^M","^M","^11","^11"],"~:form",["~#list",["~$ns","^U",["^1:",["^M","~:refer",["^L","^N","^O","^P","^Q"]]],["^2T",["^19",["^16","~:as","~$s"],["^12","^2V",["^2N"]],["^14","^2V",["^1R","^2R","^26","^1C","^2D","^2L","^1H","^2>","^2G","^29","^24","^1F","^2C","^1V","^27","^2J","^1E","^1[","^23","^2O","^2:","^1?","^1<","^1@","^1P","^1X","^2=","^2P","^21","^2K","^1T","^1A","^1Q","^2A","^2E","^1K","^2F","^28","^1M","^2H","^2I","^2@","^2?","^1J","^1G","^1L","^25","^2<","^1>","^1U","^1Z","^1W","^1=","^20","^2B","^2Q","^2M","^1B","^1N","^1I","^2;","^1D"]],["^15","^2V",["^1Y"]],["^[","^2V",["^1S","^1O"]],["^17","^2V",["^22"]],["^Z","^2W","~$p"],["^10","^2W","~$z"]]]]],"~:flags",["^ ","^1:",["^S",[]],"^19",["^S",[]]],"~:js-deps",["^ "],"~:deps",["^13","^11","^16","^12","^14","^15","^[","^17","^Z","^10"]],"^W","^U","~:resource-id",["~:shadow.build.classpath/resource","zprint/zprint.cljc"],"~:compiled-at",1598576893075,"~:resource-name","zprint/zprint.cljc","~:warnings",[],"~:source","(ns ^:no-doc zprint.zprint\n  #?@(:cljs [[:require-macros\n              [zprint.macros :refer [dbg dbg-pr dbg-form dbg-print zfuture]]]])\n  (:require\n    #?@(:clj [[zprint.macros :refer [dbg-pr dbg dbg-form dbg-print zfuture]]])\n    [clojure.string :as s]\n    [zprint.finish :refer [newline-vec]]\n    [zprint.zfns :refer\n     [zstring znumstr zbyte-array? zcomment? zsexpr zseqnws zseqnws-w-nl\n      zmap-right zfocus-style zstart zfirst zfirst-no-comment zsecond znthnext\n      zcount zmap zanonfn? zfn-obj? zfocus zfind-path zwhitespace? zlist?\n      zcount-zloc-seq-nc-nws zvector? zmap? zset? zcoll? zuneval? zmeta? ztag\n      zlast zarray? zatom? zderef zrecord? zns? zobj-to-vec zexpandarray\n      znewline? zwhitespaceorcomment? zmap-all zpromise? zfuture? zdelay?\n      zkeyword? zconstant? zagent? zreader-macro? zarray-to-shift-seq zdotdotdot\n      zsymbol? znil? zreader-cond-w-symbol? zreader-cond-w-coll? zlift-ns zfind\n      zmap-w-nl zmap-w-nl-comma ztake-append znextnws-w-nl znextnws\n      znamespacedmap?]]\n    [zprint.ansi :refer [color-str]]\n    [zprint.config :refer [validate-options merge-deep]]\n    [zprint.zutil :refer [add-spec-to-docstring]]\n    [rewrite-clj.parser :as p]\n    [rewrite-clj.zip :as z]\n    #_[taoensso.tufte :as tufte :refer (p defnp profiled profile)]))\n\n\n;;\n;; # Utility Functions\n;;\n\n(defn blanks\n  \"Produce a blank string of desired size.\"\n  [n]\n  (apply str (repeat n \" \")))\n\n(defn dots\n  \"Produce a dot string of desired size.\"\n  [n]\n  (apply str (repeat n \".\")))\n\n(defn conj-it!\n  \"Make a version of conj! that take multiple arguments.\"\n  [& rest]\n  (loop [out (first rest)\n         more (next rest)]\n    (if more (recur (conj! out (first more)) (next more)) out)))\n\n(defn split-lf\n  \"Do split for newlines, instead of using regular expressions.\"\n  [s]\n  (loop [input s\n         out []]\n    (if-not input\n      out\n      (let [next-lf (clojure.string/index-of input \"\\n\")\n            chunk (if next-lf (subs input 0 next-lf) input)]\n        (recur (if next-lf (subs input (inc next-lf)) nil) (conj out chunk))))))\n\n(defn split-lf-2\n  \"Do split for newlines, instead of using regular expressions.\n  Maximum split is 2.\"\n  [s]\n  (if-let [next-lf (clojure.string/index-of s \"\\n\")]\n    [(subs s 0 next-lf) (subs s (inc next-lf))]\n    [s]))\n\n;;\n;; # Use pmap when we have it\n;;\n\n#?(:clj (defn zpmap\n          ([options f coll]\n           (if (:parallel? options) (pmap f coll) (map f coll)))\n          ([options f coll1 coll2]\n           (if (:parallel? options) (pmap f coll1 coll2) (map f coll1 coll2))))\n   :cljs (defn zpmap\n           ([options f coll] (map f coll))\n           ([options f coll1 coll2] (map f coll1 coll2))))\n\n;;\n;; # More parallelism issues -- zderef to go with zfuture macro\n;;\n\n(defn zat\n  \"Takes an option map and the return from zfuture.  If the\n  options map has (:parallel? options) as true, then deref\n  the value, otherwise just pass it through.\"\n  [options value]\n  #?(:clj (if (:parallel? options) (deref value) value)\n     :cljs value))\n\n;;\n;; # Debugging Assistance\n;;\n\n(def fzprint-dbg (atom nil))\n\n(defn log-lines\n  \"Accept a style-vec that we are about to hand to style-lines, and\n  output it if called for, to aid in debugging.\"\n  [{:keys [dbg-print? dbg-indent in-hang?], :as options} dbg-output ind\n   style-vec]\n  (when dbg-print?\n    (if style-vec\n      (do (println dbg-indent dbg-output \"--------------\" \"in-hang?\" in-hang?)\n          (prn style-vec)\n          #_(println (apply str (blanks ind) (map first style-vec))))\n      (println dbg-indent dbg-output \"--------------- no style-vec\"))))\n\n;;\n;; # What is a function?\n;;\n\n(defn showfn?\n  \"Show this thing as a function?\"\n  [fn-map f]\n  (when (not (string? f))\n    (let [f-str (str f)]\n      (or (fn-map f-str)\n          (re-find #\"clojure\" f-str)\n          (if (symbol? f)\n            ; This is necessary because f can be a symbol that\n            ; resolve will have a problem with.  The obvious ones\n            ; were (ns-name <some-namespace>), but there are almost\n            ; certainly others.\n            (try (or (re-find #\"clojure\"\n                              (str (:ns (meta #?(:clj (resolve f)\n                                                 :cljs f)))))\n                     (fn-map (name f)))\n                 (catch #?(:clj Exception\n                           :cljs :default)\n                   e\n                   nil)))))))\n\n(defn show-user-fn?\n  \"Show this thing as a user defined function?  Assumes that we\n  have already handled any clojure defined functions!\"\n  [options f]\n  (when (not (string? f))\n    (let [f-str (str f)\n          user-fn-map (:user-fn-map options)]\n      (or (get user-fn-map f-str)\n          (if (symbol? f)\n            ; This is necessary because f can be a symbol that\n            ; resolve will have a problem with.  The obvious ones\n            ; were (ns-name <some-namespace>), but there are almost\n            ; certainly others.\n            (try (or (not (empty? (str (:ns (meta #?(:clj (resolve f)\n                                                     :cljs f))))))\n                     (get user-fn-map (name f)))\n                 (catch #?(:clj Exception\n                           :cljs :default)\n                   e\n                   nil)))))))\n\n(def right-separator-map {\")\" 1, \"]\" 1, \"}\" 1})\n\n;;\n;; # Functions to compare alternative printing approaches\n;;\n\n(declare fix-rightcnt)\n(declare contains-nil?)\n\n(defn good-enough?\n  \"Given the fn-style, is the first output good enough to be worth\n  doing. p is pretty, which is typically hanging, and b is basic, which\n  is typically flow. p-count is the number of elements in the hang.\"\n  [caller\n   {:keys [width rightcnt dbg?],\n    {:keys [hang-flow hang-type-flow hang-flow-limit general-hang-adjust\n            hang-if-equal-flow?]}\n      :tuning,\n    {:keys [hang-expand hang-diff hang-size hang-adjust]} caller,\n    :as options} fn-style p-count indent-diff\n   [p-lines p-maxwidth p-length-seq p-what] [b-lines b-maxwidth _ b-what]]\n  (let [p-last-maxwidth (last p-length-seq)\n        hang-diff (or hang-diff 0)\n        hang-expand (or hang-expand 1000.)\n        hang-adjust (or hang-adjust general-hang-adjust)\n        #_(options (if (and p-lines\n                            p-count\n                            (pos? p-count)\n                            (not (<= indent-diff hang-diff))\n                            (not (<= (/ (dec p-lines) p-count) hang-expand)))\n                     (assoc options :dbg? true)\n                     options))\n        options (if (or p-what b-what) (assoc options :dbg? true) options)\n        result\n          (if (not b-lines)\n            true\n            (and p-lines\n                 ; Does the last line fit, including the collection ending\n                 ; stuff?\n                 ; Do we really need this anymore?\n                 (<= p-last-maxwidth (- width (fix-rightcnt rightcnt)))\n                 ; Does it widest line fit?\n                 ; Do we have a problem if the widest line has a rightcnt?\n                 (<= p-maxwidth width)\n                 ;      (<= p-maxwidth (- width (fix-rightcnt rightcnt)))\n                 (or (zero? p-lines)\n                     (and ; do we have lines to operate on?\n                       (> b-lines 0)\n                       (> p-count 0)\n                       ; if the hang and the flow are the same size, why not\n                       ; hang?\n                       (if (and (= p-lines b-lines) hang-if-equal-flow?)\n                         true\n                           ; is the difference between the indents so small\n                           ; that\n                           ; we don't care?\n                           (and (if (<= indent-diff hang-diff)\n                                  true\n                                    ; Do the number of lines in the hang exceed\n                                    ; the number\n                                    ; of elements in the hang?\n                                    (<= (/ (dec p-lines) p-count) hang-expand))\n                                (if hang-size (< p-lines hang-size) true)\n                                (let [factor (if (= fn-style :hang)\n                                               hang-type-flow\n                                               hang-flow)]\n                                  ; if we have more than n lines, take the\n                                  ; shortest\n                                  (if (> p-lines hang-flow-limit)\n                                    (<= (dec p-lines) b-lines)\n                                    ; if we have less then n lines, we don't\n                                    ; necessarily\n                                    ; take the shortest\n                                    ; once we did (dec p-lines) here, fwiw\n                                    ; then we tried it w/out the dec, now we\n                                    ; let you\n                                    ; set it in :tuning.  The whole point of\n                                    ; having a\n                                    ; hang-adjust of -1 is to allow hangs when\n                                    ; the\n                                    ; number of lines in a hang is the same as\n                                    ; the\n                                    ; number of lines in a flow.\n                                    ;(< (/ p-lines b-lines) factor)))))))]\n                                    (< (/ (+ p-lines hang-adjust) b-lines)\n                                       factor)))))))))]\n    (dbg options\n         (if result \"++++++\" \"XXXXXX\")\n         \"p-what\" p-what\n         \"good-enough? caller:\" caller\n         \"fn-style:\" fn-style\n         \"width:\" width\n         \"rightcnt:\" rightcnt\n         \"hang-expand:\" hang-expand\n         \"p-count:\" p-count\n         \"p-lines:\" p-lines\n         \"p-maxwidth:\" p-maxwidth\n         \"indent-diff:\" indent-diff\n         \"hang-diff:\" hang-diff\n         \"p-last-maxwidth:\" p-last-maxwidth\n         \"b-lines:\" b-lines\n         \"b-maxwidth:\" b-maxwidth)\n    result))\n\n;;\n;; # Utility Functions\n;;\n\n(defn in-hang\n  \"Add :in-hang? true to the options map.\"\n  [options]\n  (if (:in-hang? options)\n    options\n    (if (:do-in-hang? options)\n      (assoc options :in-hang? (or (:depth options) true))\n      options)))\n\n(defn contains-nil?\n  \"Scan a collection, and return the number of nils or empty collections\n  present (if any), and nil otherwise.\"\n  [coll]\n  (let [n (count (filter #(if (coll? %) (empty? %) (nil? %)) coll))]\n    (when (not (zero? n)) n)))\n\n(defn concat-no-nil-alt\n  \"Concatentate multiple sequences, but if any of them are nil, return nil.\n  This version is 15-20% slower than the version below. Keeping it around\n  just for illustrative purposes.\"\n  [& rest]\n  (loop [coll rest\n         out (transient [])]\n    (let [c (first coll)]\n      (if-not c\n        (persistent! out)\n        (when (or (and (coll? c) (not (empty? c))) (not (nil? c)))\n          (recur (next coll) (conj! out c)))))))\n\n(defn concat-no-nil-pre-noseq\n  \"Concatentate multiple sequences, but if any of them are nil or empty\n  collections, return nil.\"\n  [& rest]\n  (let [result (reduce (fn [v o]\n                         (if (coll? o)\n                           (if (empty? o) (reduced nil) (reduce conj! v o))\n                           (if (nil? o) (reduced nil) (conj! v o))))\n                 (transient [])\n                 rest)]\n    (when result (persistent! result))))\n\n(defn concat-no-nil\n  \"Concatentate multiple sequences, but if any of them are nil or empty\n  collections, return nil. If any of them are :noseq, just skip them.\"\n  [& rest]\n  (let [result (reduce (fn [v o]\n                         (if (coll? o)\n                           (if (empty? o) (reduced nil) (reduce conj! v o))\n                           (if (= :noseq o)\n                             ; if the supposed sequence is :noseq, skip it\n                             v\n                             (if (nil? o) (reduced nil) (conj! v o)))))\n                 (transient [])\n                 rest)]\n    (when result (persistent! result))))\n\n(defn force-vector\n  \"Ensure that whatever we have is a vector.\"\n  [coll]\n  (if (vector? coll) coll (into [] coll)))\n\n(defn keyword-fn?\n  \"Takes a string, and returns the fn-style if it is a keyword and\n  without the : it can be found in the fn-map.\"\n  [options s]\n  (let [[left right] (clojure.string/split s #\"^:\")]\n    (when right ((:fn-map options) right))))\n\n(defn get-max-length\n  \"Given the options map, return the max length.  This might be\n  a constant number, but it might be based on the depth as well.\n  Returns nil of there is no max-length set.\"\n  [{:as options, :keys [max-length depth]}]\n  (when max-length\n    (if (vector? max-length)\n      (nth max-length (min (dec depth) (dec (count max-length))))\n      max-length)))\n\n(defn no-max-length\n  \"Given an options map, return another options map with no\n  :max-length key.  This is to that you can call a routine that\n  normally deals with :max-length and get it to do the normal\n  thing.\"\n  [options]\n  (assoc options :max-length 10000))\n\n;;\n;; # Work with style-vecs and analyze results\n;;\n\n;; Transients don't help here, though they don't hurt much either.\n\n(defn accumulate-ll\n  \"Take the vector carrying the intermediate results, and\n  do the right thing with a new string. Vector is\n  [ 0 out - vector accumulating line lengths \n    1 cur-len - length of current line\n    just-eol? - did we just do an eol?\n    ]\n  s - string to add to current line\n  tag - element type of string (comment's don't count in length)\n  eol? - should we terminate line after adding count of s\"\n  [count-comment? [out cur-len just-eol? just-comment? :as in] s tag eol?]\n  (let [comment? (or (= tag :comment) (= tag :comment-inline))\n        count-s (if (and comment? (not count-comment?)) 0 (count s))]\n    (cond\n      #_((and comment? (not just-eol?))\n          ; if a comment and we didn't just do\n          ; a newline, then terminate the previous\n          ; line and do a line just with the comment\n          (assoc in\n            0 (conj out cur-len count-s)\n            1 0\n            2 true))\n      ; if we are told to terminate the line or it\n      ; is a comment, we terminate the line with the\n      ; size of the string added to it\n      (or (and eol? (not (and just-eol? (zero? count-s)))) comment?)\n        [(conj out (+ cur-len count-s)) 0 true comment?]\n      ;(assoc in 0 (conj out (+ cur-len count-s)) 1 0 2 true 3 comment?)\n      ; no reason to terminate the line, just accumulate\n      ; the size in cur-len\n      :else [out (+ cur-len count-s) nil comment?])))\n; (assoc in 1 (+ cur-len count-s) 2 nil 3 comment?))))\n\n(defn generate-ll\n  [count-comment? [out cur-len just-eol? just-comment? :as in]\n   [s _ tag :as element]]\n  (let [[l r] (if (or (= tag :whitespace) (= tag :indent) (= tag :newline))\n                (split-lf-2 s)\n                (list s))\n        ; if tag = :comment, shouldn't have \\n and\n        ; therefore shouldn't have r\n        ; if r is non-nil, then we had a newline, so we want to\n        ; terminate the current line\n        ; if we are already in a comment and we have something\n        ; that is not whitespace, then we want to terminate the\n        ; current line\n        in (accumulate-ll count-comment? in l tag (not (nil? r)))\n        in (if (empty? r) in (accumulate-ll count-comment? in r tag nil))]\n    in))\n\n\n(defn line-lengths-iter\n  \"Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments elsewhere.\n  Note that only vectors with :whitespace, :indent, or :newline are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character. A single comment is counted as two lines. Lots of edge\n  conditions that are really quite important.\"\n  [options ind style-vec]\n  (let [count-comment? (:count? (:comment options))\n        ind (if (coll? ind) (first ind) ind)]\n    #_(prn \"line-lengths-iter: style-vec:\" style-vec)\n    (loop [next-vec style-vec\n           current-string nil\n           line-length ind\n           previous-comment? nil\n           out []]\n      (if (or (and (empty? next-vec) (empty? current-string)))\n        ; A trailing newline isn't counted.\n        (cond (and (zero? line-length) (not previous-comment?)) out\n              previous-comment? (conj out line-length 0)\n              :else (conj out line-length))\n        (let [advance? (empty? current-string)\n              [next-string _ tag] (when advance? (first next-vec))\n              comment? (or (= tag :comment) (= tag :comment-inline))\n              s (if advance? next-string current-string)\n              [l r] (when s\n                      ; if we have a current-string, then we are looking for\n                      ; newlines\n                      (cond (and comment? (not count-comment?)) [\"\"]\n                            (or (and advance?\n                                     (or (= tag :whitespace)\n                                         (= tag :newline)\n                                         (= tag :indent)))\n                                current-string)\n                              (split-lf-2 s)\n                            :else [s]))\n              ; If r non-nil, we had a newline at end of l.\n              ; If we had a previous-comment, then we want to\n              ; imply a newline unless we have a newline at the\n              ; start of s.\n              ; If r is non-nil, and l is empty, then the newline\n              ; was at the front of r, in which case we don't need to\n              ; do an implied newline for the comment (if any).\n              ; Choices:\n              ;  leave l and r alone\n              ;  l becomes nil and r is (str l r)\n              force-newline? (and previous-comment? (not (empty? l)))\n              #_(prn \"l:\" l\n                     \"r:\" r\n                     \"force-newline?\" force-newline?\n                     \"comment?\" comment?)\n              r (if force-newline? (str l r) r)\n              l (if force-newline? nil l)\n              new-line-length (+ line-length (count l))]\n          #_(prn \"current-string:\" current-string\n                 \"line-length:\" line-length\n                 \"advance?\" advance?\n                 \"s:\" s\n                 \"l:\" l\n                 \"r:\" r\n                 \"new-line-length:\" new-line-length)\n          (recur (if advance? (next next-vec) next-vec)\n                 r\n                 (if r 0 new-line-length)\n                 comment?\n                 (if r (conj out new-line-length) out)))))))\n\n(defn line-lengths\n  \"Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments at the\n  end. Note that only vectors with :whitespace or :indent are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character.\"\n  [options ind style-vec]\n  (let [length-vec (first ; this final accumulate-ll is to terminate the last\n                          ; line,\n                          ; the one in progress\n                     (let [count-comment? (:count? (:comment options))\n                           [_ _ just-eol? just-comment? :as result]\n                             (reduce (partial generate-ll count-comment?)\n                               [[] (if (coll? ind) (first ind) ind) nil nil]\n                               style-vec)]\n                       (if (and just-eol? (not just-comment?))\n                         result\n                         (accumulate-ll count-comment?\n                                        (assoc result 2 nil)\n                                        \"\"\n                                        nil\n                                        true))))]\n    #_(prn \"line-lengths: style-vec:\" style-vec\n           \"ind:\" ind\n           \"length-vec:\" length-vec)\n    length-vec))\n\n(defn single-line?\n  \"This looks at a style vec and doesn't do all that style-lines does.\n  It just looks for a new-line in the strings, and returns true if it\n  doesn't find one.\"\n  [style-vec]\n  #_(prn \"style-vec:\" style-vec)\n  (not (reduce #(or %1 %2)\n         false\n         (map #(clojure.string/includes? (first %) \"\\n\") style-vec))))\n\n(defn find-what\n  \"Given a style-vec, come up with a string that gives some hint of \n  where this style-vec came from.\"\n  [style-vec]\n  (loop [s-vec style-vec]\n    (when s-vec\n      (let [[what _ this] (first s-vec)]\n        (if (= this :element) what (recur (next s-vec)))))))\n\n; Debugging help to find differences between line-lengths and\n; line-lengths-iter.  Surprisingly helpful!\n#_(defonce lldiff (atom []))\n\n(defn style-lines\n  \"Take a style output, and tell us how many lines it takes to print it\n  and the maximum width that it reaches. Returns \n  [<line-count> <max-width> [line-lengths]].\n  Doesn't require any max-width inside the style-vec. Also returns the\n  line lengths in case that is helpful (since we have them anyway).\n  If (:dbg-ge options) has value, then uses find-what to see if what it\n  finds matches the value, and if it does, place the value in the\n  resulting vector.\"\n  [options ind style-vec]\n  (when (and style-vec (not (empty? style-vec)) (not (contains-nil? style-vec)))\n    (let [;lengths (line-lengths options ind style-vec)\n          lengths (line-lengths-iter options ind style-vec)\n          count-lengths (count lengths)\n          result [count-lengths (if (zero? count-lengths) 0 (apply max lengths))\n                  lengths]\n          dbg-ge (:dbg-ge options)\n          what (when (and dbg-ge (= (find-what style-vec) dbg-ge)) dbg-ge)]\n      #_(when (not= lengths lengths-iter) (swap! lldiff conj style-vec))\n      (if what (conj result what) result))))\n\n(defn fzfit\n  \"Given output from style-lines and options, see if it fits the width.  \n  Return the number of lines it takes if it fits, nil otherwise.\"\n  [{:keys [width rightcnt dbg?], :as options}\n   [line-count max-width :as style-lines-return]]\n  (dbg options\n       \"fzfit: fixed-rightcnt:\" (fix-rightcnt rightcnt)\n       \"line-count:\" line-count\n       \"max-width:\" max-width\n       \"width:\" width)\n  (when style-lines-return\n    (if (<= max-width (- width (fix-rightcnt rightcnt))) line-count nil)))\n\n(defn fzfit-one-line\n  \"Given the return from style-lines  and options, \n  return true if it fits on a single line.\"\n  [options style-lines-return]\n  (let [lines (fzfit options style-lines-return)]\n    (and (number? lines) (= lines 1))))\n\n;;\n;; # Handle Rightmost Size\n;;\n\n(defn rightmost\n  \"Increase the rightmost count, if any, and return one if not.\"\n  [options]\n  (assoc options :rightcnt (inc (:rightcnt options 0))))\n\n(defn not-rightmost\n  \"Remove the rightmost count.\"\n  [options]\n  (dissoc options :rightcnt))\n\n(defn c-r-pair\n  \"Handle the complexity of commas and rightmost-pair with options.\n  If it isn't a rightmost, it loses rightmost status.\n  If it is a rightmost, and in the rightmost pair, it gain one rightmost\n  since it has the right end thing (and we don't care about the comma).\n  If it is the rightmost of the non-rightmost-pair, then the comma\n  matters, and we handle that appropriately.  Whew!\"\n  [commas? rightmost-pair? rightmost? options]\n  (if-not rightmost?\n    (not-rightmost options)\n    (if rightmost-pair?\n      options\n      (if commas?\n        (rightmost (not-rightmost options))\n        (not-rightmost options)))))\n\n(defn fix-rightcnt\n  \"Handle issue with rightcnt.\"\n  [rightcnt]\n  (if (number? rightcnt) rightcnt 0))\n\n;;\n;; # First pass at color -- turn string or type into keyword color\n;;\n\n;;\n;; ## Translate from a string to a keyword as needed.\n;;\n\n(def str->key\n  {\"(\" :paren,\n   \")\" :paren,\n   \"[\" :bracket,\n   \"]\" :bracket,\n   \"{\" :brace,\n   \"}\" :brace,\n   \"#{\" :hash-brace,\n   \"#(\" :hash-paren,\n   \"#_\" :uneval,\n   \"'\" :quote,\n   \"`\" :quote,\n   \"~\" :quote,\n   \"~@\" :quote,\n   \"@\" :deref})\n\n\n(defn zcolor-map\n  \"Look up the thing in the zprint-color-map.  Accepts keywords or\n  strings.\"\n  [{:keys [color-map], :as options} key-or-str]\n  (color-map (if (keyword? key-or-str) key-or-str (str->key key-or-str))))\n\n\n;;\n;; ## Pretty Printer Code\n;;\n\n(declare fzprint*)\n(declare fzprint-flow-seq)\n\n(defn hangflow\n  \"Take a style-vec, and if hangflow? is true, return a\n  vector [hang-or-flow style-vec], else return style-vec.\n  But a nil style-vec returns nil.\"\n  [hangflow? hang-or-flow style-vec]\n  (when style-vec (if hangflow? [hang-or-flow style-vec] style-vec)))\n\n(defn fzprint-hang-unless-fail\n  \"Try to hang something and if it doesn't hang at all, then flow it,\n  but strongly prefer hang.  Has hang and flow indents, and fzfn is the\n  fzprint-? function to use with zloc.  Callers need to know whether this\n  was hang or flow, so it returns [{:hang | :flow} style-vec] all the time.\"\n  [options hindent findent fzfn zloc]\n  (dbg options\n       \"fzprint-hang-unless-fail: hindent:\" hindent\n       \"findent:\" findent\n       \"zloc:\" (zstring (zfirst zloc)))\n  ; If the hindent is different than the findent, we'll try hang, otherwise\n  ; we will just do the flow\n  (let [hanging (when (not= hindent findent)\n                  (fzfn (in-hang options) hindent zloc))]\n    (dbg-form\n      options\n      \"fzprint-hang-unless-fail: exit:\"\n      (if (and hanging (fzfit options (style-lines options hindent hanging)))\n        [:hang hanging]\n        ; hang didn't work, do flow\n        (do (dbg options \"fzprint-hang-unless-fail: hang failed, doing flow\")\n            [:flow\n             (concat-no-nil [[(str \"\\n\" (blanks findent)) :none :indent]]\n                            (fzfn options findent zloc))])))))\n\n(defn replace-color\n  \"Given a style-vec with exactly one thing in it, replace the color\n  with whatever local color we have determined is correct.\"\n  [local-color style-vec]\n  (if (= (count style-vec) 1)\n    (let [[[string color element]] style-vec] [[string local-color element]])\n    style-vec))\n\n(declare fzprint-binding-vec)\n(declare middle-element?)\n\n(defn fzprint-two-up\n  \"Print a single pair of things (though it might not be exactly a\n  pair, given comments and :extend and the like), like bindings in\n  a let, clauses in a cond, keys and values in a map.  Controlled\n  by various maps, the key of which is caller.  Returns \n  [:hang <style-vec>] or [:flow <style-vec>] so that the upstream folks\n  know whether this was a hang or flow and can do the right thing\n  based on that.\"\n  [caller\n   {:keys [one-line? dbg? dbg-indent in-hang? do-in-hang? map-depth],\n    {:keys [hang? dbg-local? dbg-cnt? indent indent-arg flow? key-color\n            key-depth-color key-value-color]}\n      caller,\n    :as options} ind commas? justify-width rightmost-pair?\n   [lloc rloc xloc :as pair]]\n  (if dbg-cnt? (println \"two-up: caller:\" caller \"hang?\" hang? \"dbg?\" dbg?))\n  (if (or dbg? dbg-local?)\n    (println\n      (or dbg-indent \"\")\n      \"==========================\"\n      (str \"\\n\" (or dbg-indent \"\"))\n      (pr-str \"fzprint-two-up:\" (zstring lloc)\n              \"tag:\" (ztag lloc)\n              \"caller:\" caller\n              \"count:\" (count pair)\n              \"ind:\" ind\n              \"indent:\" indent\n              \"indent-arg:\" indent-arg\n              \"justify-width:\" justify-width\n              \"one-line?:\" one-line?\n              \"hang?:\" hang?\n              \"in-hang?\" in-hang?\n              \"do-in-hang?\" do-in-hang?\n              \"flow?\" flow?\n              \"commas?\" commas?\n              \"rightmost-pair?\" rightmost-pair?)))\n  (let [local-hang? (or one-line? hang?)\n        indent (or indent indent-arg)\n        local-options\n          (if (not local-hang?) (assoc options :one-line? true) options)\n        loptions (c-r-pair commas? rightmost-pair? nil options)\n        roptions (c-r-pair commas? rightmost-pair? :rightmost options)\n        local-roptions\n          (c-r-pair commas? rightmost-pair? :rightmost local-options)\n        ; If we have a key-value-color map, and the key we have matches any\n        ; of the keys in the map, then merge the resulting color-map elements\n        ; into the current color-map.  Could be problematic if lloc is a\n        ; modifier, but at present modifiers are only for extend and\n        ; key-value-color is only for maps, so they can't both show up\n        ; at once.\n        value-color-map (and key-value-color (key-value-color (zsexpr lloc)))\n        local-roptions (if value-color-map\n                         (merge-deep local-roptions\n                                     {:color-map value-color-map})\n                         local-roptions)\n        roptions (if value-color-map\n                   (merge-deep roptions {:color-map value-color-map})\n                   roptions)\n        ; It is possible that lloc is a modifier, and if we have exactly\n        ; three things, we will pull rloc in with it, and move xloc to rloc.\n        ; If it is just two, we'll leave it to be handled normally.\n        ; Which might need to be re-thought due to justification, but since\n        ; we are really only talking :extend here, maybe not.\n        modifier-set (:modifiers (options caller))\n        modifier? (or (and modifier-set\n                           (modifier-set (zstring lloc))\n                           (> (count pair) 2))\n                      (middle-element? options rloc))\n        ; Figure out if we want to color keys based on their depth, and if so,\n        ; figure out the color for this one.\n        local-color (get key-depth-color (dec map-depth))\n        ; Doesn't work if we have a modifier, but at this point, key-color\n        ; is only for maps and modifiers are only for extend.\n        local-color (if key-color (key-color (zsexpr lloc)) local-color)\n        #_local-color\n        #_(cond (and map-depth (= caller :map) (= map-depth 2)) :green\n                (and map-depth (= caller :map) (= map-depth 1)) :blue\n                (and map-depth (= caller :map) (= map-depth 3)) :yellow\n                (and map-depth (= caller :map) (= map-depth 4)) :red\n                :else nil)\n        arg-1 (fzprint* loptions ind lloc)\n        ; If we have a newline, make it one shorter since we did a newline\n        ; after the previous pair.  Unless this is the first pair, but we\n        ; should have done one before that pair too, maybe?\n        arg-1-newline? (and (= (count pair) 1) (znewline? lloc))\n        #_#_arg-1\n          (if arg-1-newline? (first (remove-last-newline [arg-1])) arg-1)\n        arg-1 (if local-color (replace-color local-color arg-1) arg-1)\n        ; If we are going to print the second thing on the line, we need\n        ; to know how big the first thing is, so we can see if the second\n        ; thing fits on the line.\n        [arg-1-line-count arg-1-max-width :as arg-1-lines]\n          (style-lines options ind arg-1)\n        ; If arg-1 already takes multiple lines, we aren't going to do\n        ; anything interesting with a modifier.\n        _ (dbg options\n               \"fzprint-two-up before modifier: arg-1-line-count:\"\n                 arg-1-line-count\n               \"arg-1-max-width:\" arg-1-max-width)\n        modifier? (if (or (and arg-1-line-count (> arg-1-line-count 1))\n                          arg-1-newline?)\n                    nil\n                    modifier?)\n        ; See if we can merge the first and second things and have them\n        ; stay on the same line?\n        combined-arg-1 (if modifier?\n                         (concat-no-nil arg-1\n                                        [[(str \" \") :none :whitespace]]\n                                        (fzprint* (in-hang loptions)\n                                                  (+ ind arg-1-max-width)\n                                                  rloc))\n                         arg-1)\n        ; If they fit, then they are the new arg-1\n        arg-1 (if combined-arg-1 combined-arg-1 arg-1)\n        ; If they fit, then we are still doing modifier if we are already\n        modifier? (if combined-arg-1 modifier? nil)\n        ; If they fit, we need to recalculate the size of arg-1\n        [arg-1-line-count arg-1-max-width :as arg-1-lines]\n          (if combined-arg-1 (style-lines options ind arg-1) arg-1-lines)\n        _ (dbg options\n               \"fzprint-two-up after modifier: arg-1-line-count:\"\n                 arg-1-line-count\n               \"arg-1-max-width:\" arg-1-max-width)\n        lloc (if modifier? rloc lloc)\n        rloc (if modifier? xloc rloc)\n        ;     arg-1-fit-oneline? (and (not force-nl?)\n        ;                             (fzfit-one-line loptions arg-1-lines))\n        arg-1-fit-oneline? (and (not flow?)\n                                (fzfit-one-line loptions arg-1-lines))\n        arg-1-fit? (or arg-1-fit-oneline?\n                       (when (not one-line?) (fzfit loptions arg-1-lines)))\n        ; sometimes arg-1-max-width is nil because fzprint* returned nil,\n        ; but we need to have something for later code to use as a number\n        arg-1-width (- (or arg-1-max-width 0) ind)]\n    ; If we don't *have* an arg-1, no point in continuing...\n    ;  If arg-1 doesn't fit, maybe that's just how it is!\n    ;  If we are in-hang, then we can bail, but otherwise, not.\n    (dbg-pr options \"fzprint-two-up: arg-1:\" arg-1)\n    (when (and arg-1 (or arg-1-fit? (not in-hang?)))\n      (cond\n        arg-1-newline? [:flow arg-1]\n        (= (count pair) 1) [:hang (fzprint* roptions ind lloc)]\n        (or (= (count pair) 2) (and modifier? (= (count pair) 3)))\n          ;concat-no-nil\n          ;  arg-1\n          ; We used to think:\n          ; We will always do hanging, either fully or with one-line? true,\n          ; we will then do flow if hanging didn't do anything or if it did,\n          ; we will try to see if flow is better.\n          ;\n          ; But now, we don't do hang if arg-1-fit-oneline? is false, since\n          ; we won't use it.\n          (let [hanging-width (if justify-width justify-width arg-1-width)\n                hanging-spaces\n                  (if justify-width (inc (- justify-width arg-1-width)) 1)\n                hanging-indent (+ 1 hanging-width ind)\n                flow-indent (+ indent ind)]\n            (if (and (zstring lloc)\n                     (keyword-fn? options (zstring lloc))\n                     (zvector? rloc))\n              ; This is an embedded :let or :when-let or something\n              ; Presently we assume that anything with a vector after something\n              ; that is a keyword must be one of these, but we could check\n              ; for a :binding fn-style instead which might make more sense.\n              (let [[hang-or-flow style-vec] (fzprint-hang-unless-fail\n                                               loptions\n                                               hanging-indent\n                                               flow-indent\n                                               fzprint-binding-vec\n                                               rloc)\n                    arg-1 (if (= hang-or-flow :hang)\n                            (concat-no-nil arg-1\n                                           [[(blanks hanging-spaces) :none\n                                             :whitespace]])\n                            arg-1)]\n                [hang-or-flow (concat-no-nil arg-1 style-vec)])\n              ; This is a normal two element pair thing\n              (let [; Perhaps someday we could figure out if we are already\n                    ; completely in flow to this point, and be smarter about\n                    ; possibly dealing with the hang or flow now.  But for\n                    ; now, we will simply do hang even if arg-1 didn't fit\n                    ; on one line if the flow indent isn't better than the\n                    ; hang indent.\n                    _ (dbg options\n                           \"fzprint-two-up: before hang.  hanging tried?\"\n                           (and arg-1-fit-oneline?\n                                (and (not flow?)\n                                     (>= flow-indent hanging-indent))))\n                    hanging (when (or arg-1-fit-oneline?\n                                      (and (not flow?)\n                                           (>= flow-indent hanging-indent)))\n                              (fzprint* (if (< flow-indent hanging-indent)\n                                          (in-hang local-roptions)\n                                          local-roptions)\n                                        hanging-indent\n                                        rloc))\n                    hang-count (zcount rloc)\n                    _ (log-lines options\n                                 \"fzprint-two-up: hanging:\"\n                                 hanging-indent\n                                 hanging)\n                    hanging-lines (style-lines options hanging-indent hanging)\n                    fit? (fzfit-one-line local-roptions hanging-lines)\n                    hanging-lines (if fit?\n                                    hanging-lines\n                                    (when (and (not one-line?) hang?)\n                                      hanging-lines))\n                    ; Don't flow if it fit, or it didn't fit and we were doing\n                    ; one line on input.  Do flow if we don't have\n                    ; hanging-lines\n                    ; and we were not one-line on input.\n                    _ (log-lines options\n                                 \"fzprint-two-up: hanging-2:\"\n                                 hanging-indent\n                                 hanging)\n                    flow-it? (and (or (and (not hanging-lines) (not one-line?))\n                                      (not (or fit? one-line?)))\n                                  ; this is for situations where the first\n                                  ; element is short and so the hanging indent\n                                  ; is the same as the flow indent, so there\n                                  ; is\n                                  ; no point in flow -- unless we don't have\n                                  ; any hanging-lines, in which case we better\n                                  ; do flow\n                                  (or (< flow-indent hanging-indent)\n                                      (not hanging-lines)))\n                    _ (dbg options\n                           \"fzprint-two-up: before flow. flow-it?\"\n                           flow-it?)\n                    flow (when flow-it? (fzprint* roptions flow-indent rloc))\n                    _ (log-lines options\n                                 \"fzprint-two-up: flow:\"\n                                 (+ indent ind)\n                                 flow)\n                    flow-lines (style-lines options (+ indent ind) flow)]\n                (when dbg-local?\n                  (prn \"fzprint-two-up: local-hang:\" local-hang?)\n                  (prn \"fzprint-two-up: one-line?:\" one-line?)\n                  (prn \"fzprint-two-up: hanging-indent:\" hanging-indent)\n                  (prn \"fzprint-two-up: hanging-lines:\" hanging-lines)\n                  (prn \"fzprint-two-up: flow?:\" flow?)\n                  (prn \"fzprint-two-up: flow-it?:\" flow-it?)\n                  (prn \"fzprint-two-up: fit?:\" fit?)\n                  (prn \"fzprint-two-up: flow-indent:\" flow-indent)\n                  (prn \"fzprint-two-up: hanging:\" (zstring lloc) hanging)\n                  (prn \"fzprint-two-up: (+ indent ind):\" (+ indent ind))\n                  (prn \"fzprint-two-up: flow:\" (zstring lloc) flow))\n                (dbg options \"fzprint-two-up: before good-enough\")\n                (if fit?\n                  [:hang\n                   (concat-no-nil arg-1\n                                  [[(blanks hanging-spaces) :none :whitespace]]\n                                  hanging)]\n                  (when (or hanging-lines flow-lines)\n                    (if (good-enough? caller\n                                      roptions\n                                      :none-two-up\n                                      hang-count\n                                      (- hanging-indent flow-indent)\n                                      hanging-lines\n                                      flow-lines)\n                      [:hang\n                       (concat-no-nil arg-1\n                                      [[(blanks hanging-spaces) :none\n                                        :whitespace]]\n                                      hanging)]\n                      (if justify-width\n                        nil\n                        [:flow\n                         (concat-no-nil arg-1\n                                        [[(str \"\\n\" (blanks (+ indent ind)))\n                                          :none :indent]]\n                                        flow)])))))))\n        :else [:flow ; The following always flows things of 3 or more\n               ; (absent modifers).  If the lloc is a single char,\n               ; then that can look kind of poor.  But that case\n               ; is rare enough that it probably isn't worth dealing\n               ; with.  Possibly a hang-remaining call might fix it.\n               (concat-no-nil\n                 arg-1\n                 (fzprint-flow-seq options\n                                   (+ indent ind)\n                                   (if modifier? (nnext pair) (next pair))\n                                   :force-nl\n                                   :newline-first))]))))\n\n;;\n;; # Two-up printing\n;;\n\n(defn fzprint-justify-width\n  \"Figure the width for a justification of a set of pairs in coll.  \n  Also, decide if it makes any sense to justify the pairs at all.\n  For instance, they all need to be one-line.\"\n  [caller {{:keys [justify?]} caller, :as options} ind coll]\n  (let [firsts (remove nil?\n                 (map #(when (> (count %) 1) (fzprint* options ind (first %)))\n                   coll))\n        #_(def just firsts)\n        style-seq (map (partial style-lines options ind) firsts)\n        #_(def styleseq style-seq)\n        each-one-line? (reduce #(when %1 (= (first %2) 1)) true style-seq)\n        #_(def eol each-one-line?)\n        justify-width (when each-one-line?\n                        (reduce #(max %1 (second %2)) 0 style-seq))]\n    (when justify-width (- justify-width ind))))\n\n(defn fit-within?\n  \"Take a size and a collection of vectors with two or more elements\n  per vector.  The elements are zlocs, the vectors are not.  Return\n  the remaining character count or nil if it for sure doesn't fit.\n  In order to be sure it doesn't fit, this version doesn't assume\n  *any* separators, so it really underestimates the size.\"\n  ([size coll depth]\n   (reduce (fn [size element]\n             (or (if (= depth 0)\n                   (fit-within? size element (inc depth))\n                   (let [remaining (- size (count (zstring element)))]\n                     (when (pos? remaining) remaining)))\n                 (reduced nil)))\n     size\n     coll))\n  ([size coll] (fit-within? size coll 0)))\n\n(defn remove-hangflow\n  \"Convert a hangflow style-vec to a regular style-vec.\"\n  [hf-style-vec]\n  (when hf-style-vec (map second hf-style-vec)))\n\n(defn fzprint-map-two-up\n  \"Accept a sequence of pairs, and map fzprint-two-up across those pairs.\n  If you have :one-line? set, this will return nil if it is way over,\n  but it can't accurately tell exactly what will fit on one line, since\n  it doesn't know the separators and such.  So, :one-line? true is a\n  performance optimization, so it doesn't do a whole huge map just to\n  find out that it could not possibly have fit on one line.  So, this\n  returns a sequence of style-vecs, where the indentation for the\n  stuff inside of the pairs is already there, but the separators of\n  the style-vecs (including indentation and commas) is done by the\n  caller of fzprint-map-two-up. Always returns a sequence of vector pairs:\n  [[:hang <style-vec-for-one-pair>] [:flow <style-vec-for-one-pair>] ...].\n  If you want a style vec instead, call remove-hangflow on the return \n  from fzprint-map-two-up.  This will use one-line?, but not check to see\n  that it actually fits.  If you care about that, then you should check the\n  return yourself.  It will, however, make an estimate of whether or not\n  it will fit and if it clearly doesn't, it will return a nil.\"\n  [caller\n   {{:keys [justify? force-nl?]} caller,\n    :keys [width rightcnt one-line? parallel?],\n    :as options} ind commas? coll]\n  (let [caller-map (caller options)\n        len (count coll)\n        justify-width (when (and justify? (not one-line?))\n                        (fzprint-justify-width caller options ind coll))\n        caller-options (when justify-width (options caller))]\n    (dbg-print options\n               \"fzprint-map-two-up: one-line?\" (:one-line? options)\n               \"justify?:\" justify?)\n    ; If it is one-line? and force-nl? and there is more than one thing,\n    ; this can't work.\n    (when (not (and one-line? force-nl? (> len 1)))\n      #_(def jo [])\n      (loop [justify-width justify-width\n             justify-options\n               (if justify-width\n                 (-> options\n                     (merge-deep {caller (caller-options :justify-hang)})\n                     (merge-deep {:tuning (caller-options :justify-tuning)}))\n                 options)]\n        #_(def jo (conj jo [justify-width justify-options]))\n        (let [beginning-coll (butlast coll)\n              beginning-remaining\n                (if one-line? (fit-within? (- width ind) beginning-coll) true)\n              _ (dbg options\n                     \"fzprint-map-two-up: remaining:\" (- width ind)\n                     \"beginning-remaining:\" beginning-remaining)\n              ;\"(butlast coll):\" (butlast coll))\n              beginning (when beginning-remaining\n                          (zpmap options\n                                 (partial fzprint-two-up\n                                          caller\n                                          justify-options\n                                          ind\n                                          commas?\n                                          justify-width\n                                          nil)\n                                 beginning-coll))\n              ; this line will fix the justify, but not necessarily\n              ; the rest of the problems with hangflow output -- like\n              ; the style-lines below.\n              beginning (if (contains-nil? beginning) nil beginning)\n              end-coll [(last coll)]\n              end-remaining (if one-line?\n                              (and beginning\n                                   (fit-within? (- beginning-remaining rightcnt)\n                                                end-coll))\n                              true)\n              _ (dbg options\n                     \"fzprint-map-two-up: beginning-remaining:\"\n                       beginning-remaining\n                     \"rightcnt:\" rightcnt\n                     \"end-remaining:\" end-remaining)\n              ;\"(last coll):\" (last coll))\n              end (when end-remaining\n                    (when-let [end-result (fzprint-two-up caller\n                                                          justify-options\n                                                          ind\n                                                          commas?\n                                                          justify-width\n                                                          :rightmost-pair\n                                                          (first end-coll))]\n                      [end-result]))\n              result (cond (= len 1) end\n                           :else (concat-no-nil beginning end))]\n          (dbg-pr options\n                  \"fzprint-map-two-up: len:\" len\n                  \"(nil? end):\" (nil? end)\n                  \"end:\" end\n                  \"(nil? beginning):\" (nil? beginning)\n                  \"beginning:\" beginning\n                  \"(count end):\" (count end)\n                  \"(count beginnging):\" (count beginning)\n                  \"justify-width:\" justify-width\n                  \"result:\" result)\n          ; if we got a result or we didn't but it wasn't because we\n          ; were trying to justify things\n          (if (or result (not justify-width))\n            result\n            ; try again, without justify-width\n            (recur nil options)))))))\n\n;;\n;; ## Support sorting of map keys\n;;\n\n(defn compare-keys\n  \"Do a key comparison that works well for numbers as well as\n  strings.\"\n  [x y]\n  (cond (and (number? x) (number? y)) (compare x y)\n        :else (compare (str x) (str y))))\n\n(defn compare-ordered-keys\n  \"Do a key comparison that places ordered keys first.\"\n  [key-value zdotdotdot x y]\n  (cond (and (key-value x) (key-value y)) (compare (key-value x) (key-value y))\n        (key-value x) -1\n        (key-value y) +1\n        (= zdotdotdot x) +1\n        (= zdotdotdot y) -1\n        :else (compare-keys x y)))\n\n(defn order-out\n  \"A variety of sorting and ordering options for the output of\n  partition-all-2-nc.  It can sort, which is the default, but if\n  the caller has a key-order vector, it will extract any keys in\n  that vector and place them first (in order) before sorting the\n  other keys.  If sorting is not called for, does nothing.\"\n  [caller\n   {{:keys [sort? sort-in-code? key-order key-value]} caller,\n    :keys [in-code?],\n    :as options} access out]\n  (if (and sort? (if in-code? sort-in-code? true))\n    (sort #((partial compare-ordered-keys (or key-value {}) (zdotdotdot))\n              (zsexpr (access %1))\n              (zsexpr (access %2)))\n          out)\n    out))\n\n#_(defn pair-element?\n    \"This checks to see if an element should be considered part of a\n  pair if it comes between other elements, and a single element on\n  its own if it would otherwise be the first part of a pair.  Mostly\n  this will trigger on comments, but a #_(...) element will also\n  trigger this.\"\n    [zloc]\n    (or (zcomment? zloc) (zuneval? zloc)))\n\n(defn pair-element?\n  \"This checks to see if an element should be considered part of a\n  pair if it comes between other elements, and a single element on\n  its own if it would otherwise be the first part of a pair.  Mostly\n  this will trigger on comments, but a #_(...) element will also\n  trigger this, as will a newline if one appears.\"\n  [zloc]\n  (or (zcomment? zloc) (zuneval? zloc) (znewline? zloc)))\n\n(defn middle-element?\n  \"This checks to see if an element should be considered the middle element\n  of a pair.  At some point, we can expand this, but for now there is only\n  one middle element.\"\n  [{:keys [in-code?], :as options} zloc]\n  ;  nil)\n  (when (= in-code? \"condp\") (= (zstring zloc) \":>>\")))\n\n;;\n;; # Ignore keys in maps\n;;\n\n(defn remove-key-seq\n  \"If given a non-collection, simply does a dissoc of the key, but\n  if given a sequence of keys, will remove the final one.\"\n  [m ks]\n  (if (coll? ks)\n    (let [this-key (first ks)\n          next-key (next ks)]\n      (if next-key\n        (let [removed-map (remove-key-seq (get m this-key) (next ks))]\n          (if (empty? removed-map)\n            (dissoc m this-key)\n            (assoc m this-key removed-map)))\n        (dissoc m this-key)))\n    (dissoc m ks)))\n\n(defn ignore-key-seq-silent\n  \"Given a map and a key sequence, remove that key sequence if\n  it appears in the map, and terminate the reduce if it changes\n  the map.\"\n  [m ks]\n  (if (coll? ks)\n    (if (= (get-in m ks :zprint-not-found) :zprint-not-found)\n      m\n      (remove-key-seq m ks))\n    (if (= (get m ks :zprint-not-found) :zprint-not-found) m (dissoc m ks))))\n\n(defn ignore-key-seq\n  \"Given a map and a key sequence, remove that key sequence if\n  it appears in the map leaving behind a key :zprint-ignored, \n  and terminate the reduce if it changes the map.\"\n  [m ks]\n  (if (coll? ks)\n    (if (= (get-in m ks :zprint-not-found) :zprint-not-found)\n      m\n      (assoc-in m ks :zprint-ignored))\n    (if (= (get m ks :zprint-not-found) :zprint-not-found)\n      m\n      (assoc m ks :zprint-ignored))))\n\n(defn map-ignore\n  \"Take a map and remove any of the key sequences specified from it.\n  Note that this only works for sexpressions, not for actual zippers.\"\n  [caller {{:keys [key-ignore key-ignore-silent]} caller, :as options} zloc]\n  (let [ignored-silent (if key-ignore-silent\n                         (reduce ignore-key-seq-silent zloc key-ignore-silent)\n                         zloc)\n        ignored (if key-ignore\n                  (reduce ignore-key-seq ignored-silent key-ignore)\n                  ignored-silent)]\n    ignored))\n\n;;\n;; # Pre-processing for two-up printing\n;;\n\n(defn partition-all-2-nc\n  \"Input is (zseqnws zloc) or (zseqnws-w-nl) where one assumes that\n  these are pairs.  Thus, a seq of zlocs.  Output is a sequence of\n  seqs, where the seqs are usually pairs, but might be single things.\n  Doesn't pair up comments or #_(...) unevaled sexpressions.  The\n  ones before the first part of a pair come as a single element in\n  what would usually be a pair, and the ones between the first and\n  second parts of a pair come inside the pair.  There may be an\n  arbitrary number of elements between the first and second elements\n  of the pair (one per line).  If there are any comments or unevaled\n  sexpressions, don't sort the keys, as we might lose track of where\n  the comments or unevaled s-expressions go.\"\n  [options coll]\n  (when-not (empty? coll)\n    (let [max-length (get-max-length options)]\n      (loop [remaining coll\n             no-sort? nil\n             index 0\n             out (transient [])]\n        #_(dbg-pr options\n                  \"partition-all-2-nc: index:\" index\n                  \"no-sort?:\" no-sort?\n                  ;  \"out:\" (map (comp zstring first)(persistent! out))\n                  \"first remaining:\" (zstring (first remaining)))\n        (if-not remaining\n          [no-sort? (persistent! out)]\n          (let [[new-remaining pair-vec new-no-sort?]\n                  (cond\n                    (pair-element? (first remaining)) [(next remaining)\n                                                       [(first remaining)] true]\n                    (or (pair-element? (second remaining))\n                        (middle-element? options (second remaining)))\n                      (let [[comment-seq rest-seq]\n                              ;(split-with pair-element? (next remaining))\n                              (split-with #(or (pair-element? %)\n                                               (middle-element? options %))\n                                          (next remaining))]\n                        (if (first rest-seq)\n                          ; We have more to than just a comment, so we can\n                          ; pair it up between two things.\n                          [(next rest-seq)\n                           (into []\n                                 (concat [(first remaining)]\n                                         comment-seq\n                                         [(first rest-seq)])) true]\n                          ; This is the end, don't pair a comment up\n                          ; with something on the left if there isn't\n                          ; something on the right of it.\n                          [(next remaining) [(first remaining)] true]))\n                    (= (count remaining) 1) [(next remaining)\n                                             [(first remaining)] nil]\n                    :else [(next (next remaining))\n                           [(first remaining) (second remaining)] nil])]\n            #_(println \"partition-all-2-nc: count new-remaining:\"\n                       (count new-remaining))\n            (dbg-pr options\n                    \"partition-all-nc-new: pair-vec: first:\" (zstring\n                                                               (first pair-vec))\n                    \"first tag:\" (ztag (first pair-vec))\n                    \"count:\" (count pair-vec)\n                    \"last:\" (zstring (last pair-vec)))\n            (recur (cond (< (inc index) max-length) new-remaining\n                         (and (= (inc index) max-length) new-remaining)\n                           (list (zdotdotdot))\n                         :else nil)\n                   (or no-sort? new-no-sort?)\n                   (inc index)\n                   (conj! out pair-vec))))))))\n\n;;\n;; ## Multi-up printing pre-processing\n;;\n\n(defn cleave-end\n  \"Take a seq, and if it is contains a single symbol, simply return\n  it in another seq.  If it contains something else, remove any non\n  collections off of the end and return them in their own double seqs,\n  as well as return the remainder (the beginning) as a double seq.\"\n  [coll]\n  (if (or (zsymbol? (first coll)) (zreader-cond-w-symbol? (first coll)))\n    ;(symbol? (first coll))\n    (list coll)\n    (let [rev-seq (reverse coll)\n          [split-non-coll _]\n            ;(split-with (comp not zcoll?) rev-seq)\n            (split-with #(not (or (zcoll? %) (zreader-cond-w-coll? %)))\n                        rev-seq)\n          #_(def sncce split-non-coll)\n          split-non-coll (map list (reverse split-non-coll))\n          remainder (take (- (count coll) (count split-non-coll)) coll)]\n      (if (empty? remainder)\n        split-non-coll\n        (concat (list remainder) split-non-coll)))))\n\n(defn partition-all-sym\n  \"Similar to partition-all-2-nc, but instead of trying to pair things\n  up (modulo comments and unevaled expressions), this begins things\n  with a symbol, and then accumulates collections until the next symbol.\n  Returns a seq of seqs, where the first thing in each internal seq is\n  a protocol and the remaining thing(s) in that seq are the expressions that\n  follow.  If there is a single thing, it is returned in its own internal\n  seq. ((P (foo [this a) (bar-me [this] b) (barx [this y] (+ c y))) ...)\n  Made harder by the fact that the symbol might be inside of a #?() reader\n  conditional.  It handles comments before symbols on the symbol indent, \n  and the comments before the collections on the collection indent.  \n  Since it doesn't know how many collections there are, this is not trivial.  \n  Must be called with a sequence of z-things (these days called a zseq)\"\n  [options modifier-set coll]\n  #_(prn \"partition-all-sym-static:\" modifier-set)\n  #_(def scoll coll)\n  (dbg options \"partition-all-sym: coll:\" (map zstring coll))\n  (let [part-sym (partition-by\n                   #(or (zsymbol? %) (znil? %) (zreader-cond-w-symbol? %))\n                   coll)\n        split-non-coll (mapcat cleave-end part-sym)]\n    #_(def ps part-sym)\n    #_(def snc split-non-coll)\n    (loop [remaining split-non-coll\n           out (transient [])]\n      #_(prn \"remaining:\" (zprint.repl/pseqzseq remaining))\n      #_(prn \"out:\" (zprint.repl/pseqzseq out))\n      (if (empty? remaining)\n        (do #_(def pasn out) (persistent! out))\n        (let [[next-remaining new-out]\n                (cond\n                  (and (or (zsymbol? (ffirst remaining))\n                           (znil? (ffirst remaining))\n                           (zreader-cond-w-symbol? (ffirst remaining)))\n                       (not (empty? (second remaining)))\n                       ; This keeps a comment after a symbol with no\n                       ; collections from being associated with the previous\n                       ; symbol instead of standing on its own (as it should)\n                       (or (not\n                             (or (= (ztag (first (second remaining))) :comment)\n                                 (= (ztag (first (second remaining)))\n                                    :newline)))\n                           (zcoll? (last (second remaining)))))\n                    ; We have a non-collection in (first remaining) and\n                    ; we might have more than one, either because we just\n                    ; have a bunch of non-colls with no colls\n                    ; or because we have a modifier and then one or more\n                    ; non-colls (possibly with their own modifiers).\n                    (if (= (count (first remaining)) 1)\n                      ; original\n                      (do #_(prn \"a:\")\n                          ; We have a single non-coll, pull the next seq\n                          ; of one or more seqs into a seq with it.\n                          ; This is where we marry up the non-coll with\n                          ; all of its associated colls.\n                          [(nthnext remaining 2)\n                           (conj! out\n                                  (concat (first remaining)\n                                          (second remaining)))])\n                      (do #_(prn \"b:\")\n                          (if (and modifier-set\n                                   (modifier-set (zstring (ffirst remaining))))\n                            (if (= (count (first remaining)) 2)\n                              ; We have exactly two things in\n                              ; (first remaining), and the first one is\n                              ; both a non-coll and a modifier, so we know\n                              ; that the second one is a non-coll, and we\n                              ; know that we have a (second remaining) from\n                              ; above, so we bring the second remaining\n                              ; into the first remaining like we did\n                              ; above\n                              (do #_(prn \"d:\")\n                                  [(nthnext remaining 2)\n                                   (conj! out\n                                          (concat (first remaining)\n                                                  (second remaining)))])\n                              ; We have a modifier as the first thing in a\n                              ; seq of non-colls and then some more non-colls\n                              ; after that (since we don't have exactly two,\n                              ; as that case was caught above).\n                              ; Pull the next one into a seq with it.\n                              ; Do we need to check that the next one is\n                              ; also a non-coll?  That shouldn't be\n                              ; necessary,as you won't get colls in\n                              ;with non-colls.\n                              (do #_(prn \"c:\")\n                                  [(if (next (next (first remaining)))\n                                     (cons (next (next (first remaining)))\n                                           (next remaining))\n                                     (next remaining))\n                                   (conj! out\n                                          (list (ffirst remaining)\n                                                (second (first remaining))))]))\n                            ; we have more than one non-coll in first\n                            ; remaining, so pull one out, and leave the\n                            ; next ones for the next loop\n                            [(cons (next (first remaining)) (next remaining))\n                             (conj! out (list (ffirst remaining)))])))\n                  :else [(next remaining) (conj! out (first remaining))])]\n          (recur next-remaining new-out))))))\n\n(defn rstr-vec\n  \"Create an r-str-vec with, possibly, a newline at the beginning if\n  the last thing before it is a comment.\"\n  ([options ind zloc r-str r-type]\n   (let [nl (when (zcomment? (zlast zloc))\n              [[(str \"\\n\" (blanks ind)) :none :indent]])]\n     (concat nl\n             [[r-str (zcolor-map options (or r-type r-str))\n               (or r-type :right)]])))\n  ([options ind zloc r-str] (rstr-vec options ind zloc r-str nil)))\n\n(declare interpose-nl-hf)\n\n(defn fzprint-binding-vec\n  [{{:keys [nl-separator?]} :binding, :as options} ind zloc]\n  (dbg options \"fzprint-binding-vec: ind:\" ind \"zloc:\" (zstring (zfirst zloc)))\n  (let [options (rightmost options)\n        l-str \"[\"\n        r-str \"]\"\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options (inc ind) zloc r-str)]\n    (dbg-form options\n              \"fzprint-binding-vec exit:\"\n              (if (= (zcount zloc) 0)\n                (concat-no-nil l-str-vec r-str-vec)\n                (concat-no-nil\n                  l-str-vec\n                  (interpose-nl-hf\n                    (:binding options)\n                    (inc ind)\n                    (fzprint-map-two-up\n                      :binding\n                      options\n                      (inc ind)\n                      false\n                      (second (partition-all-2-nc options (zseqnws zloc)))))\n                  r-str-vec)))))\n\n(defn fzprint-hang\n  \"Try to hang something and try to flow it, and then see which is\n  better.  Has hang and flow indents. fzfn is the function to use \n  to do zloc.  Note what fzfn does with the input.  For instance,\n  fzprint-pairs does a (zmap-right identity zloc).  Presumably the\n  caller knows what the fzfn does, so it has to count the items\n  itself and pass it in here as zloc-count if it isn't just (zcount zloc).\"\n  [{:keys [one-line?], :as options} caller hindent findent fzfn zloc-count zloc]\n  #_(dbg options \"fzprint-hang:\" (zstring (zfirst zloc)) \"caller:\" caller)\n  (let [hanging (when (and (not= hindent findent)\n                           ((options caller) :hang?)\n                           ; If it starts with a newline, we aren't hanging\n                           ; it.  Comment, sure, but not newline.\n                           (not (znewline? (first zloc))))\n                  (concat-no-nil [[(str \" \") :none :whitespace]]\n                                 (fzfn (in-hang options) hindent zloc)))\n        #_(prn \"fzprint-hang: first hanging:\" (first hanging) (second hanging))\n        hanging (when (not= (nth (second hanging) 2) :comment-inline) hanging)\n        hang-count (or zloc-count (zcount zloc))\n        hr-lines (style-lines options (dec hindent) hanging)\n        ;flow (fzfn options findent zloc)\n        ]\n    (if (or (fzfit-one-line options hr-lines) one-line?)\n      hanging\n      (let [flow (concat-no-nil [[(str \"\\n\" (blanks findent)) :none :indent]]\n                                (fzfn options findent zloc))\n            _ (log-lines options \"fzprint-hang: flow:\" findent flow)\n            fd-lines (style-lines options findent flow)\n            _ (dbg options\n                   \"fzprint-hang: ending: hang-count:\" hang-count\n                   \"hanging:\" hanging\n                   \"flow:\" flow)\n            hr-good? (when (:hang? (caller options))\n                       (good-enough? caller\n                                     options\n                                     :none-hang\n                                     hang-count\n                                     (- hindent findent)\n                                     hr-lines\n                                     fd-lines))]\n        (if hr-good? hanging flow)))))\n\n(defn fzprint-pairs\n  \"Always prints pairs on a different line from other pairs. Takes a zloc-seq\"\n  [{{:keys [nl-separator?]} :pair, :as options} ind zloc-seq]\n  (dbg-pr options \"fzprint-pairs:\" (zstring (first zloc-seq)))\n  (dbg-form\n    options\n    \"fzprint-pairs: exit:\"\n    (interpose-nl-hf\n      (:pair options)\n      ind\n      (fzprint-map-two-up :pair\n                          options\n                          ind\n                          false\n                          (let [[_ part] (partition-all-2-nc options zloc-seq)]\n                            #_(def fp part)\n                            (dbg options\n                                 \"fzprint-pairs: partition:\"\n                                 (map (comp zstring first) part))\n                            part)))))\n\n(defn fzprint-extend\n  \"Print things with a symbol and collections following.  Kind of like with\n  pairs, but not quite. Takes a zloc-seq.\"\n  [{{:keys [nl-separator?]} :extend, :as options} ind zloc-seq]\n  #_(def fezloc zloc-seq)\n  (dbg options \"fzprint-extend:\" (zstring (first zloc-seq)))\n  (dbg-form\n    options\n    \"fzprint-extend: exit:\"\n    (interpose-nl-hf\n      (:extend options)\n      ind\n      (fzprint-map-two-up\n        :extend\n        (assoc options :fn-style :fn)\n        ind\n        false\n        (let [part (partition-all-sym options\n                                      (:modifiers (:extend options))\n                                      zloc-seq)]\n          #_(def fe part)\n          (dbg options \"fzprint-extend: partition:\" (map #(map zstring %) part))\n          part)))))\n\n(defn concatv!\n  \"Given a transient vector v, concatenate all of the other\n  elements in all of the remaining collections onto v.\"\n  [v & rest]\n  (loop [cols rest\n         out v]\n    (if cols\n      (recur (next cols)\n             (loop [col (first cols)\n                    out out]\n               (if col (recur (next col) (conj! out (first col))) out)))\n      out)))\n\n(defn fzprint-one-line\n  \"Do a fzprint-seq like thing, but do it incrementally and\n  if it gets too big, return nil.\"\n  [options ind zloc-seq]\n  (dbg-print options \"fzprint-one-line:\")\n  (let [seq-right zloc-seq\n        len (count seq-right)\n        last-index (dec len)\n        gt-1? (> (count seq-right) 1)\n        options (assoc options :one-line? true)]\n    (loop [zloc-seq seq-right\n           new-ind (long ind)\n           index 0\n           out (transient [])]\n      (if (empty? zloc-seq)\n        (do (dbg options \"fzprint-one-line: exiting count:\" (count out))\n            (persistent! out))\n        (let [next-zloc (first zloc-seq)\n              [sep next-options]\n                (cond ; this needs to come first in case there\n                      ; is only one\n                      ; element in the list -- it needs to have\n                      ; the rightcnt\n                      ; passed through\n                  (= index last-index) [(if-not (zero? index)\n                                          [[\" \" :none :whitespace]]) options]\n                  (= index 0) [nil (not-rightmost options)]\n                  :else [[[\" \" :none :whitespace]] (not-rightmost options)])\n              next-out (fzprint* next-options new-ind next-zloc)\n              _ (log-lines options \"fzprint-one-line:\" new-ind next-out)\n              [line-count max-width :as next-lines]\n                (style-lines options new-ind next-out)]\n          (if-not (fzfit-one-line next-options next-lines)\n            (do (dbg options\n                     \"fzprint-one-line: failed, too wide or too many lines!\")\n                nil)\n            (recur (next zloc-seq)\n                   (inc (long max-width))\n                   (inc index)\n                   (concatv! out sep next-out))))))))\n\n(defn fzprint-seq\n  \"Take a seq of a zloc, created by (zmap identity zloc) when zloc\n  is a collection, or (zmap-right identity zloc) when zloc is already\n  inside of a collection, and return a seq of the fzprint* of each \n  element.  No spacing between any of these elements. Note that this\n  is not a style-vec, but a seq of style-vecs of each of the elements.\n  These would need to be concatenated together to become a style-vec.\n  ind is either a constant or a seq of indents, one for each element in\n  zloc-seq.\"\n  [options ind zloc-seq]\n  (let [max-length (get-max-length options)\n        len (count zloc-seq)\n        zloc-seq (if (> len max-length)\n                   (concat (take max-length zloc-seq) (list (zdotdotdot)))\n                   zloc-seq)\n        len (count zloc-seq)]\n    (dbg options\n         \"fzprint-seq: (count zloc-seq):\" len\n         \"max-length:\" max-length\n         \"ind:\" ind)\n    (cond\n      (empty? zloc-seq) nil\n      (zero? max-length) [[[\"#?#\" (zcolor-map options :keyword) :element]]]\n      :else (let [left (zpmap options\n                              #(fzprint* (not-rightmost options) %1 %2)\n                              (if (coll? ind) ind (repeat ind))\n                              (butlast zloc-seq))\n                  right [(fzprint* options\n                                   (if (coll? ind) (last ind) ind)\n                                   (last zloc-seq))]]\n              (cond (= len 1) right\n                    :else (concat-no-nil left right))))))\n\n(declare precede-w-nl)\n\n(defn fzprint-flow-seq\n  \"Take a seq of a zloc, created by (zmap identity zloc) and return\n  a style-vec of the result.  Either it fits on one line, or it is\n  rendered on multiple lines.  You can force multiple lines with\n  force-nl?. If you want it to do less than everything in the\n  original zloc, modify the result of (zmap identity zloc) to just\n  contain what you want to print. ind is either a single indent,\n  or a seq of indents, one for each element in zloc-seq.  Don't\n  concatenate an indent/newline on to the beginning of the output\n  from this routine.  Let this routine do it for you, as it needs\n  to know one is there in order to properly deal with any newlines\n  in the actual stream.  Else you will get two where you only should\n  have one.\"\n  ([options ind zloc-seq force-nl? nl-first?]\n   (dbg options \"fzprint-flow-seq: count zloc-seq:\" (count zloc-seq))\n   (let [coll-print (fzprint-seq options ind zloc-seq)\n         ; If we are force-nl?, then don't bother trying one-line\n         one-line (apply concat-no-nil\n                    (interpose [[\" \" :none :whitespace]] coll-print))\n         _ (log-lines options \"fzprint-flow-seq:\" ind one-line)\n         one-line-lines (style-lines options ind one-line)]\n     (dbg-form options\n               \"fzprint-flow-seq: exit:\"\n               (if (and (not force-nl?) (fzfit-one-line options one-line-lines))\n                 one-line\n                 (apply concat-no-nil\n                   (precede-w-nl ind coll-print (not nl-first?)))))))\n  ([options ind zloc-seq] (fzprint-flow-seq options ind zloc-seq nil nil))\n  ([options ind zloc-seq force-nl?]\n   (fzprint-flow-seq options ind zloc-seq force-nl? nil)))\n\n\n(defn fzprint-hang-one\n  \"Try out the given zloc, and if it fits on the current line, just\n  do that. It might fit on the same line, as this may not be the rest\n  of the list that we are printing. If not, check it out with good-enough?\n  and do the best you can.  Three choices, really: fits on same line, \n  does ok as hanging, or better with flow. hindent is hang-indent, and \n  findent is flow-indent, and each contains the initial separator.  \n  Might be nice if the fn-style actually got sent to this fn.\"\n  [caller {:keys [one-line? width], {:keys [hang-avoid]} caller, :as options}\n   hindent findent zloc]\n  (dbg-pr options\n          \"fzprint-hang-one:\" (zstring zloc)\n          \" hindent:\" hindent\n          \"findent:\" findent)\n  (when (:dbg-hang options)\n    (println (dots (:pdepth options))\n             \"h1 caller:\"\n             caller\n             (zstring (if (zcoll? zloc) (zfirst zloc) zloc))))\n  (let [local-options (if (and (not one-line?) (not (:hang? (caller options))))\n                        (assoc options :one-line? true)\n                        options)\n        ; If we don't have an hindent, we better not be trying to hang\n        ; things -- in this case, we'll just flow.\n        hindent (or hindent findent)\n        hang-count (zcount zloc)\n        ; This implements :hang-avoid for fzprint-hang-one, instead of just\n        ; for fzprint-hang-remaining.  It didn't change the tests, but\n        ; removed some silly formatting when using :arg2 and small widths.\n        hanging (when (and (not= hindent findent)\n                           (or (not hang-avoid)\n                               (< hang-count (* (- width hindent) hang-avoid))))\n                  (fzprint* (in-hang local-options) hindent zloc))\n        hanging (concat-no-nil [[\" \" :none :whitespace]] hanging)\n        _ (log-lines options \"fzprint-hang-one: hanging:\" (dec hindent) hanging)\n        hr-lines (style-lines options (dec hindent) hanging)]\n    _\n    (dbg options\n         \"fzprint-hang-one: hr-lines:\" hr-lines\n         \"hang-count:\" hang-count)\n    ; if hanging is nil and one-line? is true, then we didn't fit\n    ; and should exit\n    ;\n    ; if hanging is nil and one-line? is nil, and hang? nil,\n    ; then we we don't hang and this didn't fit on the same\n    ; line and we should contine\n    ;\n    ; if hanging is true, then if one-line? is true and fzfit-one-line\n    ; is true, then we just go with hanging\n    ;\n    ; if hanging is true and if fzfit-one-line is true, then we go\n    ; with hanging.  Which is probably the same as just above.\n    ;\n    ; if hanging is true and if one-line? is nil, and if hang? is\n    ; nil, and fzfit-one-line is true then it fit on one line and we\n    ; should go with hanging.\n    ;\n    ;\n    ; Summary:\n    ;\n    ; go with hanging if:\n    ;\n    ;  o fzfit-one-line true\n    ;  o one-line? true\n    ;\n    ; Otherwise, see about flow too\n    ;\n    (if (or (fzfit-one-line options hr-lines) one-line?)\n      hanging\n      (let [flow (concat-no-nil [[(str \"\\n\" (blanks findent)) :none :indent]]\n                                (fzprint* options findent zloc))\n            _ (log-lines options \"fzprint-hang-one: flow:\" findent flow)\n            fd-lines (style-lines options findent flow)\n            _ (dbg options \"fzprint-hang-one: fd-lines:\" fd-lines)\n            _ (dbg options\n                   \"fzprint-hang-one: ending: hang-count:\" hang-count\n                   \"hanging:\" (pr-str hanging)\n                   \"flow:\" (pr-str flow))\n            hr-good? (and (:hang? (caller options))\n                          (good-enough? caller\n                                        options\n                                        :none-hang-one\n                                        hang-count\n                                        (- hindent findent)\n                                        hr-lines\n                                        fd-lines))]\n        (if hr-good? hanging flow)))))\n\n;;\n;; # Constant pair support\n;;\n\n(declare zcomment-or-newline?)\n\n(defn count-constant-pairs\n  \"Given a seq of zlocs, work backwards from the end, and see how\n  many elements are pairs of constants (using zconstant?).  So that\n  (... :a (stuff) :b (bother)) returns 4, since both :a and :b are\n  zconstant? true. This is made more difficult by having to skip\n  comments along the way as part of the pair check, but keep track\n  of the ones we skip so the count is right in the end.  We don't\n  expect any whitespace in this, because this seq should have been\n  produced by zmap-right or its equivalent, which already skips the\n  whitespace.\"\n  [seq-right]\n  (loop [seq-right-rev (reverse seq-right)\n         element-count 0\n         ; since it is reversed, we need a constant second\n         constant-required? nil\n         pair-size 0]\n    (let [element (first seq-right-rev)]\n      (if (empty? seq-right-rev)\n        ; remove potential elements of this pair, since we haven't\n        ; seen the end of it, and return\n        (- element-count pair-size)\n        (let [comment-or-newline? (zcomment-or-newline? element)]\n          (if (and (not comment-or-newline?)\n                   constant-required?\n                   (not (zconstant? element)))\n            ; we counted the right-hand and any comments of this pair, but it\n            ; isn't a pair so exit now with whatever we have so far\n            (- element-count pair-size)\n            (recur (next seq-right-rev)\n                   (inc element-count)\n                   (if comment-or-newline?\n                     constant-required?\n                     (not constant-required?))\n                   (if (and constant-required? (not comment-or-newline?))\n                     ; must be a constant, so start count over\n                     0\n                     (inc pair-size)))))))))\n\n(defn constant-pair\n  \"Argument is a zloc-seq.  Output is a [pair-seq non-paired-item-count],\n  if any.  If there are no pair-seqs, pair-seq must be nil, not an\n  empty seq.  This will largely ignore newlines.\"\n  [caller {{:keys [constant-pair? constant-pair-min]} caller, :as options}\n   seq-right]\n  (if constant-pair?\n    (let [paired-item-count (count-constant-pairs seq-right)\n          non-paired-item-count (- (count seq-right) paired-item-count)\n          _ (dbg options\n                 \"constant-pair: non-paired-items:\"\n                 non-paired-item-count)\n          pair-seq (when (>= paired-item-count constant-pair-min)\n                     (drop non-paired-item-count seq-right))]\n      [pair-seq non-paired-item-count])\n    [nil (count seq-right)]))\n\n;;\n;; # Take into account constant pairs\n;;\n\n(declare interpose-either-nl-hf)\n\n(declare fzprint-hang-remaining)\n\n(defn zcomment-or-newline?\n  \"If this zloc is a comment or a newline, return true.\"\n  [zloc]\n  (or (zcomment? zloc) (znewline? zloc)))\n\n(defn ensure-start-w-nl\n  \"Given a style-vec, ensure it starts with a newline.  If it doesn't,\n  then put one in.  We could take the whole newline, but the indent is\n  really the only unique thing.\"\n  [ind style-vec]\n  #_(def eswn style-vec)\n  #_(prn \"ensure-start-w-nl:\" style-vec)\n  (let [element-type (nth (first style-vec) 2)]\n    #_(prn \"ensure-start-w-nl:\" element-type)\n    (if (or (= element-type :newline) (= element-type :indent))\n      style-vec\n      (concat-no-nil [[(str \"\\n\" (blanks ind)) :none :indent]] style-vec))))\n\n(defn ensure-end-w-nl\n  \"Given a style-vec, ensure it ends with a newline.  If it doesn't,\n  then put one in.\"\n  [ind style-vec]\n  #_(def eewn style-vec)\n  #_(prn \"ensure-end-w-nl:\" style-vec)\n  (let [element-type (nth (last style-vec) 2)]\n    #_(prn \"ensure-end-w-nl:\" element-type)\n    (if (or (= element-type :newline) (= element-type :indent))\n      style-vec\n      (concat-no-nil style-vec [[(str \"\\n\" (blanks ind)) :none :indent]]))))\n\n(defn fzprint-hang-remaining\n  \"zloc-seq is a seq of zlocs of a collection.  We already know\n  that the given zloc won't fit on the current line. [Besides, we\n  ensure that if there are two things remaining anyway. ???] So\n  now, try hanging and see if that is better than flow.  Unless\n  :hang? is nil, in which case we will just flow.  hindent is\n  hang-indent, and findent is flow-indent. This should never be\n  called with :one-line because this is only called from fzprint-list*\n  after the one-line processing is done. If the hindent equals the\n  flow indent, then just do flow.  Do only zloc-count non-whitespace\n  elements of zloc-seq if it exists.\"\n  ([caller\n    {:keys [dbg? width],\n     {:keys [hang? constant-pair? constant-pair-min hang-avoid hang-expand\n             hang-diff nl-separator? respect-nl?]}\n       caller,\n     :as options} hindent findent zloc-seq fn-style zloc-count]\n   (when (:dbg-hang options)\n     (println (dots (:pdepth options)) \"hr:\" (zstring (first zloc-seq))))\n   (dbg options\n        \"fzprint-hang-remaining first:\" (zstring (first zloc-seq))\n        \"hindent:\" hindent\n        \"findent:\" findent\n        \"caller:\" caller\n        \"nl-separator?:\" nl-separator?\n        \"respect-nl?:\" respect-nl?\n        \"(count zloc-seq):\" (count zloc-seq))\n   ; (in-hang options) slows things down here, for some reason\n   (let [seq-right zloc-seq\n         seq-right (if zloc-count (take zloc-count seq-right) seq-right)\n         [pair-seq non-paired-item-count]\n           (constant-pair caller options seq-right)\n         _ (dbg options\n                \"fzprint-hang-remaining count pair-seq:\"\n                (count pair-seq))\n         flow\n           (#?@(:clj [zfuture options]\n                :cljs [do])\n            (let [flow-result (if-not pair-seq\n                                ; We don't have any constant pairs\n                                (fzprint-flow-seq options\n                                                  findent\n                                                  seq-right\n                                                  :force-nl\n                                                  :nl-first)\n                                (if (not (zero? non-paired-item-count))\n                                  ; We have constant pairs, ; but they follow\n                                  ; some stuff that isn't paired.\n                                  ; Do the elements that are not pairs\n                                  (concat-no-nil\n                                    (ensure-end-w-nl\n                                      findent\n                                      (fzprint-flow-seq\n                                        (not-rightmost options)\n                                        findent\n                                        (take non-paired-item-count seq-right)\n                                        :force-nl\n                                        :nl-first))\n                                    ; The elements that are constant pairs\n                                    (fzprint-pairs options findent pair-seq))\n                                  ; This code path is where we have all constant\n                                  ; pairs.\n                                  (fzprint-pairs options findent pair-seq)))]\n              ; Skip the first line when doing the calcuation so that\n              ; good-enough doesn't change the layout from the original\n              [flow-result\n               (style-lines\n                 options\n                 findent\n                 (if (not pair-seq) (next flow-result) flow-result))]))\n         #_(dbg options\n                \"fzprint-hang-remaining: *=*=*=*=*=*\" (zstring (first zloc-seq))\n                \"hindent:\" hindent\n                \"findent:\" findent\n                \"caller:\" caller\n                \"hang?\" hang?\n                \"hang-diff\" hang-diff)\n         ; Now determine if there is any point in doing a hang, because\n         ; if the flow is beyond the expand limit, there is really no\n         ; chance that the hang is not beyond the expand limit.\n         ; This is what good-enough? does:\n         ;  (<= (/ (dec p-lines) p-count) hang-expand)\n         ;  Also need to account for the indent diffs.\n         ; Would be nice to move this into a common routine, since this\n         ; duplicates logic in good-enough?\n         ;\n         ; Yes, and this caused a proble when I put in the\n         ; hang-if-equal-flow? option in good-enough, so that now\n         ; we can't cancel the hang even though we are beyond the hang-expand\n         ; because the hang might be the same as the flow, and in that case\n         ; we don't really care how long the hang-expand is. We could make\n         ; this a feature, by having a large-ish hang-expand and having it\n         ; override hang-if-equal-flow.  If we do that, we have to reorder\n         ; the checks in good-enough to put the hang-expand check first.\n         ; I can't see any great reason for doing a flow if the hang and\n         ; flow are equal, though, so we won't do that now.  And this\n         ; code comes out.\n         ;\n         [flow flow-lines] (zat options flow)\n         _ (dbg options\n                \"fzprint-hang-remaining: first hang?\" hang?\n                \"hang-avoid\" hang-avoid\n                \"findent:\" findent\n                \"hindent:\" hindent\n                \"(count seq-right):\" (count seq-right)\n                \"thing:\" (when hang-avoid (* (- width hindent) hang-avoid)))\n         hang? (and hang?\n                    ; This is a key for \"don't hang no matter what\", it isn't\n                    ; about making it prettier. People call this routine with\n                    ; these values equal to ensure that it always flows.\n                    (not= hindent findent)\n                    ; This is not the original, below.\n                    ; If we are doing respect-nl?, then the count of seq-right\n                    ; is going to be a lot more, even if it doesn't end up\n                    ; looking different than before.  So, perhaps we should\n                    ; adjust hang-avoid here?  Perhaps double it or something?\n                    (or (not hang-avoid)\n                        (< (count seq-right) (* (- width hindent) hang-avoid)))\n                    ; If the first thing in the flow is a comment, maybe we\n                    ; shouldn't be hanging anything?\n                    (not= (nth (first flow) 2) :comment-inline)\n                    ;flow-lines\n                    ;;TODO make this uneval!!!\n                    #_(or (<= (- hindent findent) hang-diff)\n                          (<= (/ (dec (first flow-lines)) (count seq-right))\n                              hang-expand)))\n         _ (dbg options \"fzprint-hang-remaining: second hang?\" hang?)\n         hanging\n           (#?@(:clj [zfuture options]\n                :cljs [do])\n            (let [hang-result\n                    (when hang?\n                      (if-not pair-seq\n                        ; There are no paired elements\n                        (fzprint-flow-seq (in-hang options)\n                                          hindent\n                                          seq-right\n                                          :force-nl\n                                          nil ;nl-first?\n                          )\n                        (if (not (zero? non-paired-item-count))\n                          (concat-no-nil\n                            ; The elements that are not paired\n                            (dbg-form options\n                                      \"fzprint-hang-remaining: mapv:\"\n                                      (ensure-end-w-nl\n                                        hindent\n                                        (fzprint-flow-seq\n                                          (not-rightmost (in-hang options))\n                                          hindent\n                                          (take non-paired-item-count seq-right)\n                                          :force-nl\n                                          nil ;nl-first?\n                                          )))\n                            ; The elements that are paired\n                            (dbg-form options\n                                      \"fzprint-hang-remaining: fzprint-hang:\"\n                                      (fzprint-pairs (in-hang options)\n                                                     hindent\n                                                     pair-seq)))\n                          ; All elements are paired\n                          (fzprint-pairs (in-hang options) hindent pair-seq))))]\n              [hang-result (style-lines options hindent hang-result)]))\n         ; We used to calculate hang-count by doing the hang an then counting\n         ; the output.  But ultimately this is simple a series of map calls\n         ; to the elements of seq-right, so we go right to the source for this\n         ; number now.  That let's us move the interpose calls above this\n         ; point.\n         [hanging hanging-lines] (zat options hanging)\n         hang-count (count seq-right)\n         _ (log-lines options\n                      \"fzprint-hang-remaining: hanging:\"\n                      hindent\n                      hanging)\n         _ (dbg options\n                \"fzprint-hang-remaining: hanging-lines:\" hanging-lines\n                \"hang-count:\" hang-count)]\n     (dbg options \"fzprint-hang-remaining: flow-lines:\" flow-lines)\n     (when dbg?\n       (if (zero? hang-count)\n         (println \"hang-count = 0:\" (str (map zstring zloc-seq)))))\n     (log-lines options \"fzprint-hang-remaining: flow\" findent flow)\n     (when flow-lines\n       (if (good-enough? caller\n                         options\n                         fn-style\n                         hang-count\n                         (- hindent findent)\n                         hanging-lines\n                         flow-lines)\n         (concat-no-nil [[\" \" :none :whitespace]] hanging)\n         (ensure-start-w-nl findent flow)))))\n  ([caller options hindent findent zloc fn-style]\n   (fzprint-hang-remaining caller options hindent findent zloc fn-style nil)))\n\n;;\n;; # Find out and print what comes before the next element\n;;\n\n(defn fzprint-get-zloc-seq\n  \"Get the zloc seq, with or without newlines, as indicated by the options.\"\n  [caller options zloc]\n  (if (:respect-nl? (caller options))\n    (zmap-w-nl identity zloc)\n    (zmap identity zloc)))\n\n(defn newline-or-comment?\n  \"Given an zloc, is it a newline or a comment?\"\n  [zloc]\n  (when zloc\n    (let [zloc-tag (ztag zloc)]\n      (or (= zloc-tag :newline) (= zloc-tag :comment)))))\n\n(defn remove-last-newline\n  \"Given a seq of style-vecs, look at the last one, and if it is a\n  :newline, then remove it.  But the last one might be a single\n  one, in which case we will remove the whole thing, and it might be\n  the last one in a sequence, in which case we will remove just that\n  one.  If there is nothing left, return [[[\\\"\\\" :none :none]]].\"\n  [ssv]\n  #_(prn \"remove-last-newline:\" ssv)\n  (let [last-style-vec (last ssv)]\n    (if-not (= (nth (last last-style-vec) 2) :newline)\n      ssv\n      (let [last-len (count last-style-vec)\n            total-len (count ssv)\n            remove-one\n              (concat (butlast ssv)\n                      (if (= last-len 1) [] (vector (butlast last-style-vec))))]\n        (if (empty? remove-one) [[[\"\" :none :none]]] remove-one)))))\n\n(defn add-newline-to-comment\n  \"Given [[[\\\";stuff\\\" :none :comment]]] or \n  [[[\\\";bother\\\" :none :comment-inline 1]]] add [\\\"\\n\\\" :none :newline]\n  to the inside of it.\"\n  [indent fzprint*-return]\n  (let [the-type (nth (first fzprint*-return) 2)]\n    (if (or (= the-type :comment) (= the-type :comment-inline))\n      (concat fzprint*-return [[(str \"\\n\" (blanks indent)) :none :newline]])\n      fzprint*-return)))\n\n(defn gather-up-to-next-zloc\n  \"Given a zloc-seq, gather newlines and comments up to the next\n  zloc into a seq.  Returns [seq next-zloc next-count].\"\n  [zloc-seq]\n  (loop [nloc-seq zloc-seq\n         out []\n         next-count 0]\n    (if (not (newline-or-comment? (first nloc-seq)))\n      [out (first nloc-seq) next-count]\n      (recur (next nloc-seq) (conj out (first nloc-seq)) (inc next-count)))))\n\n(defn fzprint-up-to-next-zloc\n  \"Using the information returned from fzprint-up-to-first-zloc or\n  fzprint-up-to-next-zloc, find the next zloc and return \n  [pre-next-style-vec next-zloc next-count zloc-seq]\"\n  [caller options ind [_ _ current-count zloc-seq :as next-data]]\n  (let [starting-count (inc current-count)\n        nloc-seq (nthnext zloc-seq starting-count)]\n    (if-not (= (:ztype options) :zipper)\n      [:noseq (first nloc-seq) starting-count zloc-seq]\n      (let [[pre-next-zloc-seq next-zloc next-count] (gather-up-to-next-zloc\n                                                       nloc-seq)\n            next-count (+ starting-count next-count)]\n        (if (empty? pre-next-zloc-seq)\n          ; The normal case -- nothing before the first interesting zloc\n          [:noseq next-zloc next-count zloc-seq]\n          ; There were newlines or comments (or both) before the first\n          ; interesting zloc\n          (let [coll-print (fzprint-seq options ind pre-next-zloc-seq)\n                ; We need to make comments print right, and they have lost their\n                ; newlines\n                coll-print (map (partial add-newline-to-comment ind) coll-print)\n                ; We aren't trying to interpose anything here, we are just\n                ; trying to print the stuff we have in a way that will work.\n                ; Remove the last newline if we are not the first thing\n                coll-print (if (not= starting-count 0)\n                             (remove-last-newline coll-print)\n                             coll-print)\n                coll-out (apply concat-no-nil coll-print)\n                ; If we are down inside a list and  the first thing is a\n                ; comment, ensure we start with a newline.  If it is an\n                ; inline comment, then it will get fixed later.\n                coll-out (if (and (not= starting-count 0)\n                                  (let [first-type (nth (first coll-out) 2)]\n                                    (or (= first-type :comment)\n                                        (= first-type :comment-inline))))\n                           (ensure-start-w-nl ind coll-out)\n                           coll-out)\n                ; Eensure that we end with a newline if we are the first\n                ; thing\n                coll-out (if (not= starting-count 0)\n                           coll-out\n                           (ensure-end-w-nl ind coll-out))\n                ; Make sure it ends with a newline, since all comments and\n                ; newlines better end with a newline.  But how could it\n                ; not end with a newline?  We only put comments and newlines\n                ; in here, and added newlines to comments.\n                #_#_coll-out (ensure-end-w-nl ind coll-out)]\n            [coll-out next-zloc next-count zloc-seq]))))))\n\n(defn fzprint-up-to-first-zloc\n  \"Returns [pre-first-style-vec first-zloc first-count zloc-seq], where\n  pre-first-style-vec will be :noseq if there isn't anything, and first-count\n  is what you give to nthnext to get to the first-zloc in zloc-seq.\"\n  [caller options ind zloc]\n  (if-not (= (:ztype options) :zipper)\n    [:noseq (first zloc) 0 zloc]\n    (let [zloc-seq (fzprint-get-zloc-seq caller options zloc)]\n      ; Start at -1 so that when fzprint-up-to-next-zloc skips, it goes\n      ; to zero.\n      (fzprint-up-to-next-zloc caller options ind [nil nil -1 zloc-seq]))))\n\n(defn get-zloc-seq-right\n  \"Using return from fzprint-up-to-first-zloc or fzprint-up-to-next-zloc,\n  [pre-next-style-vec next-zloc next-count zloc-seq], return a zloc-seq\n  pointer to just beyond the specific zloc which was found by the\n  fzprint-up-to-first or fzprint-up-to-next call.  You don't give this\n  a number, you give it the data structure from the thing that you found.\"\n  [[_ _ next-count zloc-seq :as input-data]]\n  (if (>= next-count (count zloc-seq))\n    (throw (#?(:clj Exception.\n               :cljs js/Error.)\n            (str \"get-zloc-seq-right input data inconsistent:\" input-data)))\n    (let [zloc-seq (nthnext zloc-seq (inc next-count))]\n      (dbg-pr \"get-zloc-seq-right:\" (map zstring zloc-seq))\n      zloc-seq)))\n\n;;\n;; # Indent-only support\n;;\n\n(defn at-newline?\n  \"Is this a newline or equivalent?  Comments and newlines are both\n  newlines for the purposed of this routine.\"\n  [zloc]\n  (let [this-tag (ztag zloc)] (or (= this-tag :comment) (= this-tag :newline))))\n\n(defn next-newline\n  \"Given a zloc that is down inside of a collection, presumably\n  a list, return a vector containing the number of printing elements\n  we had to traverse to get to it as well as the newline.\"\n  [zloc]\n  (loop [nloc zloc\n         index 0]\n    #_(prn \"next-newline:\" (zstring nloc) \"tag:\" (zprint.zutil/tag nloc))\n    (let [next-right (zprint.zutil/right* nloc)]\n      (if next-right\n        (if (at-newline? nloc)\n          [index nloc]\n          (recur (zprint.zutil/right* nloc)\n                 (if-not (zprint.zutil/whitespace? nloc) (inc index) index)))\n        [index nloc]))))\n\n(defn length-after-newline\n  \"Given a string, return the number of characters to the right\n  of any newlines in the string.  Will return nil if no newlines\n  in the string.\"\n  [s]\n  (let [nl-split (clojure.string/split (str s \" \") #\"\\n\")\n        nl-num (dec (count nl-split))]\n    (when-not (zero? nl-num) (dec (count (last nl-split))))))\n\n(defn tag-l-size\n  \"Given a tag into which you can go down from rewrite-clj, which must be\n  a collection of some kind, return the size the l-str.  All of the tag\n  values into which you can go down must be in this list for indent-before\n  to work correctly.  It uses these values when it steps up out of one of\n  these things to see how big the thing would have been if it showed up\n  as characters.\"\n  [t]\n  (case t\n    :list 1\n    :vector 1\n    :set 2\n    :map 1\n    :uneval 2\n    :reader-macro 1\n    :meta 1\n    :quote 1\n    :syntax-quote 1\n    :fn 2\n    :unquote 1\n    :deref 1\n    :namespaced-map 1\n    0))\n\n(defn left-or-up\n  \"Take a zloc and move left if possible, or move up if necessary.\n  Return a vector with [up-size new-zloc]\"\n  [zloc]\n  (loop [ploc zloc\n         total-up 0]\n    #_(prn \"left-or-up: ploc:\" (zstring ploc) \"total-up:\" total-up)\n    (let [next-left (zprint.zutil/left* ploc)]\n      (if next-left\n        [total-up next-left]\n        ; can't go left, what about up?\n        (let [moving-up (zprint.zutil/up* ploc)\n              up-tag (when moving-up (zprint.zutil/tag moving-up))\n              up-size (tag-l-size up-tag)]\n          #_(prn \"left-or-up: up-tag:\" up-tag)\n          (if-not moving-up\n            ; can't go up, ran out of expression\n            [total-up nil]\n            (recur moving-up (+ total-up up-size))))))))\n\n(defn length-before\n  \"Given a zloc, find the amount of printing space before it on its\n  current line.\"\n  [zloc]\n  (let [[up-size next-zloc] (left-or-up zloc)]\n    (loop [ploc next-zloc\n           indent-before up-size]\n      (if-not ploc\n        indent-before\n        ; we assume we have a ploc\n        (let [zstr (if ploc (zstring ploc) \"\")\n              length-right-of-newline (length-after-newline zstr)\n              [up-size next-zloc] (left-or-up ploc)]\n          #_(prn \"length-before: (nil? ploc):\" (nil? ploc)\n                 \"zstr:\" zstr\n                 \"up-size:\" up-size\n                 \"length-right-of-newline:\" length-right-of-newline\n                 \"(tag ploc):\" (zprint.zutil/tag ploc)\n                 \"ploc:\" (zstring ploc)\n                 \"next-zloc:\" (zstring next-zloc))\n          (if length-right-of-newline\n            ; hit a newline\n            (+ length-right-of-newline indent-before)\n            (recur next-zloc (+ indent-before (count zstr) up-size))))))))\n\n(defn next-actual\n  \"Return the next actual element, ignoring comments and whitespace\n  and everything else but real elements.\"\n  [zloc]\n  (loop [nloc zloc]\n    (if-not nloc\n      nloc\n      (let [next-nloc (zprint.zutil/zrightnws nloc)\n            next-tag (zprint.zutil/tag next-nloc)]\n        (if-not (or (= next-tag :newline) (= next-tag :comment))\n          next-nloc\n          (recur next-nloc))))))\n\n(defn first-actual\n  \"Return the first actual element, ignoring comments and whitespace\n  and everything else but real elements.\"\n  [zloc]\n  (if (at-newline? zloc) (next-actual zloc) zloc))\n\n(defn hang-zloc?\n  \"Should we hang this zloc, or flow it.  We assume that we are at\n  the start of the collection (though this could be generalized to\n  deal with other starting locations easily enough).  Return true\n  if we should hang it based just on the information in the zloc\n  itself.  The criteria are: If there is a newline after the second\n  thing in the zloc, and the amount of space prior to the third thing\n  is the same as the amount of space prior to the second thing, then\n  the incoming zloc was hung and we should do the same. Of course, it\n  would also only be hung if the second thing was on the same line as\n  the first thing.\"\n  [zloc]\n  (let [zloc (first-actual zloc) ; skip comments/newlines at start\n        [count-prior-to-newline newline] (next-newline zloc)]\n    #_(prn \"hang-zloc?: count-prior...:\" count-prior-to-newline\n           \"zloc:\" (zstring zloc))\n    ; Are the first two real things on the same line?\n    (if (< count-prior-to-newline 2)\n      ; no -- then it can't be a hang\n      false\n      (let [second-element (zprint.zutil/zrightnws\n                             (if (zprint.zutil/whitespace? zloc)\n                               (zprint.zutil/zrightnws zloc)\n                               zloc))\n            second-indent (length-before second-element)\n            third-element (next-actual second-element)\n            third-indent (length-before third-element)]\n        #_(prn \"hang-zloc?: second-element:\" (zstring second-element)\n               \"second-indent:\" second-indent\n               \"third-element:\" (zstring third-element)\n               \"third-tag:\" (zprint.zutil/tag third-element)\n               \"third-indent:\" third-indent)\n        (and second-element third-element (= second-indent third-indent))))))\n\n(defn indent-shift\n  \"Take a style-vec that was once output from indent-zmap, and fix\n  up all of the :indent elements in it by adding (- actual-ind ind)\n  to them.  If we find a multiple thing in here, call indent-shift\n  recursively with the ind and cur-ind that is approprite.  All of\n  the actual indents are correct already -- all we are doing is\n  setting up their base.  There is no attempt to determine if we\n  are exceeding any configured width.\"\n  [caller options ind actual-ind svec]\n  (let [shift-ind actual-ind\n        #_(- actual-ind ind)]\n    (dbg-pr options\n            \"indent-shift: ind:\" ind\n            \"actual-ind:\" actual-ind\n            \"shift-ind:\" shift-ind\n            \"svec:\" svec)\n    (loop [cur-seq svec\n           cur-ind actual-ind\n           out []]\n      (if-not cur-seq\n        out\n        (let [this-seq (first cur-seq)\n              new-seq (if (vector? (first this-seq))\n                        ; is this ind correct?\n                        (indent-shift caller options ind cur-ind this-seq)\n                        (let [[s color type] this-seq]\n                          (if (= type :indent)\n                            [(str s (blanks shift-ind)) color type]\n                            this-seq)))\n              _ (dbg-pr options\n                        \"indent-shift: cur-ind:\" cur-ind\n                        \"this-seq:\" this-seq\n                        \"new-seq:\" new-seq)\n              ; Shouldn't this be (inc cur-ind)?\n              [linecnt max-width lines] (style-lines options cur-ind [new-seq])\n              ; Figure out where we are\n              last-width (last lines)]\n          (dbg-pr options\n                  \"indent-shift: last-width:\" last-width\n                  \"new-seq:\" new-seq)\n          ; Should this be (inc last-width)?\n          (recur (next cur-seq) last-width (conj out new-seq)))))))\n\n(declare merge-fzprint-seq)\n\n(defn indent-zmap\n  \"Implement :indent-only?.  This routine is the central one through\n  which all :indent-only? processing flows, and replaces all of the\n  detailed logic in fzprint-list*, fzprint-vec*, and fzprint-map*.\n  This is called directly by fzprint-vec*, which handles both vectors\n  and sets, and through fzprint-indent by fzprint-list* and\n  fzprint-map*.  Thus, all of the data structures get their\n  :indent-only? processing handled by ident-zmap.  coll-print is\n  the output from fzprint-seq, which is a style-vec in the making\n  without spacing, but with extra [] around the elements.  Everything\n  is based off of ind, and we know nothing to the left of that.\n  ind must be the left end of everything, not the right of l-str!\n  The actual-ind is to the right of l-str.  When we get a newline,\n  replace any spaces after it with our own, and that would be to\n  bring it to ind + indent.  \"\n  ([caller\n    {:keys [width rightcnt], {:keys [wrap-after-multi?]} caller, :as options}\n    ind actual-ind coll-print indent first-indent-only?]\n   (let [coll-print (merge-fzprint-seq coll-print)\n         last-index (dec (count coll-print))\n         rightcnt (fix-rightcnt rightcnt)\n         actual-indent (+ ind indent)]\n     (dbg-pr options\n             \"indent-zmap: ind:\" ind\n             \"actual-ind:\" actual-ind\n             \"first-indent-only?\" first-indent-only?\n             \"indent:\" indent\n             \"actual-indent:\" actual-indent\n             \"coll-print:\" coll-print)\n     (loop [cur-seq coll-print\n            cur-ind actual-ind\n            index 0\n            beginning? true  ; beginning of line\n            ; transient here slowed things down, in a similar routine\n            l-str-indent? true\n            out []]\n       (if-not cur-seq\n         out\n         (let [this-seq (first cur-seq)]\n           (when this-seq\n             (let [multi? (> (count this-seq) 1)\n                   _ (log-lines options \"indent-zmap:\" ind this-seq)\n                   _ (dbg-pr options\n                             \"indent-zmap: cur-ind:\" cur-ind\n                             \"multi?\" multi?\n                             \"(count this-seq):\" (count this-seq)\n                             \"this-seq:\" this-seq\n                             \"out:\" out)\n                   this-seq\n                     (if multi?\n                       (indent-shift caller options actual-ind cur-ind this-seq)\n                       this-seq)\n                   [linecnt max-width lines]\n                     (style-lines options cur-ind this-seq)\n                   ; Figure out where we are\n                   last-width (last lines)\n                   ; How can this be right if there are multiple lines?\n                   ; Because we called indent-zmap to get the indents right,\n                   ; and they will be but for the first line, which style-lines\n                   ; fixed because it got the cur-ind..\n                   thetype (nth (last this-seq) 2)\n                   ; This is the total width of the current line\n                   ; relative to ind\n                   len (- last-width cur-ind)\n                   _ (dbg options\n                          \"linecnt:\" linecnt\n                          \"last-width:\" last-width\n                          \"len:\" len\n                          \"type:\" thetype)\n                   len (max 0 len)\n                   ; This isn't the only newline, actually.  Sometimes they\n                   ; are comment or comment-inline.  Later, for indent-shift,\n                   ; they are :indents.  Figure this out!\n                   newline? (= thetype :newline)\n                   comma? (= thetype :comma)\n                   isempty? (empty? (first (first this-seq)))\n                   comment? (or (= thetype :comment)\n                                (= thetype :comment-inline))\n                   ; Adjust for the rightcnt on the last element\n                   ;first-comment? (and comment? (= index 0))\n                   ;first-newline? (and newline? (= index 0))\n                   ;l-str-indent? (or first-comment? first-newline?)\n                   l-str-indent? (and l-str-indent? (or comment? newline?))\n                   actual-indent (if (and (> index 0) first-indent-only?)\n                                   ind\n                                   (+ ind indent))\n                   width (if (= index last-index) (- width rightcnt) width)\n                   ; need to check size, and if one line and fits, should fit\n                   ; ??? why does it fit if this is the first thing?  Because\n                   ; if it isn't, things won't get better?  Seems to me like\n                   ; if the first thing doesn't fit, we should return nil.\n                   ;\n                   ; But this is all about indent-only, not fitting.  But\n                   ; we will probably care about fitting someday.\n                   fit? (<= (+ cur-ind len) width)\n                   ; If we don't care about fit, then don't do this!!\n                   newline-before? nil\n                   #_(and (not newline?) (not fit?) (not beginning?))\n                   ; What are we doint about :indent from indent-shift?\n                   newline-after? comment?\n                   new-ind (cond (or newline-after? newline?) actual-indent\n                                 newline-before? (+ actual-indent len)\n                                 :else (+ cur-ind 1 len))]\n               (dbg-pr\n                 options\n                 \"------ this-seq:\" this-seq\n                 \"lines:\" lines\n                 \"linecnt:\" linecnt\n                 \"multi?\" multi?\n                 \"thetype:\" thetype\n                 \"newline?:\" newline?\n                 \"comment?:\" comment?\n                 \"comma?:\" comma?\n                 ;\"first-newline?:\" first-newline?\n                 ;\"first-comment?:\" first-comment?\n                 \"l-str-indent?:\" l-str-indent?\n                 \"first-indent-only?\" first-indent-only?\n                 \"actual-indent:\" actual-indent\n                 \"index:\" index\n                 \"beginning?:\" beginning?\n                 \"max-width:\" max-width\n                 \"last-width:\" last-width\n                 \"len:\" len\n                 \"cur-ind:\" cur-ind\n                 \"isempty?:\" isempty?\n                 \"newline-before?:\" newline-before?\n                 \"newline-after?:\" newline-after?\n                 \"new-ind:\" new-ind\n                 \"width:\" width\n                 \"fit?\" fit?)\n               (recur ; [cur-seq, cur-ind, index, beginning?, out]\n                 (next cur-seq)\n                 new-ind\n                 (inc index)\n                 ; beginning can happen because we created an indent\n                 ; or because a multi already had one.\n                 (or (and isempty? beginning?)\n                     newline?\n                     newline-after?\n                     (= thetype :indent))\n                 ; l-str-indent\n                 l-str-indent?\n                 ; out\n                 (if isempty?\n                   (if (or newline-before? newline-after?)\n                     (concat out\n                             [[(str \"\\n\" (blanks actual-indent)) :none\n                               :indent]])\n                     out)\n                   ; TODO: concat-no-nil fails here, why?\n                   (concat\n                     out\n                     (cond\n                       newline-before? (concat-no-nil\n                                         [[(str \"\\n\" (blanks actual-indent))\n                                           :none :indent]]\n                                         this-seq)\n                       newline-after?\n                         (if (or beginning? comma?)\n                           (concat-no-nil\n                             this-seq\n                             [[(str \"\\n\"\n                                    (blanks (if l-str-indent?\n                                              actual-ind\n                                              actual-indent)\n                                            #_actual-indent)) :none :indent]])\n                           (concat-no-nil [[\" \" :none :whitespace]]\n                                          this-seq\n                                          [[(str \"\\n\" (blanks actual-indent))\n                                            :none :indent]]))\n                       newline?\n                         [[(str \"\\n\"\n                                (blanks\n                                  (if l-str-indent? actual-ind actual-indent)\n                                  #_actual-indent)) :none :indent]]\n                       ; Remove next line, unnecessary\n                       (zero? index) this-seq\n                       :else (if (or beginning? comma?)\n                               this-seq\n                               (concat-no-nil [[\" \" :none :whitespace]]\n                                              this-seq)))))))))))))\n  ([caller options ind actual-ind coll-print indent]\n   (indent-zmap caller options ind actual-ind coll-print indent nil)))\n\n; TODO: Fix these, they both need a lot of work\n; Do we really need both, or just figure out the hang\n; ones?\n\n(def hang-indent #{:hang :none :none-body})\n\n(def flow-indent\n  #{:binding :arg1 :arg1-body :hang :fn :noarg1-body :noarg1 :arg2 :arg2-fn\n    :arg1-force-nl :gt2-force-nl :gt3-force-nl :flow :flow-body :force-nl-body\n    :force-nl})\n\n(defn newline-seq?\n  \"Given a vector of vectors, decide if we should merge these individually\n  into the top level vector.\"\n  [newline-vec]\n  (let [starts-with-nl-vec (mapv #(clojure.string/starts-with? (first %) \"\\n\")\n                             newline-vec)\n        #_(println \"starts-with-nl-vec\" starts-with-nl-vec)\n        true-seq (distinct starts-with-nl-vec)]\n    (and (= (count true-seq) 1) (= (first true-seq) true))))\n\n(defn merge-fzprint-seq\n  \"Given the output from fzprint-seq, which is a seq of the\n  output of fzprint*, apply a function to each of them that has\n  more than one element (since less has no meaning) and when the\n  function returns true, merge the vector in as individual elements.\"\n  [fzprint-seq-vec]\n  (into []\n        (reduce #(if (newline-seq? %2)\n                   (into [] (concat %1 (mapv vector %2)))\n                   (conj %1 %2))\n          []\n          fzprint-seq-vec)))\n\n(defn fzprint-indent-x\n  \"This function assumes that :indent-only? was set for the caller\n  in the options (since anything else doesn't make sense).  It takes\n  a zloc and the ind, which is where we are on the line this point,\n  and will process the zloc to include any newlines.  Of course we\n  have to have all of the white space in the zloc too, since we\n  need to ask some questions about what we are starting with at\n  some point.  We don't add newlines and we let the newlines that\n  are in there do their thing.  We might add newlines if we move\n  beyond the right margin, but for now, we don't (and it isn't\n  entirely clear how or if that would work).  This routine has to\n  make decisions about the indent, that is whether to hang or flow\n  the expression. It does that based on what was done in the input\n  if the configuration allows.\"\n  [caller l-str r-str options ind zloc fn-style arg-1-indent]\n  (let [flow-indent (:indent (caller options))\n        l-str-len (count l-str)\n        flow-indent (if (and (> flow-indent l-str-len) (= caller :list))\n                      ; If we don't think this could be a fn, indent minimally\n                      (if arg-1-indent flow-indent l-str-len)\n                      flow-indent)\n        scalar-ind (if (coll? ind) (first ind) ind)\n        actual-ind (+ scalar-ind l-str-len)\n        _ (dbg-pr options\n                  \"fzprint-indent: caller:\" caller\n                  \"l-str-len:\" l-str-len\n                  \"ind:\" ind\n                  \"scalar-ind:\" scalar-ind\n                  \"fn-style:\" fn-style\n                  \"arg-1-indent:\" arg-1-indent\n                  \"flow-indent:\" flow-indent\n                  \"actual-ind:\" actual-ind)\n        zloc-seq (zmap-w-nl identity zloc)\n        coll-print (fzprint-seq options ind zloc-seq)\n        _ (dbg-pr options \"fzprint-indent: coll-print:\" coll-print)\n        indent-only-style (:indent-only-style (caller options))\n        ; If we have the possibility of :input-hang, then try if it is\n        ; configured.\n        already-hung? (when (and indent-only-style\n                                 (= indent-only-style :input-hang))\n                        (hang-zloc? (first zloc-seq)))\n        raw-indent\n          (if (and arg-1-indent already-hung?) arg-1-indent flow-indent)\n        indent raw-indent\n        coll-print-contains-nil? (contains-nil? coll-print)\n        _ (dbg-pr options\n                  \"fzprint-indent:\" (zstring zloc)\n                  \"ind:\" ind\n                  \"fn-style:\" fn-style\n                  \"indent-only-style:\" indent-only-style\n                  \"already-hung?:\" already-hung?\n                  \"arg-1-indent:\" arg-1-indent\n                  \"l-str-len:\" (count l-str)\n                  \"actual-ind:\" actual-ind\n                  \"raw-indent:\" raw-indent\n                  \"coll-print-contains-nil?:\" coll-print-contains-nil?\n                  \"indent:\" indent)\n        coll-print (when-not coll-print-contains-nil? coll-print)]\n    ; indent needs to adjust for the size of l-str-vec, since actual-ind\n    ; has l-str-vec in it so that indent-zmap knows where we are on the\n    ; line.  Just like fzprint-one-line needs one-line-ind, not ind.\n    (let [output (indent-zmap caller options ind actual-ind coll-print indent)]\n      (dbg-pr options \"fzprint-indent: output:\" output)\n      output)))\n\n(defn fzprint-indent\n  \"This function assumes that :indent-only? was set for the caller\n  in the options (since anything else doesn't make sense).  It takes\n  a zloc and the ind, which is where we are on the line this point,\n  and will process the zloc to include any newlines.  Of course we\n  have to have all of the white space in the zloc too, since we\n  need to ask some questions about what we are starting with at\n  some point.  We don't add newlines and we let the newlines that\n  are in there do their thing.  We might add newlines if we move\n  beyond the right margin, but for now, we don't (and it isn't\n  entirely clear how or if that would work).  This routine has to\n  make decisions about the indent, that is whether to hang or flow\n  the expression. It does that based on what was done in the input\n  if the configuration allows.\"\n  ([caller l-str r-str options ind zloc fn-style arg-1-indent\n    first-indent-only?]\n   (let [flow-indent (:indent (caller options))\n         ; If it is a map, then an indent of 1 is all that makes sense.\n         flow-indent (if (= caller :map) 1 flow-indent)\n         l-str-len (count l-str)\n         flow-indent (if (and (> flow-indent l-str-len) (= caller :list))\n                       ; If we don't think this could be a fn, indent minimally\n                       (if arg-1-indent flow-indent l-str-len)\n                       flow-indent)\n         actual-ind (+ ind l-str-len)\n         _ (dbg-pr options\n                   \"fzprint-indent: caller:\" caller\n                   \"l-str-len:\" l-str-len\n                   \"ind:\" ind\n                   \"fn-style:\" fn-style\n                   \"arg-1-indent:\" arg-1-indent\n                   \"flow-indent:\" flow-indent\n                   \"actual-ind:\" actual-ind)\n         ; We could enable :comma? for lists, sets, vectors someday\n         zloc-seq (if (:comma? (caller options))\n                    (zmap-w-nl-comma identity zloc)\n                    (zmap-w-nl identity zloc))\n         coll-print (fzprint-seq options ind zloc-seq)\n         _ (dbg-pr options \"fzprint-indent: coll-print:\" coll-print)\n         indent-only-style (:indent-only-style (caller options))\n         ; If we have the possibility of :input-hang, then try if it is\n         ; configured.\n         already-hung? (when (and indent-only-style\n                                  (= indent-only-style :input-hang))\n                         (hang-zloc? (first zloc-seq)))\n         raw-indent\n           (if (and arg-1-indent already-hung?) arg-1-indent flow-indent)\n         indent raw-indent\n         coll-print-contains-nil? (contains-nil? coll-print)\n         _ (dbg-pr options\n                   \"fzprint-indent:\" (zstring zloc)\n                   \"ind:\" ind\n                   \"fn-style:\" fn-style\n                   \"indent-only-style:\" indent-only-style\n                   \"already-hung?:\" already-hung?\n                   \"arg-1-indent:\" arg-1-indent\n                   \"l-str-len:\" (count l-str)\n                   \"actual-ind:\" actual-ind\n                   \"raw-indent:\" raw-indent\n                   \"coll-print-contains-nil?:\" coll-print-contains-nil?\n                   \"indent:\" indent)\n         coll-print (when-not coll-print-contains-nil? coll-print)]\n     ; indent needs to adjust for the size of l-str-vec, since actual-ind\n     ; has l-str-vec in it so that indent-zmap knows where we are on the\n     ; line.  Just like fzprint-one-line needs one-line-ind, not ind.\n     (let [output (indent-zmap caller\n                               options\n                               ind\n                               actual-ind\n                               coll-print\n                               indent\n                               first-indent-only?)]\n       (dbg-pr options \"fzprint-indent: output:\" output)\n       output)))\n  ([caller l-str r-str options ind zloc fn-style arg-1-indent]\n   (fzprint-indent caller\n                   l-str\n                   r-str\n                   options\n                   ind\n                   zloc\n                   fn-style\n                   arg-1-indent\n                   nil)))\n\n(defn zfind-seq\n  \"Find the location, counting from zero, and counting every element \n  in the seq, of the first zthing?.  Return its index if it is found, \n  nil if not.\"\n  [zthing? zloc-seq]\n  (loop [nloc zloc-seq\n         i 0]\n    (when (not (nil? nloc))\n      (if (zthing? (first nloc)) i (recur (next nloc) (inc i))))))\n\n;;\n;; # Utilities to modify list printing in various ways\n;;\n\n;;\n;; Which fn-styles use :list {:indent n} instead of\n;; :list {:indent-arg n}\n;;\n\n(def body-set\n  #{:binding :arg1-> :arg2 :arg2-fn :arg2-pair :pair-fn :fn :arg1-body\n    :arg1-pair-body :none-body :noarg1-body :flow-body})\n\n(def body-map\n  {:arg1-body :arg1,\n   :arg1-pair-body :arg1-pair,\n   :none-body :none,\n   :flow-body :flow,\n   :noarg1-body :noarg1,\n   :force-nl-body :force-nl})\n\n;;\n;; If the noarg1? value is set, this is the mapping for functions\n;; immediately below\n;; \n\n(def noarg1-set #{:noarg1 :arg1->})\n\n(def noarg1-map\n  {:arg1 :none,\n   :arg1-pair :pair-fn,\n   :arg1-extend :extend,\n   :arg2 :arg1,\n   :arg2-pair :arg1-pair})\n\n(defn noarg1\n  \"Set noarg1 in the options if it is the right fn-type.\"\n  [options fn-type]\n  (if (noarg1-set fn-type) (assoc options :no-arg1? true) options))\n\n(def fn-style->caller\n  {:arg1-pair-body :pair,\n   :arg1-pair :pair,\n   :arg2-pair :pair,\n   :extend :extend,\n   :binding :binding,\n   :arg1-extend :extend,\n   :arg2-extend :extend,\n   :pair-fn :pair})\n\n(defn allow-one-line?\n  \"Should we allow this function to print on a single line?\"\n  [{:keys [fn-force-nl fn-gt2-force-nl fn-gt3-force-nl], :as options} len\n   fn-style]\n  (not (or (fn-force-nl fn-style)\n           (and (> len 3) (fn-gt2-force-nl fn-style))\n           (and (> len 4) (fn-gt3-force-nl fn-style))\n           (if-let [future-caller (fn-style->caller fn-style)]\n             (let [caller-map (future-caller options)]\n               (or (:flow? caller-map) (:force-nl? caller-map)))))))\n\n(defn modify-zloc\n  \"If the (caller options) has a value for :return-altered-zipper, then\n  examine the value.  It should be [<depth> <symbol> <fn>]. \n  If the <depth> is nil, any depth will do. If the\n  <symbol> is nil, any symbol will do.  If the <depth> and <symbol>\n  match, then the <fn> is called as (fn caller options zloc), and must\n  return a new zloc.\"\n  [caller options zloc]\n  (let [[depth trigger-symbol modify-fn :as return-altered-zipper-value]\n          (:return-altered-zipper (caller options))]\n    (dbg options\n         \"modify-zloc caller:\" caller\n         \"ztype\" (:ztype options)\n         \"return-altered-zipper-value:\" return-altered-zipper-value)\n    (if (or (not= (:ztype options) :zipper) (nil? return-altered-zipper-value))\n      zloc\n      (let [call-fn? (and (or (nil? depth) (= (:depth options) depth))\n                          (or (not trigger-symbol)\n                              (= trigger-symbol (zsexpr (zfirst zloc))))\n                          modify-fn)]\n        (dbg options \"modify-zloc: zloc\" (zstring zloc) \"call-fn?\" call-fn?)\n        (if call-fn?\n          (let [return (modify-fn caller options zloc)]\n            (dbg options \"modify-zloc return:\" (zstring return))\n            return)\n          zloc)))))\n\n(defn fzprint-list*\n  \"Print a list, which might be a list or an anon fn.  \n  Lots of work to make a list look good, as that is typically code. \n  Presently all of the callers of this are :list or :vector-fn.\"\n  [caller l-str r-str\n   {:keys [fn-map user-fn-map one-line? fn-style no-arg1? fn-force-nl],\n    :as options} ind zloc]\n  ; The options map can get re-written down a bit below, so don't get\n  ; anything with destructuring that might change with a rewritten  options map!\n  (let [max-length (get-max-length options)\n        zloc (modify-zloc caller options zloc)\n        len (zcount zloc)\n        zloc (if (> len max-length) (ztake-append max-length zloc '...) zloc)\n        len (zcount zloc)\n        l-str-len (count l-str)\n        indent (:indent (options caller))\n        [pre-arg-1-style-vec arg-1-zloc arg-1-count zloc-seq :as first-data]\n          (fzprint-up-to-first-zloc caller options (+ ind l-str-len) zloc)\n        arg-1-coll? (not (or (zkeyword? arg-1-zloc) (zsymbol? arg-1-zloc)))\n        ; Use an alternative arg-1-indent if the fn-style is forced on input\n        ; and we don't actually have an arg-1 from which we can get an indent.\n        ; Now, we might want to allow arg-1-coll? to give us an arg-1-indent,\n        ; maybe, someday, so we could hang next to it.\n        ; But for now, this will do.\n        arg-1-indent-alt? (and arg-1-coll? fn-style)\n        fn-str (if-not arg-1-coll? (zstring arg-1-zloc))\n        fn-style (or fn-style (fn-map fn-str) (user-fn-map fn-str))\n        ; if we don't have a function style, let's see if we can get\n        ; one by removing the namespacing\n        fn-style (if (and (not fn-style) fn-str)\n                   (fn-map (last (clojure.string/split fn-str #\"/\")))\n                   fn-style)\n        ; Do we have a [fn-style options] vector?\n        ; **** NOTE: The options map can change here, and if it does,\n        ; some of the things found in it above would have to change too!\n        options\n          ; The config-and-validate allows us to use :style in the options\n          ; map associated with a function\n          (if (vector? fn-style)\n            (first (zprint.config/config-and-validate \"fn-style:\"\n                                                      nil\n                                                      options\n                                                      (second fn-style)))\n            options)\n        ; If we messed with the options, then find new stuff.  This will\n        ; probably change only zloc-seq because of :respect-nl? or :indent-only?\n        [pre-arg-1-style-vec arg-1-zloc arg-1-count zloc-seq :as first-data]\n          (if (vector? fn-style)\n            (fzprint-up-to-first-zloc caller options (+ ind l-str-len) zloc)\n            first-data)\n        ; Don't do this too soon, as multiple things are driven off of\n        ; (vector? fn-style), above\n        fn-style (if (vector? fn-style) (first fn-style) fn-style)\n        ; Finish finding all of the interesting stuff in the first two\n        ; elements\n        [pre-arg-2-style-vec arg-2-zloc arg-2-count _ :as second-data]\n          ; The ind is wrong, need arg-1-indent, but we don't have it yet.\n          (fzprint-up-to-next-zloc caller\n                                   options\n                                   ;(+ ind l-str-len)\n                                   (+ ind indent)\n                                   first-data)\n        ; This len doesn't include newlines or other whitespace or\n        len (zcount-zloc-seq-nc-nws zloc-seq)\n        #_(prn \"fzprint-list* pre-arg-1-style-vec:\" pre-arg-1-style-vec\n               \"pre-arg-2-style-vec:\" pre-arg-2-style-vec\n               \"arg-1-zloc:\" (zstring arg-1-zloc)\n               \"arg-2-zloc:\" (zstring arg-2-zloc)\n               \"arg-1-count:\" arg-1-count\n               \"arg-2-count:\" arg-2-count)\n        ; Get indents which might have changed if the options map was\n        ; re-written by the function style being a vector.\n        indent (:indent (options caller))\n        indent-arg (:indent-arg (options caller))\n        indent-only? (:indent-only? (options caller))\n        ; set indent based on fn-style\n        indent (if (body-set fn-style) indent (or indent-arg indent))\n        indent (+ indent (dec l-str-len))\n        one-line-ok? (allow-one-line? options len fn-style)\n        one-line-ok? (when-not indent-only? one-line-ok?)\n        one-line-ok? (if (not= pre-arg-1-style-vec :noseq) nil one-line-ok?)\n        ; remove -body from fn-style if it was there\n        fn-style (or (body-map fn-style) fn-style)\n        ; All styles except :hang, :flow, and :flow-body and :binding need\n        ; three elements minimum. We could put this in the fn-map,\n        ; but until there are more than three (well four) exceptions, seems\n        ; like too much mechanism.\n        fn-style (if (#{:hang :flow :flow-body :binding} fn-style)\n                   fn-style\n                   (if (< len 3) nil fn-style))\n        ;fn-style (if (= fn-style :hang) fn-style (if (< len 3) nil fn-style))\n        fn-style (if no-arg1? (or (noarg1-map fn-style) fn-style) fn-style)\n        ; no-arg? only affect one level down...\n        options (if no-arg1? (dissoc options :no-arg1?) options)\n        ; If l-str isn't one char, create an indent adjustment.  Largely\n        ; for anonymous functions, which otherwise would have their own\n        ; :anon config to parallel :list, which would be just too much\n        indent-adj (dec l-str-len)\n        ; The default indent is keyed off of whether or not the first thing\n        ; in the list is itself a list, since that list could evaluate to a\n        ; fn.  You can't replace the zlist? with arg-1-coll?, since if you do\n        ; multi-arity functions aren't done right, since the argument vector\n        ; is a coll?, and so arg-1-coll? is set, and then you get a two space\n        ; indent for multi-arity functions, which is wrong.\n        ; We could, conceivably, use zvector? here to specifically handle\n        ; multi-arity functions.  Or we could remember we are in a defn and\n        ; do something special there, or we could at least decide that we\n        ; were in code when we did this zlist? thing, since that is all about\n        ; code.  That wouldn't work if it was the top-level form, but would\n        ; otherwise.\n        default-indent (if (zlist? arg-1-zloc) indent l-str-len)\n        arg-1-indent (if-not arg-1-coll? (+ ind (inc l-str-len) (count fn-str)))\n        ; If we don't have an arg-1-indent, and we noticed that the inputs\n        ; justify using an alternative, then use the alternative.\n        arg-1-indent (or arg-1-indent (when arg-1-indent-alt? (+ indent ind)))\n        ; If we have anything in pre-arg-2-style-vec, then we aren't hanging\n        ; anything.  But an arg-1-indent of nil isn't good, so we will make it\n        ; like the flow indent so we flow.\n        arg-1-indent (if (= pre-arg-2-style-vec :noseq)\n                       arg-1-indent\n                       (when arg-1-indent (+ indent ind)))\n        ; Tell people inside that we are in code.\n        ; We don't catch places where the first thing in a list is\n        ; a collection or a seq which yields a function.\n        options (if (not arg-1-coll?) (assoc options :in-code? fn-str) options)\n        options (assoc options :pdepth (inc (long (or (:pdepth options) 0))))\n        _ (when (:dbg-hang options)\n            (println (dots (:pdepth options)) \"fzs\" fn-str))\n        new-ind (+ indent ind)\n        one-line-ind (+ l-str-len ind)\n        options (if fn-style (dissoc options :fn-style) options)\n        loptions (not-rightmost options)\n        roptions options\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options (+ indent ind) zloc r-str)\n        _ (dbg-pr\n            options\n            \"fzprint-list*:\" (zstring zloc)\n            \"fn-str\" fn-str\n            \"fn-style:\" fn-style\n            \"len:\" len\n            \"ind:\" ind\n            \"indent:\" indent\n            \"default-indent:\" default-indent\n            \"one-line-ok?\" one-line-ok?\n            \"arg-1-coll?\" arg-1-coll?\n            \"arg-1-indent:\" arg-1-indent\n            \"arg-1-zloc:\" (zstring arg-1-zloc)\n            \"l-str:\" (str \"'\" l-str \"'\")\n            \"indent-adj:\" indent-adj\n            \"len:\" len\n            \"one-line?:\" one-line?\n            \"indent-only?:\" indent-only?\n            \"rightcnt:\" (:rightcnt options))\n        one-line (if (zero? len)\n                   :empty\n                   (when one-line-ok?\n                     (fzprint-one-line options one-line-ind zloc-seq)))]\n    (cond\n      one-line (if (= one-line :empty)\n                 (concat-no-nil l-str-vec r-str-vec)\n                 (concat-no-nil l-str-vec one-line r-str-vec))\n      ; If we are in :one-line mode, and it didn't fit on one line,\n      ; we are done!  We don't see this debugging, below.  Suppose\n      ; we never get here?\n      one-line?\n        (dbg options \"fzprint-list*:\" fn-str \" one-line did not work!!!\")\n      (dbg options \"fzprint-list*: fn-style:\" fn-style) nil\n      (= len 0) (concat-no-nil l-str-vec r-str-vec)\n      indent-only? (concat-no-nil l-str-vec\n                                  (fzprint-indent caller\n                                                  l-str\n                                                  r-str\n                                                  options\n                                                  ind\n                                                  zloc\n                                                  fn-style\n                                                  arg-1-indent)\n                                  r-str-vec)\n      (= len 1) (concat-no-nil l-str-vec\n                               ; Not clear if this is necessary\n                               pre-arg-1-style-vec\n                               (fzprint* roptions one-line-ind arg-1-zloc)\n                               pre-arg-2-style-vec\n                               r-str-vec)\n      ; In general, we don't have a fn-style if we have less than 3 elements.\n      ; However, :binding is allowed with any number up to this point, so we\n      ; have to check here.  :binding is actually allowed with at least two\n      ; elements, the third through n are optional.\n      (and (= fn-style :binding) (> len 1) (zvector? arg-2-zloc))\n        (let [[hang-or-flow binding-style-vec]\n                (fzprint-hang-unless-fail loptions\n                                          (or arg-1-indent (+ indent ind))\n                                          (+ indent ind)\n                                          fzprint-binding-vec\n                                          arg-2-zloc)\n              binding-style-vec (if (= hang-or-flow :hang)\n                                  (concat-no-nil [[\" \" :none :whitespace]]\n                                                 binding-style-vec)\n                                  binding-style-vec)]\n          (concat-no-nil l-str-vec\n                         pre-arg-1-style-vec\n                         ; TODO: get rid of inc ind\n                         (fzprint* loptions (inc ind) arg-1-zloc)\n                         pre-arg-2-style-vec\n                         binding-style-vec\n                         (if (> len 2)\n                           (concat-no-nil ; here we use options, because\n                                          ; fzprint-flow-seq\n                                          ; will sort it out\n                             (fzprint-flow-seq options\n                                               (+ indent ind)\n                                               (get-zloc-seq-right second-data)\n                                               :force-nl\n                                               :newline-first)\n                             r-str-vec)\n                           r-str-vec)))\n      (= fn-style :pair-fn)\n        (let [zloc-seq-right-first (get-zloc-seq-right first-data)\n              zloc-count (count zloc-seq)]\n          (concat-no-nil l-str-vec\n                         pre-arg-1-style-vec\n                         (fzprint* loptions (inc ind) arg-1-zloc)\n                         (fzprint-hang options\n                                       :pair-fn\n                                       arg-1-indent\n                                       (+ indent ind)\n                                       fzprint-pairs\n                                       zloc-count\n                                       zloc-seq-right-first)\n                         r-str-vec))\n      (= fn-style :extend)\n        (let [zloc-seq-right-first (get-zloc-seq-right first-data)]\n          (concat-no-nil\n            l-str-vec\n            pre-arg-1-style-vec\n            (fzprint* loptions (inc ind) arg-1-zloc)\n            [[(str \"\\n\" (blanks (+ indent ind))) :none :indent]]\n            ; I think fzprint-pairs will sort out which\n            ; is and isn't the rightmost because of two-up\n            (fzprint-extend options (+ indent ind) zloc-seq-right-first)\n            r-str-vec))\n      ; needs (> len 2) but we already checked for that above in fn-style\n      (or (and (= fn-style :fn) (not (zlist? arg-2-zloc)))\n          (= fn-style :arg2)\n          (= fn-style :arg2-fn)\n          (= fn-style :arg2-pair)\n          (= fn-style :arg2-extend))\n        (let [[pre-arg-3-style-vec arg-3-zloc arg-3-count _ :as third-data]\n                ; The ind is wrong, need arg-1-indent, but we don't have it yet.\n                (fzprint-up-to-next-zloc caller\n                                         options\n                                         ; This is probably wrong\n                                         ; (+ ind l-str-len)\n                                         (+ ind indent)\n                                         second-data)\n              #_(prn \"pre-arg-1-style-vec:\" pre-arg-1-style-vec)\n              #_(prn \"pre-arg-2-style-vec:\" pre-arg-2-style-vec)\n              #_(prn \"pre-arg-3-style-vec:\" pre-arg-3-style-vec)\n              zloc-seq-right-third (get-zloc-seq-right third-data)\n              second-element (fzprint-hang-one\n                               caller\n                               (if (not arg-3-zloc) options loptions)\n                               ; This better not be nil\n                               arg-1-indent\n                               (+ indent ind)\n                               arg-2-zloc)\n              [line-count max-width]\n                ; arg-1-indent better not be nil here either\n                (style-lines loptions arg-1-indent second-element)\n              first-three\n                (when second-element\n                  (let [first-two-wo-pre-arg-1\n                          (concat-no-nil\n                            (fzprint* loptions (+ indent ind) arg-1-zloc)\n                            pre-arg-2-style-vec\n                            second-element\n                            pre-arg-3-style-vec)\n                        local-options\n                          (if (not zloc-seq-right-third) options loptions)\n                        first-two-one-line?\n                          (fzfit-one-line local-options\n                                          (style-lines local-options\n                                                       (+ ind indent)\n                                                       first-two-wo-pre-arg-1))\n                        ; Add pre-arg-1-style-vec back in, which might push\n                        ; it to two lines (or many lines), but that\n                        ; doesn't matter.\n                        first-two (concat-no-nil pre-arg-1-style-vec\n                                                 first-two-wo-pre-arg-1)]\n                    (when-not first-two-one-line?\n                      (dbg-pr options\n                              \"fzprint-list*: :arg2-* first two didn't fit:\"\n                              first-two))\n                    (concat-no-nil\n                      first-two\n                      (if (or (= fn-style :arg2)\n                              (= fn-style :arg2-pair)\n                              (= fn-style :arg2-fn)\n                              (= fn-style :arg2-extend)\n                              (and (zvector? arg-3-zloc) (= line-count 1)))\n                        (fzprint-hang-one\n                          caller\n                          (if (not zloc-seq-right-third) options loptions)\n                          (if (and (= pre-arg-3-style-vec :noseq)\n                                   first-two-one-line?)\n                            ; hang it if possible\n                            max-width\n                            ; flow it\n                            (+ indent ind))\n                          (+ indent ind)\n                          arg-3-zloc)\n                        (concat-no-nil\n                          [[(str \"\\n\" (blanks (+ indent ind))) :none :indent]]\n                          (fzprint*\n                            (if (not zloc-seq-right-third) options loptions)\n                            (+ indent ind)\n                            arg-3-zloc))))))]\n          (when first-three\n            (if (not zloc-seq-right-third)\n              ; if nothing after the third thing, means just three things\n              (concat-no-nil l-str-vec first-three r-str-vec)\n              ; more than three things\n              (concat-no-nil\n                l-str-vec\n                first-three\n                (cond (= fn-style :arg2-pair)\n                        (concat-no-nil [[(str \"\\n\" (blanks (+ indent ind)))\n                                         :none :indent]]\n                                       (fzprint-pairs options\n                                                      (+ indent ind)\n                                                      zloc-seq-right-third))\n                      (= fn-style :arg2-extend)\n                        (concat-no-nil [[(str \"\\n\" (blanks (+ indent ind)))\n                                         :none :indent]]\n                                       (fzprint-extend options\n                                                       (+ indent ind)\n                                                       zloc-seq-right-third))\n                      :else (fzprint-hang-remaining caller\n                                                    ;options\n                                                    (if (= fn-style :arg2-fn)\n                                                      (assoc options\n                                                        :fn-style :fn)\n                                                      options)\n                                                    (+ indent ind)\n                                                    ; force flow\n                                                    (+ indent ind)\n                                                    zloc-seq-right-third\n                                                    fn-style))\n                r-str-vec))))\n      (and (= fn-style :arg1-mixin) (> len 3))\n        (let [[pre-arg-3-style-vec arg-3-zloc arg-3-count _ :as third-data]\n                (fzprint-up-to-next-zloc caller\n                                         options\n                                         (+ ind indent)\n                                         second-data)\n              [pre-arg-4-style-vec arg-4-zloc arg-4-count _ :as fourth-data]\n                (fzprint-up-to-next-zloc caller\n                                         options\n                                         (+ ind indent)\n                                         third-data)\n              arg-vec-index (or (zfind-seq #(or (zvector? %)\n                                                (when (zlist? %)\n                                                  (zvector? (zfirst %))))\n                                           zloc-seq)\n                                0)\n              doc-string? (string? (zsexpr arg-3-zloc))\n              mixin-start (if doc-string? arg-4-count arg-3-count)\n              mixin-length (- arg-vec-index mixin-start 1)\n              mixins? (pos? mixin-length)\n              doc-string (when doc-string?\n                           (fzprint-hang-one caller\n                                             loptions\n                                             (+ indent ind)\n                                             ; force flow\n                                             (+ indent ind)\n                                             arg-3-zloc))\n              #_(prn \":arg1-mixin: doc-string?\" doc-string?\n                     \"mixin-start:\" mixin-start\n                     \"mixin-length:\" mixin-length\n                     \"mixins?\" mixins?\n                     \"arg-vec-index:\" arg-vec-index\n                     \"doc-string\" doc-string\n                     \"arg-1-count:\" arg-1-count\n                     \"arg-2-count:\" arg-2-count\n                     \"arg-3-count:\" arg-3-count\n                     \"arg-4-count:\" arg-4-count)\n              ; Have to deal with no arg-vec-index!!\n              mixins\n                (when mixins?\n                  (let [mixin-sentinal (fzprint-hang-one\n                                         caller\n                                         loptions\n                                         (+ indent ind)\n                                         ; force flow\n                                         (+ indent ind)\n                                         (if doc-string? arg-4-zloc arg-3-zloc))\n                        [line-count max-width]\n                          (style-lines loptions (+ indent ind) mixin-sentinal)]\n                    (concat-no-nil\n                      (if doc-string? pre-arg-4-style-vec pre-arg-3-style-vec)\n                      mixin-sentinal\n                      (fzprint-hang-remaining caller\n                                              loptions\n                                              ; Apparently hang-remaining gives\n                                              ; you a\n                                              ; space after the current thing,\n                                              ; so we\n                                              ; need to account for it now,\n                                              ; since\n                                              ; max-width is the end of the\n                                              ; current\n                                              ; thing\n                                              (inc max-width)\n                                              (dec (+ indent indent ind))\n                                              (get-zloc-seq-right (if doc-string\n                                                                    fourth-data\n                                                                    third-data))\n                                              fn-style\n                                              mixin-length))))]\n          (concat-no-nil\n            l-str-vec\n            pre-arg-1-style-vec\n            (fzprint* loptions (inc ind) arg-1-zloc)\n            pre-arg-2-style-vec\n            (fzprint-hang-one caller\n                              (if (= len 2) options loptions)\n                              arg-1-indent\n                              (+ indent ind)\n                              arg-2-zloc)\n            (cond (and doc-string? mixins?)\n                    (concat-no-nil pre-arg-3-style-vec doc-string mixins)\n                  doc-string? (concat-no-nil pre-arg-3-style-vec doc-string)\n                  mixins? mixins\n                  :else :noseq)\n            (fzprint-hang-remaining\n              caller\n              (noarg1 options fn-style)\n              (+ indent ind)\n              ; force flow\n              (+ indent ind)\n              (nthnext zloc-seq\n                       (if mixins?\n                         arg-vec-index\n                         (if doc-string? arg-4-count arg-3-count)))\n              fn-style)\n            r-str-vec))\n      (or (= fn-style :arg1-pair)\n          (= fn-style :arg1)\n          (= fn-style :arg1-force-nl)\n          (= fn-style :arg1->))\n        (concat-no-nil\n          l-str-vec\n          pre-arg-1-style-vec\n          (fzprint* loptions (inc ind) arg-1-zloc)\n          pre-arg-2-style-vec\n          (fzprint-hang-one caller\n                            (if (= len 2) options loptions)\n                            arg-1-indent\n                            (+ indent ind)\n                            arg-2-zloc)\n          ; then either pair or remaining-seq\n          ; we don't do a full hanging here.\n          ; We wouldn't be here if len < 3\n          (if (= fn-style :arg1-pair)\n            (concat-no-nil [[(str \"\\n\" (blanks (+ indent ind))) :none :indent]]\n                           (fzprint-pairs options\n                                          (+ indent ind)\n                                          (get-zloc-seq-right second-data)))\n            (fzprint-hang-remaining caller\n                                    (noarg1 options fn-style)\n                                    (+ indent ind)\n                                    ; force flow\n                                    (+ indent ind)\n                                    (get-zloc-seq-right second-data)\n                                    fn-style))\n          r-str-vec)\n      ; we know that (> len 2) if fn-style not= nil\n      (= fn-style :arg1-extend)\n        (let [zloc-seq-right-second (get-zloc-seq-right second-data)]\n          (cond\n            (zvector? arg-2-zloc)\n              ; This will put the second argument (a vector) on a different\n              ; line than the function name.  No known uses for this code\n              ; as of 7/20/19.  It does work with :respect-nl and has tests.\n              (concat-no-nil\n                l-str-vec\n                pre-arg-1-style-vec\n                (fzprint* loptions (+ indent ind) arg-1-zloc)\n                pre-arg-2-style-vec\n                [[(str \"\\n\" (blanks (+ indent ind))) :none :indent]]\n                (fzprint* loptions (+ indent ind) arg-2-zloc)\n                [[(str \"\\n\" (blanks (+ indent ind))) :none :indent]]\n                (fzprint-extend options (+ indent ind) zloc-seq-right-second)\n                r-str-vec)\n            :else\n              (concat-no-nil\n                l-str-vec\n                pre-arg-1-style-vec\n                (fzprint* loptions (inc ind) arg-1-zloc)\n                pre-arg-2-style-vec\n                (fzprint-hang-one caller\n                                  (if (= len 2) options loptions)\n                                  arg-1-indent\n                                  (+ indent ind)\n                                  arg-2-zloc)\n                [[(str \"\\n\" (blanks (+ indent ind))) :none :indent]]\n                (fzprint-extend options (+ indent ind) zloc-seq-right-second)\n                r-str-vec)))\n      ; Unspecified seq, might be a fn, might not.\n      ; If (first zloc) is a seq, we won't have an\n      ; arg-1-indent.  In that case, just flow it\n      ; out with remaining seq.  Since we already\n      ; know that it won't fit on one line.  If it\n      ; might be a fn, try hanging and flow and do\n      ; what we like better.  Note that default-indent\n      ; might be 1 here, which means that we are pretty\n      ; sure that the (zfirst zloc) isn't a function\n      ; and we aren't doing code.\n      ;\n      :else\n        (concat-no-nil\n          l-str-vec\n          pre-arg-1-style-vec\n          (fzprint* loptions (+ l-str-len ind) arg-1-zloc)\n          (let [zloc-seq-right-first (get-zloc-seq-right first-data)]\n            (if zloc-seq-right-first\n              ; We have something else to format after arg-1-zloc\n              (if (and arg-1-indent (not= fn-style :flow))\n                (let [result (fzprint-hang-remaining caller\n                                                     (noarg1 options fn-style)\n                                                     arg-1-indent\n                                                     (+ indent ind indent-adj)\n                                                     ; Can't do this, because\n                                                     ; hang-remaining\n                                                     ; doesn't take a seq\n                                                     zloc-seq-right-first\n                                                     ;(znthnext zloc 0)\n                                                     fn-style)]\n                  (dbg-pr options\n                          \"fzprint-list*: r-str-vec:\" r-str-vec\n                          \"result:\" result)\n                  result)\n                ; This might be a collection as the first thing, or it\n                ; might be a :flow type.  Do different indents for these.\n                (let [local-indent (if (= fn-style :flow)\n                                     (+ indent ind)\n                                     (+ default-indent ind indent-adj))]\n                  (concat-no-nil ;[[(str \"\\n\" (blanks local-indent)) :none\n                                 ;:indent]]\n                    (fzprint-flow-seq (noarg1 options fn-style)\n                                      local-indent\n                                      ;(nthnext (zmap identity\n                                      ;zloc) 1)\n                                      zloc-seq-right-first\n                                      :force-nl\n                                      :newline-first))))\n              ; Nothing else after arg-1-zloc\n              :noseq))\n          r-str-vec))))\n\n(defn fzprint-list\n  \"Pretty print and focus style a :list element.\"\n  [options ind zloc]\n  (fzprint-list* :list \"(\" \")\" (rightmost options) ind zloc))\n\n(defn fzprint-anon-fn\n  \"Pretty print and focus style a fn element.\"\n  [options ind zloc]\n  (fzprint-list* :list \"#(\" \")\" (rightmost options) ind zloc))\n\n(defn any-zcoll?\n  \"Return true if there are any collections in the collection.\"\n  [options ind zloc]\n  (let [coll?-seq (zmap zcoll? zloc)] (reduce #(or %1 %2) nil coll?-seq)))\n\n;;\n;; # Put things on the same line\n;;\n\n(defn wrap-zmap\n  \"Given the output from fzprint-seq, which is a style-vec in\n  the making without spacing, but with extra [] around the elements,\n  wrap the elements to the right margin.\"\n  [caller\n   {:keys [width rightcnt], {:keys [wrap-after-multi?]} caller, :as options} ind\n   coll-print]\n  #_(prn \"wz:\" coll-print)\n  (let [last-index (dec (count coll-print))\n        rightcnt (fix-rightcnt rightcnt)]\n    (loop [cur-seq coll-print\n           cur-ind ind\n           index 0\n           previous-newline? false\n           ; transient here slows things down, interestingly enough\n           out []]\n      (if-not cur-seq\n        out\n        (let [next-seq (first cur-seq)]\n          (when next-seq\n            (let [multi? (> (count (first cur-seq)) 1)\n                  this-seq (first cur-seq)\n                  _ (log-lines options \"wrap-zmap:\" ind this-seq)\n                  _ (dbg options \"wrap-zmap: ind:\" ind \"this-seq:\" this-seq)\n                  [linecnt max-width lines] (style-lines options ind this-seq)\n                  last-width (last lines)\n                  len (- last-width ind)\n                  len (max 0 len)\n                  newline? (= (nth (first this-seq) 2) :newline)\n                  comment? (= (nth (first this-seq) 2) :comment)\n                  comment-inline? (= (nth (first this-seq) 2) :comment-inline)\n                  width (if (= index last-index) (- width rightcnt) width)\n                  ; need to check size, and if one line and fits, should fit\n                  fit? (and (not newline?)\n                            (or (zero? index) (not comment?))\n                            (or (zero? index)\n                                (and (if multi? (= linecnt 1) true)\n                                     (<= (+ cur-ind len) width))))\n                  new-ind (cond\n                            ; Comments cause an overflow of the size\n                            (or comment? comment-inline?) (inc width)\n                            (and multi? (> linecnt 1) (not wrap-after-multi?))\n                              width\n                            fit? (+ cur-ind len 1)\n                            newline? ind\n                            :else (+ ind len 1))]\n              #_(prn \"------ this-seq:\" this-seq\n                     \"lines:\" lines\n                     \"linecnt:\" linecnt\n                     \"multi?\" multi?\n                     \"newline?:\" newline?\n                     \"previous-newline?:\" previous-newline?\n                     \"linecnt:\" linecnt\n                     \"max-width:\" max-width\n                     \"last-width:\" last-width\n                     \"len:\" len\n                     \"cur-ind:\" cur-ind\n                     \"new-ind:\" new-ind\n                     \"width:\" width\n                     \"fit?\" fit?)\n              ; need to figure out what to do with a comment,\n              ; want to force next line to not fit whether or not\n              ; this line fit.  Comments are already multi-line, and\n              ; it is really not clear what multi? does in this routine\n              (recur\n                (next cur-seq)\n                new-ind\n                (inc index)\n                newline?\n                ; TODO: concat-no-nil fails here, why?\n                (concat\n                  out\n                  (if fit?\n                    (if (not (zero? index))\n                      (concat-no-nil [[\" \" :none :whitespace]] this-seq)\n                      this-seq)\n                    (if newline?\n                      [[(str \"\\n\" (blanks (dec new-ind))) :none :indent]]\n                      (if previous-newline?\n                        (concat-no-nil [[\" \" :none :indent]] this-seq)\n                        (concat-no-nil [[(str \"\\n\" (blanks ind)) :none :indent]]\n                                       this-seq)))))))))))))\n\n(defn remove-nl\n  \"Remove any [_ _ :newline] from the seq.\"\n  [coll]\n  (remove #(= (nth (first %) 2) :newline) coll))\n\n(defn internal-validate\n  \"Validate an options map that was returned from some internal configuration\n  expression or configuration.  Either returns the options map or throws\n  an error.\"\n  [options error-str]\n  (let [errors (validate-options options)\n        errors (when errors\n                 (str \"Options resulting from \" error-str\n                      \" had these errors: \" errors))]\n    (if (not (empty? errors))\n      (throw (#?(:clj Exception.\n                 :cljs js/Error.)\n              errors))\n      options)))\n\n(defn lazy-sexpr-seq\n  [nws-seq]\n  (if (seq nws-seq)\n    (lazy-cat [(zsexpr (first nws-seq))] (lazy-sexpr-seq (rest nws-seq)))\n    []))\n\n(defn fzprint-vec*\n  \"Print basic stuff like a vector or a set.  Several options for how to\n  print them.\"\n  [caller l-str r-str\n   {:keys [rightcnt in-code?],\n    {:keys [wrap-coll? wrap? binding? option-fn-first option-fn respect-nl?\n            sort? sort-in-code? fn-format indent indent-only?]}\n      caller,\n    :as options} ind zloc]\n  (dbg options \"fzprint-vec* ind:\" ind \"indent:\" indent \"caller:\" caller)\n  (if (and binding? (= (:depth options) 1))\n    (fzprint-binding-vec options ind zloc)\n    (let [l-str-len (count l-str)\n          l-str-vec [[l-str (zcolor-map options l-str) :left]]\n          r-str-vec (rstr-vec options ind zloc r-str)\n          len (zcount zloc)\n          new-options (when option-fn-first\n                        (let [first-sexpr (zsexpr (zfirst-no-comment zloc))]\n                          (internal-validate\n                            (option-fn-first options first-sexpr)\n                            (str \":vector :option-fn-first called with \"\n                                 first-sexpr))))\n          _ (when option-fn-first\n              (dbg-pr options\n                      \"fzprint-vec* option-fn-first new options\"\n                      new-options))\n          options (merge-deep options new-options)\n          new-options\n            (when option-fn\n              (let [nws-seq (remove zwhitespaceorcomment? (zseqnws zloc))\n                    nws-count (count nws-seq)\n                    sexpr-seq (lazy-sexpr-seq nws-seq)]\n                (internal-validate\n                  (option-fn options nws-count sexpr-seq)\n                  (str \":vector :option-fn called with sexpr count \"\n                       nws-count))))\n          _ (when option-fn\n              (dbg-pr options \"fzprint-vec* option-fn new options\" new-options))\n          {{:keys [wrap-coll? wrap? binding? respect-nl? sort? fn-format\n                   sort-in-code? indent indent-only?]}\n             caller,\n           :as options}\n            (merge-deep options new-options)]\n      (if fn-format\n        ; If we have fn-format, move immediately to fzprint-list* and\n        ; let :vector-fn configuration drive what we do (e.g., indent-only,\n        ; or whatever).  That is to say that :indent-only? in :vector doesn't\n        ; override option-fn-first or option-fn\n        (fzprint-list* :vector-fn\n                       \"[\"\n                       \"]\"\n                       (assoc options :fn-style fn-format)\n                       ind\n                       zloc)\n        (let [; If sort? is true, then respect-nl? makes no sense.  And vice\n              ; versa.\n              ; If respect-nl?, then no sort.\n              indent (or indent (count l-str))\n              new-ind (if indent-only? ind (+ indent ind))\n              _ (dbg-pr options\n                        \"fzprint-vec*:\" (zstring zloc)\n                        \"new-ind:\" new-ind)\n              zloc-seq (if (or respect-nl? indent-only?)\n                         (zmap-w-nl identity zloc)\n                         (zmap identity zloc))\n              zloc-seq (if (and sort?\n                                (if in-code? sort-in-code? true)\n                                (not respect-nl?)\n                                (not indent-only?))\n                         (order-out caller options identity zloc-seq)\n                         zloc-seq)\n              coll-print (if (zero? len)\n                           [[[\"\" :none :whitespace]]]\n                           (fzprint-seq options new-ind zloc-seq))\n              _ (dbg-pr options \"fzprint-vec*: coll-print:\" coll-print)\n              ; If we got any nils from fzprint-seq and we were in :one-line\n              ; mode\n              ; then give up -- it didn't fit on one line.\n              coll-print (if-not (contains-nil? coll-print) coll-print)\n              one-line (when coll-print\n                         ; should not be necessary with contains-nil? above\n                         (apply concat-no-nil\n                           (interpose [[\" \" :none :whitespace]]\n                             ; This causes single line things to also respect-nl\n                             ; when it is enabled.  Could be separately\n                             ; controlled\n                             ; instead of with :respect-nl? if desired.\n                             (if (or respect-nl? indent-only?)\n                               coll-print\n                               (remove-nl coll-print)))))\n              _ (log-lines options \"fzprint-vec*:\" new-ind one-line)\n              _ (dbg-pr options\n                        \"fzprint-vec*: new-ind:\" new-ind\n                        \"one-line:\" one-line)\n              one-line-lines (style-lines options new-ind one-line)]\n          (if (zero? len)\n            (concat-no-nil l-str-vec r-str-vec)\n            (when one-line-lines\n              (if (fzfit-one-line options one-line-lines)\n                (concat-no-nil l-str-vec one-line r-str-vec)\n                (if indent-only?\n                  ; Indent Only\n                  (concat-no-nil l-str-vec\n                                 (indent-zmap caller\n                                              options\n                                              ind\n                                              ; actual-ind\n                                              (+ ind l-str-len)\n                                              coll-print\n                                              indent)\n                                 r-str-vec)\n                  ; Regular Pprocessing\n                  (if (or (and (not wrap-coll?)\n                               (any-zcoll? options new-ind zloc))\n                          (not wrap?))\n                    (concat-no-nil l-str-vec\n                                   (apply concat-no-nil\n                                     (interpose [[(str \"\\n\" (blanks new-ind))\n                                                  :none :indent]]\n                                       (remove-nl coll-print)))\n                                   r-str-vec)\n                    ; Since there are either no collections in this vector or\n                    ; set\n                    ; or\n                    ; whatever, or if there are, it is ok to wrap them, print it\n                    ; wrapped on the same line as much as possible:\n                    ;           [a b c d e f\n                    ;            g h i j]\n                    (concat-no-nil\n                      l-str-vec\n                      (do (dbg options\n                               \"fzprint-vec*: wrap coll-print:\"\n                               coll-print)\n                          (wrap-zmap caller options new-ind coll-print))\n                      r-str-vec)))))))))))\n\n(defn fzprint-vec\n  [options ind zloc]\n  (fzprint-vec* :vector \"[\" \"]\" (rightmost options) ind zloc))\n\n(defn fzprint-array\n  [options ind zloc]\n  (fzprint-vec* :array \"[\" \"]\" (rightmost options) ind zloc))\n\n(defn fzprint-set\n  \"Pretty print and focus style a :set element.\"\n  [options ind zloc]\n  (fzprint-vec* :set \"#{\" \"}\" (rightmost options) ind zloc))\n\n; not clear transient helps here\n(defn interpose-either\n  \"Do the same as interpose, but different seps depending on pred?.\n  If sep-nil is nil, then when pred? is false we don't interpose\n  anything!\"\n  [sep-true sep-nil pred? coll]\n  (loop [coll coll\n         out (transient [])\n         interpose? nil]\n    (if (empty? coll)\n      (persistent! out)\n      (recur (next coll)\n             (if interpose?\n               (conj-it! out sep-true (first coll))\n               (if (or (zero? (count out)) (nil? sep-nil))\n                 (conj! out (first coll))\n                 (conj-it! out sep-nil (first coll))))\n             (pred? (first coll))))))\n\n(defn precede-w-nl\n  \"Move through a sequence of style vecs and ensure that at least\n  one newline (actually an indent) appears before each element.  If\n  a newline in the style-vecs is where we wanted one, well and good.\n  If there are more than we wanted, be sure that they come out.\n  (Really? -- this is worth checking!)\n  Also, a comment gets a newline and shouldn't overlay a following\n  explicit newline.  If not-first? is truthy, then don't put a\n  newline before the first element.\"\n  [ind coll not-first?]\n  (loop [coll coll\n         ind-seq (if (coll? ind) ind (vector ind))\n         out (transient [])\n         added-nl? not-first?\n         previous-comment? nil]\n    (if (empty? coll)\n      (let [result (persistent! out)]\n        #_(prn \"precede-w-nl: exit:\" result)\n        (if previous-comment? (butlast result) result))\n      (let [[[s color what] :as element] (first coll)\n            ; This element may have many things in it, or sometimes\n            ; just one.\n            ;\n            ; I believe that if the first thing is a newline then they\n            ; must all be newlines.  We could check the last, or all of\n            ; them here, I suppose.  But these have to come from\n            ; fzprint-newline, to the best of my knowledge, and that is\n            ; how it works.\n            indent (first ind-seq)\n            newline? (= what :newline)\n            ; Let's make sure about the last\n            last-what (nth (last element) 2)\n            comment? (or (= last-what :comment) (= last-what :comment-inline))]\n        #_(prn \"precede-w-nl: (first coll):\" (first coll)\n               \"what:\" what\n               \"comment?:\" comment?\n               \"element:\" element)\n        (recur (next coll)\n               ; Move along ind-seq until we reach the last one, then just\n               ; keep using the last one.\n               (if-let [next-ind (next ind-seq)]\n                 next-ind\n                 ind-seq)\n               (if newline?\n                 ; It is a :newline, and possibly more, so just use it as\n                 ; it is.\n                 (conj! out element)\n                 ; It is not a :newline, so we want to make sure we have a\n                 ; newline in front of it, unless we already have one..\n                 (if added-nl?\n                   ; We already have a newline in front of it\n                   (if comment?\n                     (conj-it! out\n                               element\n                               [[(str \"\\n\" (blanks indent)) :none :indent]])\n                     (conj! out element))\n                   ; We need both a newline and the element\n                   (if comment?\n                     (conj-it! out\n                               [[(str \"\\n\" (blanks indent)) :none :indent]]\n                               element\n                               [[(str \"\\n\" (blanks indent)) :none :indent]])\n                     (conj-it! out\n                               [[(str \"\\n\" (blanks indent)) :none :indent]]\n                               element))))\n               ; Is there a newline as the last thing we just did?\n               ; Two ways for that to happen.\n               (or newline? comment?)\n               comment?)))))\n\n(defn count-newline-types\n  \"Analyze a style-vec which contains only newlines, the count of newlines\n  in the style vec.  We assume that each :newline style-vec contains one\n  newline (i.e., it was generated by fzprint-newlines).\"\n  [newline-style-vec]\n  ; TODO: Take this out if we don't get any exceptions while testing.\n  (let [count-of-types (count (distinct (map #(nth % 2) newline-style-vec)))]\n    (when (or (not= count-of-types 1)\n              (not= (nth (first newline-style-vec) 2) :newline))\n      (throw\n        (#?(:clj Exception.\n            :cljs js/Error.)\n         (str \"count-newline-types: more than one type or wrong type! count:\"\n                count-of-types\n              \" style-vec:\" newline-style-vec))))\n    (count newline-style-vec)))\n\n; transient helped a lot here\n(defn interpose-either-nl-hf\n  \"Do very specialized interpose, but different seps depending on pred-fn\n  return and nl-separator?. This assumes that sep-* does one line, and\n  sep-*-nl does two lines.\"\n  [sep-true sep-true-nl sep-nil sep-nil-nl\n   {:keys [nl-separator? nl-separator-flow?], :as suboptions} ;nl-separator?\n   pred-fn coll]\n  (loop [coll coll\n         out (transient [])\n         previous-pred? nil\n         add-nl? nil\n         first? true\n         newline-count 0]\n    (if (empty? coll)\n      (apply concat-no-nil (persistent! out))\n      (let [[hangflow style-vec] (first coll)\n            style-vec-empty? (and (= (count style-vec) 1)\n                                  (empty? (first (first style-vec))))]\n        #_(prn \"====>>>>>>>> interpose-either-nl-hf: style-vec:\" style-vec)\n        (cond\n          ; TODO: Get rid of this cond clause and the check for\n          ; it above if we haven't had the exception.\n          style-vec-empty?\n            ; We have a newline that has been removed, just skip this\n            ; one and move on.\n            #_(recur (next coll) out previous-pred? add-nl? no-interpose?)\n            ; I don't think we should get these anymore.\n            (throw (#?(:clj Exception.\n                       :cljs js/Error.)\n                    (str \"empty style vec:\" style-vec)))\n          (= (nth (first style-vec) 2) :newline)\n            ; We have a one or more newlines.  We are going to keep\n            ; track of what we've seen and will actually output things\n            ; later, when we know what we actually have.\n            ; For now, just increase the count and don't do anything\n            ; else.\n            (recur (next coll)\n                   out\n                   previous-pred?\n                   add-nl?\n                   first?\n                   (+ newline-count (count-newline-types style-vec)))\n          ;\n          #_(recur (next coll) (conj! out style-vec) nil nil true)\n          :else\n            ; We have a normal style-vec that we will process.  This one\n            ; has no newlines.  But we might have seen plenty of newlines\n            ; before this -- or not.\n            (let [[interpose-style-vec interpose-count]\n                    (if previous-pred?\n                      (if add-nl? [sep-true-nl 2] [sep-true 1])\n                      (if add-nl? [sep-nil-nl 2] [sep-nil 1]))\n                  ; if first? we assume that we get one newline from caller\n                  interpose-count (if first? 1 interpose-count)\n                  addtl-nl-needed (max (- newline-count interpose-count) 0)]\n              (recur\n                (next coll)\n                (if first?\n                  (if (zero? addtl-nl-needed)\n                    (conj! out style-vec)\n                    (conj-it! out\n                              (repeat addtl-nl-needed (first sep-nil))\n                              style-vec))\n                  (if (zero? addtl-nl-needed)\n                    (conj-it! out interpose-style-vec style-vec)\n                    (conj-it! out\n                              interpose-style-vec\n                              (repeat addtl-nl-needed (first sep-nil))\n                              style-vec)))\n                #_(if previous-pred?\n                    (conj-it! out (if add-nl? sep-true-nl sep-true) style-vec)\n                    (if first?\n                      ;(empty? out)\n                      (conj! out style-vec)\n                      (conj-it! out (if add-nl? sep-nil-nl sep-nil) style-vec)))\n                (when pred-fn (pred-fn style-vec))\n                ; should we put an extra new-line before the next element?\n                ; Two styles here:\n                ;  o  always put one if the previous pair contained a new-line\n                ;     which could be (but is not) the default\n                ;     To do this you would do:\n                ;       (and nl-separator? (not (single-line? style-vec)))\n                ;  o  put one only if the previous right hand part of the\n                ;     pair did a flow (which is the current default)\n                ;     To do this, you look for whether or not the return\n                ;     from fzprint-map-two-up said it was a flow\n                (and nl-separator? (= hangflow :flow))\n                nil ;first?\n                (if (do #_(prn \"interpose-either-nl-hf style-vec:\" style-vec\n                               \"newline-count:\" newline-count)\n                        (or (= (nth (last style-vec) 2) :comment)\n                            (= (nth (last style-vec) 2) :comment-inline)))\n                  (do #_(println \"******************\") 1)\n                  0)\n                #_0 ;newline-count\n                )))))))\n\n(defn interpose-nl-hf\n  \"Put a single or double line between pairs returned from\n  fzprint-map-two-up.  The second argument is the map resulting\n  from (:map options) or (:pair options) or whatever.  It should\n  have :nl-separator? and :nl-separator-flow? in it.\"\n  [suboptions ind coll]\n  (interpose-either-nl-hf nil\n                          nil\n                          [[(str \"\\n\" (blanks ind)) :none :indent]]\n                          [[(str \"\\n\") :none :indent]\n                           [(str \"\\n\" (blanks ind)) :none :indent]]\n                          suboptions\n                          #_(:nl-separator? suboptions)\n                          nil\n                          coll))\n\n(defn fzprint-map*\n  [caller l-str r-str\n   {:keys [one-line? ztype map-depth in-code?],\n    {:keys [comma? key-ignore key-ignore-silent nl-separator? force-nl? lift-ns?\n            lift-ns-in-code? respect-nl? indent-only? indent],\n     :as map-options}\n      caller,\n    :as options} ind zloc ns]\n  (if indent-only?\n    (let [options (assoc options :map-depth (inc map-depth))\n          l-str-vec [[l-str (zcolor-map options l-str) :left]]\n          r-str-vec (rstr-vec options (+ indent ind) zloc r-str)]\n      (if (zero? (zcount zloc))\n        (concat-no-nil l-str-vec r-str-vec)\n        (concat-no-nil l-str-vec\n                       (fzprint-indent caller\n                                       l-str\n                                       r-str\n                                       options\n                                       ind\n                                       zloc\n                                       nil ;fn-style\n                                       nil) ;arg-1-indent, will prevent hang\n                       r-str-vec)))\n    (let [options (assoc options :map-depth (inc map-depth))\n          zloc (if (and (= ztype :sexpr) (or key-ignore key-ignore-silent))\n                 (map-ignore caller options zloc)\n                 zloc)\n          [no-sort? pair-seq] (partition-all-2-nc (no-max-length options)\n                                                  (if respect-nl?\n                                                    #_(zmap-w-nl identity zloc)\n                                                    (zseqnws-w-nl zloc)\n                                                    #_(zmap identity zloc)\n                                                    (zseqnws zloc)))\n          #_(dbg-pr \"fzprint-map* pair-seq:\"\n                    (map (comp zstring first) pair-seq))\n          ; don't sort if we are doing respect-nl?\n          no-sort? (or no-sort? respect-nl?)\n          [ns lift-pair-seq]\n            (zlift-ns (assoc map-options :in-code? in-code?) pair-seq ns)\n          _ (dbg-pr options \"fzprint-map* zlift-ns ns:\" ns)\n          l-str (if ns (str \"#\" ns l-str) l-str)\n          pair-seq (or lift-pair-seq pair-seq)\n          pair-seq\n            (if no-sort? pair-seq (order-out caller options first pair-seq))\n          ; This is where you might put max-length\n          max-length (get-max-length options)\n          pair-count (count pair-seq)\n          pair-seq (if (> pair-count max-length)\n                     (concat (take max-length pair-seq)\n                             (list (list (zdotdotdot))))\n                     pair-seq)\n          indent (count l-str)\n          l-str-vec [[l-str (zcolor-map options l-str) :left]]\n          r-str-vec (rstr-vec options (+ indent ind) zloc r-str)]\n      (if (empty? pair-seq)\n        (concat-no-nil l-str-vec r-str-vec)\n        (let [_ (dbg options\n                     \"fzprint-map*:\" (zstring zloc)\n                     \"ind:\" ind\n                     \"comma?\" comma?\n                     \"rightcnt:\" (:rightcnt options))\n              ; A possible one line representation of this map, but this is\n              ; optimistic and needs to be validated.\n              pair-print-one-line\n                (fzprint-map-two-up\n                  caller\n                  (if one-line? options (assoc options :one-line? true))\n                  (+ indent ind)\n                  comma?\n                  pair-seq)\n              pair-print-one-line (remove-hangflow pair-print-one-line)\n              ; Does it fit on line line?\n              pair-print-one-line (when (fzfit-one-line options\n                                                        (style-lines\n                                                          options\n                                                          (+ indent ind)\n                                                          pair-print-one-line))\n                                    pair-print-one-line)\n              one-line (when pair-print-one-line\n                         (apply concat-no-nil\n                           (interpose-either [[\", \" :none :whitespace]]\n                                             [[\" \" :none :whitespace]]\n                                             (constantly comma?)\n                                             pair-print-one-line)))\n              one-line-lines (style-lines options (+ indent ind) one-line)\n              one-line (when (fzfit-one-line options one-line-lines) one-line)]\n          (if one-line\n            (concat-no-nil l-str-vec one-line r-str-vec)\n            ; It didn't fit on one line.\n            (when (not one-line?)\n              ; We weren't required to fit it on one line\n              (let [pair-print (fzprint-map-two-up caller\n                                                   options\n                                                   (+ indent ind)\n                                                   comma?\n                                                   pair-seq)]\n                (concat-no-nil l-str-vec\n                               ;(apply concat-no-nil\n                               (interpose-either-nl-hf\n                                 [[\",\" ;(str \",\" (blanks (inc ind)))\n                                   :none :whitespace]\n                                  [(str \"\\n\" (blanks (inc ind))) :none :indent]]\n                                 [[\",\" ;(str \",\" (blanks (inc ind)))\n                                   :none :whitespace] ; Fix issue #59 -- don't\n                                  ; put\n                                  ; blanks to indent before the next \\n\n                                  [\"\\n\" :none :indent]\n                                  [(str \"\\n\" (blanks (inc ind))) :none :indent]]\n                                 [[(str \"\\n\" (blanks (inc ind))) :none :indent]]\n                                 [[(str \"\\n\" (blanks (inc ind))) :none :indent]\n                                  [(str \"\\n\" (blanks (inc ind))) :none :indent]]\n                                 (:map options)\n                                 ;nl-separator?\n                                 #(and comma?\n                                       (not= (nth (first %) 2) :comment)\n                                       (not= (nth (first %) 2) :comment-inline))\n                                 pair-print)\n                               ; )\n                               r-str-vec)))))))))\n\n(defn fzprint-map\n  \"Format a real map.\"\n  [options ind zloc]\n  (let [[ns lifted-map]\n          (when (znamespacedmap? zloc)\n            ; Only true when operating on zippers\n            (let [zloc-seq (zmap identity zloc)]\n              (dbg-pr options \"fzprint-map: zloc-seq\" (map zstring zloc-seq))\n              [(zstring (first zloc-seq)) (second zloc-seq)]))]\n    (dbg-pr options\n            \"fzprint-map: ns:\" ns\n            \"indent:\" (:indent (:map options))\n            \"map-options:\" (:map options))\n    (if ns\n      (fzprint-map* :map\n                    \"{\"\n                    #_(str \"#\" ns \"{\")\n                    \"}\"\n                    (rightmost options)\n                    ind\n                    lifted-map\n                    ns)\n      (fzprint-map* :map \"{\" \"}\" (rightmost options) ind zloc nil))))\n\n(defn object-str?\n  \"Return true if the string starts with #object[\"\n  [s]\n  (re-find #\"^#object\\[\" s))\n\n(defn fzprint-object\n  \"Print something that looks like #object[...] in a way\n  that will acknowledge the structure inside of the [...]\"\n  ([options ind zloc zloc-value]\n   (fzprint-vec* :object\n                 \"#object[\"\n                 \"]\"\n                 options\n                 ind\n                 (zobj-to-vec zloc zloc-value)))\n  ([options ind zloc]\n   (fzprint-vec* :object \"#object[\" \"]\" options ind (zobj-to-vec zloc))))\n\n(defn hash-identity-str\n  \"Find the hash-code identity for an object.\"\n  [obj]\n  #?(:clj (Integer/toHexString (System/identityHashCode obj))\n     :cljs (str (hash obj))))\n\n; (with-out-str\n;    (printf \"%08x\" (System/identityHashCode obj))))\n\n(defn fzprint-atom\n  [{{:keys [object?]} :atom, :as options} ind zloc]\n  (if (and object? (object-str? (zstring zloc)))\n    (fzprint-object options ind zloc (zderef zloc))\n    (let [l-str \"#<\"\n          r-str \">\"\n          indent (count l-str)\n          l-str-vec [[l-str (zcolor-map options l-str) :left]]\n          r-str-vec (rstr-vec options (+ indent ind) zloc r-str)\n          arg-1 (str \"Atom@\" (hash-identity-str zloc))\n          arg-1-indent (+ ind indent 1 (count arg-1))]\n      (dbg-pr options\n              \"fzprint-atom: arg-1:\" arg-1\n              \"zstring arg-1:\" (zstring zloc))\n      (concat-no-nil l-str-vec\n                     [[arg-1 (zcolor-map options :none) :element]]\n                     (fzprint-hang-one :unknown\n                                       (rightmost options)\n                                       arg-1-indent\n                                       (+ indent ind)\n                                       (zderef zloc))\n                     r-str-vec))))\n\n(defn fzprint-future-promise-delay-agent\n  \"Print out a future or a promise or a delay.  These can only be \n  sexpressions, since they don't exist in a textual representation \n  of code (or data for that matter).  That means that we can use \n  regular sexpression operations on zloc.\"\n  [options ind zloc]\n  (let [zloc-type (cond (zfuture? zloc) :future\n                        (zpromise? zloc) :promise\n                        (zdelay? zloc) :delay\n                        (zagent? zloc) :agent\n                        :else (throw (#?(:clj Exception.\n                                         :cljs js/Error.)\n                                      \"Not a future, promise, or delay:\"\n                                      (zstring zloc))))]\n    (if (and (:object? (options zloc-type)) (object-str? (zstring zloc)))\n      (if (or (= zloc-type :agent) (realized? zloc))\n        (fzprint-object options ind zloc (zderef zloc))\n        (fzprint-object options ind zloc))\n      (let [l-str \"#<\"\n            r-str \">\"\n            indent (count l-str)\n            l-str-vec [[l-str (zcolor-map options l-str) :left]]\n            r-str-vec (rstr-vec options (+ indent ind) zloc r-str)\n            type-str (case zloc-type\n                       :future \"Future@\"\n                       :promise \"Promise@\"\n                       :delay \"Delay@\"\n                       :agent \"Agent@\")\n            arg-1 (str type-str (hash-identity-str zloc))\n            #?@(:clj [arg-1\n                      (if (and (= zloc-type :agent) (agent-error zloc))\n                        (str arg-1 \" FAILED\")\n                        arg-1)])\n              arg-1-indent\n            (+ ind indent 1 (count arg-1)) zloc-realized?\n            (if (= zloc-type :agent) true (realized? zloc)) value\n            (if zloc-realized?\n              (zderef zloc)\n              (case zloc-type\n                :future \"pending\"\n                :promise \"not-delivered\"\n                :delay \"pending\"))\n              options\n            (if zloc-realized? options (assoc options :string-str? true))]\n        (dbg-pr options\n                \"fzprint-fpda: arg-1:\" arg-1\n                \"zstring arg-1:\" (zstring zloc))\n        (concat-no-nil l-str-vec\n                       [[arg-1 (zcolor-map options :none) :element]]\n                       (fzprint-hang-one :unknown\n                                         (rightmost options)\n                                         arg-1-indent\n                                         (+ indent ind)\n                                         value)\n                       r-str-vec)))))\n\n(defn fzprint-fn-obj\n  \"Print a function object, what you get when you put a function in\n  a collection, for instance.  This doesn't do macros, you will notice.\n  It also can't be invoked when zloc is a zipper.\"\n  [{{:keys [object?]} :fn-obj, :as options} ind zloc]\n  (if (and object? (object-str? (zstring zloc)))\n    (fzprint-object options ind zloc)\n    (let [l-str \"#<\"\n          r-str \">\"\n          indent (count l-str)\n          l-str-vec [[l-str (zcolor-map options :fn) :left]]\n          r-str-vec (rstr-vec options (+ indent ind) zloc r-str :fn)\n          arg-1-left \"Fn@\"\n          arg-1-right (hash-identity-str zloc)\n          arg-1-indent (+ ind indent 1 (count arg-1-left) (count arg-1-right))\n          class-str (pr-str #?(:clj (class zloc)\n                               :cljs (type zloc)))\n          #?@(:clj [[class-name & more]\n                    (s/split (s/replace-first class-str #\"\\$\" \"/\") #\"\\$\") color\n                    (if (re-find #\"clojure\" class-name)\n                      (zcolor-map options :fn)\n                      :none) arg-2 (str class-name (when more \"[fn]\"))]\n              :cljs [name-js (str (.-name zloc)) color\n                     (if (or (re-find #\"^clojure\" name-js)\n                             (re-find #\"^cljs\" name-js))\n                       (zcolor-map options :fn)\n                       :none) name-split (clojure.string/split name-js #\"\\$\")\n                     arg-2\n                     (str (apply str (interpose \".\" (butlast name-split)))\n                          \"/\"\n                          (last name-split))])]\n      (dbg-pr options\n              \"fzprint-fn-obj: arg-1:\"\n              arg-1-left\n              arg-1-right\n              \"zstring arg-1:\"\n              (zstring zloc))\n      (concat-no-nil l-str-vec\n                     [[arg-1-left (zcolor-map options :fn) :element]]\n                     [[arg-1-right (zcolor-map options :none) :element]]\n                     (fzprint-hang-one :unknown\n                                       (rightmost (assoc options\n                                                    :string-str? true\n                                                    :string-color color))\n                                       arg-1-indent\n                                       (+ indent ind)\n                                       arg-2)\n                     r-str-vec))))\n\n(defn fzprint-ns\n  [options ind zloc]\n  (let [l-str \"#<\"\n        r-str \">\"\n        indent (count l-str)\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options (+ indent ind) zloc r-str)\n        arg-1 \"Namespace\"\n        arg-1-indent (+ ind indent 1 (count arg-1))]\n    (dbg-pr options\n            \"fzprint-atom: arg-1:\" arg-1\n            \"zstring arg-1:\" (zstring zloc))\n    (concat-no-nil l-str-vec\n                   [[arg-1 (zcolor-map options :none) :element]]\n                   (fzprint-hang-one :unknown\n                                     (rightmost options)\n                                     arg-1-indent\n                                     (+ indent ind)\n                                     (ns-name zloc))\n                   r-str-vec)))\n\n(defn dec-depth\n  \"Given an options map, decrement the :depth value and return the result.\"\n  [options]\n  (when options (assoc options :depth (dec (or (:depth options) 1)))))\n\n(defn fzprint-record\n  [{{:keys [record-type? to-string?]} :record, :as options} ind zloc]\n  (if to-string?\n    (fzprint* options ind (. zloc toString))\n    (if-not record-type?\n      ; if not printing as record-type, turn it into map\n      (fzprint* options ind (into {} zloc))\n      (let [l-str \"#\"\n            r-str \"\"\n            indent (count l-str)\n            l-str-vec [[l-str (zcolor-map options l-str) :left]]\n            r-str-vec (rstr-vec options (+ indent ind) zloc r-str)\n            arg-1 (pr-str #?(:clj (class zloc)\n                             :cljs (type zloc)))\n            arg-1 (let [tokens (clojure.string/split arg-1 #\"\\.\")]\n                    (apply str\n                      (into [] (interpose \".\" tokens))\n                      #_(conj (into [] (interpose \".\" (butlast tokens)))\n                              \"/\"\n                              (last tokens))))\n            arg-1-indent (+ ind indent 1 (count arg-1))]\n        (dbg-pr options\n                \"fzprint-record: arg-1:\" arg-1\n                \"zstring zloc:\" (zstring zloc))\n        (concat-no-nil l-str-vec\n                       [[arg-1 (zcolor-map options :none) :element]]\n                       (fzprint-hang-one :record\n                                         (dec-depth options)\n                                         ;(rightmost options)\n                                         arg-1-indent\n                                         (+ indent ind)\n                                         ; this only works because\n                                         ; we never actually get here\n                                         ; with a zipper, just an sexpr\n                                         (into {} zloc))\n                       r-str-vec)))))\n\n(defn fzprint-meta\n  \"Print the two items in a meta node.  Different because it doesn't print\n  a single collection, so it doesn't do any indent or rightmost.  It also\n  uses a different approach to calling fzprint-flow-seq with the\n  results zmap, so that it prints all of the seq, not just the rightmost.\"\n  [options ind zloc]\n  (let [l-str \"^\"\n        r-str \"\"\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options ind zloc r-str)]\n    (dbg-pr options \"fzprint-meta: zloc:\" (zstring zloc))\n    (concat-no-nil\n      l-str-vec\n      (if (:indent-only? (:list options))\n        ; Since l-str isn't a \"pair\" and shouldn't be considered in the\n        ; indent, we don't tell fzprint-indent abouit.\n        (fzprint-indent :vector\n                        l-str\n                        \"\"\n                        options\n                        ind\n                        zloc\n                        nil\n                        nil\n                        :first-indent-only?)\n        (fzprint-flow-seq\n          ; No rightmost, because this isn't a collection.\n          ; This is essentially two separate things.\n          options\n          ; no indent for second line, as the leading ^ is\n          ; not a normal collection beginning\n          ; TODO: change this to (+ (count l-str) ind)\n          (apply vector (+ (count l-str) ind) (repeat (dec (zcount zloc)) ind))\n          ;[(inc ind) ind]\n          (fzprint-get-zloc-seq :list options zloc)))\n      r-str-vec)))\n\n(defn fzprint-reader-macro\n  \"Print a reader-macro, often a reader-conditional. Adapted for differences\n  in parsing #?@ between rewrite-clj and rewrite-cljs.  Also adapted for\n  the rewrite-clj not parsing namespaced maps in the version presently\n  used.\"\n  [options ind zloc]\n  (let [zstr (zstring (zfirst zloc))\n        ; rewrite-cljs parses #?@ differently from rewrite-clj.  In\n        ; rewrite-cljs zfirst is ?@, not ?, so deal with that.\n        ; Not clear which is correct, I could see it go either way.\n        alt-at? (and (= (count zstr) 2) (= (subs zstr 1 2) \"@\"))\n        reader-cond? (= (subs zstr 0 1) \"?\")\n        ; are we dealing with a namespaced map?\n        ; 5/30/19 I don't know if we ever encounter this anymore...\n        ; Was unable to get namespaced? to be true despite running all 616\n        ; tests and some repl testing as well.\n        namespaced? (= (subs zstr 0 1) \":\")\n        at? (or (= (ztag (zsecond zloc)) :deref) alt-at?)\n        l-str (cond (and reader-cond? at?) \"#?@\"\n                    (and reader-cond? (zcoll? (zsecond zloc))) \"#?\"\n                    reader-cond?\n                      (throw (#?(:clj Exception.\n                                 :cljs js/Error.)\n                              (str \"Unknown reader macro: '\" (zstring zloc)\n                                   \"' zfirst zloc: \" (zstring (zfirst zloc)))))\n                    namespaced? (str \"#\" zstr)\n                    :else \"#\")\n        r-str \"\"\n        ; Error to debug zpst\n        _ (when (:dbg-bug? options)\n            #?(:clj (+ \"a\" \"b\")\n               :cljs nil))\n        indent (count l-str)\n        ; we may want to color this based on something other than\n        ; its actual character string\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options (+ indent ind) zloc r-str)\n        floc\n          (if (and at? (not alt-at?)) (zfirst (zsecond zloc)) (zsecond zloc))]\n    (dbg-pr options\n            \"fzprint-reader-macro: zloc:\" (zstring zloc)\n            \"floc:\" (zstring floc)\n            \"l-str:\" l-str)\n    (concat-no-nil\n      l-str-vec\n      ; Because there is a token here in the zipper, we need something to\n      ; make the focus positioning come out right.\n      [[\"\" :none :element]]\n      (if reader-cond?\n        ; yes rightmost, this is a collection\n        (fzprint-map* :reader-cond\n                      \"(\"\n                      \")\"\n                      (rightmost options)\n                      (+ indent ind)\n                      floc\n                      nil)\n        ; not reader-cond?\n        (fzprint-flow-seq options\n                          (+ indent ind)\n                          (let [zloc-seq (zmap identity zloc)]\n                            (if namespaced? (next zloc-seq) zloc-seq))))\n      r-str-vec)))\n\n(defn fzprint-newline\n  \"Given an element which contains newlines, split it up into individual\n  newline elements.\"\n  [options ind zloc]\n  (let [zstr (zstring zloc)\n        [newline-count _] (newline-vec zstr)]\n    (dbg-pr options\n            \"fzprint-newline: zloc:\" (zstring zloc)\n            \"newline-count:\" newline-count\n            \"ind:\" ind)\n    (into [] (repeat newline-count [(str \"\\n\" (blanks ind)) :none :newline]))))\n\n(def prefix-tags\n  {:quote \"'\",\n   :syntax-quote \"`\",\n   :unquote \"~\",\n   :unquote-splicing \"~@\",\n   :deref \"@\",\n   :var \"#'\",\n   :uneval \"#_\"})\n\n(defn prefix-options\n  \"Change options as necessary based on prefix tag.\"\n  [options prefix-tag]\n  (cond (= prefix-tag :uneval) (assoc options\n                                 :color-map (:color-map (:uneval options)))\n        (= prefix-tag :syntax-quote)\n          (-> options\n              (assoc-in [:color-map :paren]\n                        (:syntax-quote-paren (:color-map options)))\n              (assoc-in [:color-map :hash-paren]\n                        (:syntax-quote-paren (:color-map options))))\n        :else options))\n\n(defn make-caller\n  \"Sometime we need to give a caller to a routine, and there isn't\n  a specific caller in the configuration.  So, we will use the configuration\n  from some other caller and make up a new one just for this situation.\n  The key-seq is the series of keys to both look up and create.  The\n  caller is the new caller, and the existing-caller is the one from which\n  we we will extract the information. This returns a new options map with\n  the new-caller in it.\"\n  [options new-caller existing-caller key-seq]\n  (update-in options\n             (concat [new-caller] key-seq)\n             #(do % (get-in options (concat [existing-caller] key-seq)))))\n\n(declare inlinecomment?)\n\n;; Fix fzprint* to look at cursor to see if there is one, and\n;; fzprint to set cursor with binding.  If this works, might pass\n;; it around.  Maybe pass ctx to everyone and they can look at it\n;; or something.  But for testing, let's just do this.\n\n;;\n;; # The center of the zprint universe\n;;\n;; Looked into alternative ways to dispatch this, but at the end of\n;; the day, this looked like the best.\n;;\n\n(defn fzprint*\n  \"The pretty print part of fzprint.\"\n  [{:keys [width rightcnt fn-map hex? shift-seq dbg? dbg-print? in-hang?\n           one-line? string-str? string-color depth max-depth trim-comments?\n           in-code? max-hang-depth max-hang-span max-hang-count next-inner],\n    :as options} indent zloc]\n  (let [avail (- width indent)\n        ; note that depth affects how comments are printed, toward the end\n        options (assoc options :depth (inc depth))\n        options (if next-inner\n                  (dissoc\n                    (first (zprint.config/config-and-validate \"next-inner:\"\n                                                              nil\n                                                              options\n                                                              next-inner))\n                    :next-inner)\n                  options)\n        options (if (or dbg? dbg-print?)\n                  (assoc options\n                    :dbg-indent (str (get options :dbg-indent \"\")\n                                     (cond one-line? \"o\"\n                                           in-hang? \"h\"\n                                           :else \".\")))\n                  options)\n        _ (dbg options\n               \"fzprint* **** rightcnt:\"\n               rightcnt\n               \"depth:\"\n               depth\n               (pr-str (zstring zloc)))\n        dbg-data @fzprint-dbg\n        dbg-focus? (and dbg? (= dbg-data (second (zfind-path zloc))))\n        options (if dbg-focus? (assoc options :dbg :on) options)\n        _ (if dbg-focus? (println \"fzprint dbg-data:\" dbg-data))]\n    #_(def zlocx zloc)\n    ; We don't check depth if it is not a collection.  We might have\n    ; just not incremented depth if it wasn't a collection, but this\n    ; may be equivalent.\n    (cond\n      (and (zcoll? zloc)\n           (or (>= depth max-depth) (zero? (get-max-length options))))\n        (if (= zloc (zdotdotdot))\n          [[\"...\" (zcolor-map options :none) :element]]\n          [[(:max-depth-string options) (zcolor-map options :keyword)\n            :element]])\n      (and in-hang?\n           (not in-code?)\n           ;(> (/ indent width) 0.3)\n           (or (> (- depth in-hang?) max-hang-span)\n               (and (not one-line?)\n                    (> (zcount zloc) max-hang-count)\n                    (> depth max-hang-depth))))\n        nil\n      (zrecord? zloc) (fzprint-record options indent zloc)\n      (zlist? zloc) (fzprint-list options indent zloc)\n      (zvector? zloc) (fzprint-vec options indent zloc)\n      (or (zmap? zloc) (znamespacedmap? zloc)) (fzprint-map options indent zloc)\n      (zset? zloc) (fzprint-set options indent zloc)\n      (zanonfn? zloc) (fzprint-anon-fn options indent zloc)\n      (zfn-obj? zloc) (fzprint-fn-obj options indent zloc)\n      (zarray? zloc)\n        (if (:object? (:array options))\n          (fzprint-object options indent zloc)\n          (fzprint-array #?(:clj (if (:hex? (:array options))\n                                   (assoc options\n                                     :hex? (:hex? (:array options))\n                                     :shift-seq (zarray-to-shift-seq zloc))\n                                   options)\n                            :cljs options)\n                         indent\n                         (zexpandarray zloc)))\n      (zatom? zloc) (fzprint-atom options indent zloc)\n      (zmeta? zloc) (fzprint-meta options indent zloc)\n      (prefix-tags (ztag zloc))\n        (fzprint-vec* :prefix-tags\n                      (prefix-tags (ztag zloc))\n                      \"\"\n                      ; Pick up the :indent-only?\n                      ; config from :list\n                      (make-caller (prefix-options options (ztag zloc))\n                                   :prefix-tags\n                                   :list\n                                   [:indent-only?])\n                      indent\n                      zloc)\n      (zns? zloc) (fzprint-ns options indent zloc)\n      (or (zpromise? zloc) (zfuture? zloc) (zdelay? zloc) (zagent? zloc))\n        (fzprint-future-promise-delay-agent options indent zloc)\n      (zreader-macro? zloc) (fzprint-reader-macro options indent zloc)\n      ; This is needed to not be there for newlines in parse-string-all,\n      ; but is needed for respect-nl? support.\n      ;(and (= (ztag zloc) :newline) (> depth 0)) [[\"\\n\" :none :newline]]\n      (and (= (ztag zloc) :newline) (> depth 0))\n        (fzprint-newline options indent zloc)\n      :else\n        (let [zstr (zstring zloc)\n              overflow-in-hang? (and in-hang?\n                                     (> (+ (count zstr) indent (or rightcnt 0))\n                                        width))]\n          (cond\n            (and (zcomment? zloc)\n                 #_(not (clojure.string/starts-with? \";\" zstr))\n                 (not (some #{\\;} zstr)))\n              ; We should remvoe them when we get zutil fixed.\n              (fzprint-newline options indent zloc)\n            (zcomment? zloc)\n              (let [zcomment\n                      ; Do we have a file-level comment that is way too\n                      ; long??\n                      (if (and (zero? depth) (not trim-comments?))\n                        zstr\n                        (clojure.string/replace-first zstr \"\\n\" \"\"))\n                    ; Only check for inline comments if we are doing them\n                    ; otherwise we get left with :comment-inline element\n                    ; types that don't go away\n                    inline-comment-vec (when (:inline? (:comment options))\n                                         (inlinecomment? zloc))]\n                (dbg options\n                     \"fzprint* trim-comments?:\" trim-comments?\n                     \"inline-comment-vec:\" inline-comment-vec)\n                (if (and (:count? (:comment options)) overflow-in-hang?)\n                  (do (dbg options \"fzprint*: overflow comment ========\") nil)\n                  #_[[zcomment (zcolor-map options :comment) :comment]]\n                  (if inline-comment-vec\n                    [[zcomment (zcolor-map options :comment) :comment-inline\n                      (first inline-comment-vec) (second inline-comment-vec)]]\n                    [[zcomment (zcolor-map options :comment) :comment]])))\n            (= (ztag zloc) :comma) [[zstr :none :comma]]\n            ; Really just testing for whitespace, comments filtered above\n            (zwhitespaceorcomment? zloc) [[zstr :none :whitespace]]\n            ; At this point, having filtered out whitespace and\n            ; comments above, now we expect zsexpr will work for all of\n            ; the remaining things.\n            ;\n            ; If we are going to overflow, and we are doing a hang, let's\n            ; stop now!\n            overflow-in-hang? (do (dbg options \"fzprint*: overflow <<<<<<<<<<\")\n                                  nil)\n            (zkeyword? zloc) [[zstr (zcolor-map options :keyword) :element]]\n            (string? (zsexpr zloc))\n              [[(if string-str?\n                  (str (zsexpr zloc))\n                  ; zstr\n                  (zstring zloc))\n                (if string-color string-color (zcolor-map options :string))\n                :element]]\n            (showfn? fn-map (zsexpr zloc)) [[zstr (zcolor-map options :fn)\n                                             :element]]\n            (show-user-fn? options (zsexpr zloc))\n              [[zstr (zcolor-map options :user-fn) :element]]\n            (number? (zsexpr zloc))\n              [[(if hex? (znumstr zloc hex? shift-seq) zstr)\n                (zcolor-map options :number) :element]]\n            (nil? (zsexpr zloc)) [[zstr (zcolor-map options :nil) :element]]\n            :else [[zstr (zcolor-map options :none) :element]])))))\n\n;;\n;; # Comment Wrap Support\n;;\n\n(defn inlinecomment?\n  \"If this is an inline comment, returns a vector with the amount\n  of space that was between this and the previous element and the\n  starting column of this inline comment.  That means that if we\n  go left, we get something other than whitespace before a newline.\n  If we get only whitespace before a newline, then this is considered\n  an inline comment if the comment at the end of the previous line\n  was an inline comment and we were aligned with that comment.\n  Assumes zloc is a comment.\"\n  [zloc]\n  #_(prn \"inlinecomment? zloc:\" (zstring zloc))\n  (loop [nloc (zprint.zutil/left* zloc)\n         spaces 0]\n    (let [tnloc (ztag nloc)]\n      #_(prn \"inlinecomment? tnloc:\" tnloc)\n      (cond\n        (nil? tnloc) nil  ; the start of the zloc\n        (= tnloc :newline) nil\n        (or (= tnloc :comment) (= tnloc :comment-inline))\n          ; Two comments in a row don't have a newline showing between\n          ; them, it is captured by the first comment.  Sigh.\n          (do #_(prn \"inlinecomment? found previous comment!\")\n              ; is it an inline comment?\n              (when (inlinecomment? nloc)\n                ; figure the total alignment from the newline\n                (let [nloc-length-before (length-before nloc)\n                      zloc-length-before (length-before zloc)]\n                  #_(prn \"inlinecomment?:\"\n                         \"nloc-length-before:\" nloc-length-before\n                         \"zloc-length-before:\" zloc-length-before\n                         \"spaces:\" spaces)\n                  (if (= nloc-length-before zloc-length-before)\n                    ; we have a lineup\n                    [spaces zloc-length-before]\n                    nil))))\n        (not= tnloc :whitespace) [spaces (length-before zloc)]\n        :else (recur (zprint.zutil/left* nloc)\n                     ^long (+ ^long (zprint.zutil/length nloc) spaces))))))\n\n(defn last-space\n  \"Take a string and an index, and look for the last space prior to the\n  index. If we wanted to tie ourselves to 1.8, we could use \n  clojure.string/last-index-of, but we don't.  However, we use similar\n  conventions, i.e., if no space is found, return nil, and if the index\n  is a space return that value, and accept any from-index, including one\n  larger than the length of the string.\"\n  [s from-index]\n  (let [from-index (min (dec (count s)) from-index)\n        rev-seq (reverse (take (inc from-index) s))\n        seq-after-space (take-while #(not= % \\space) rev-seq)\n        space-index (- from-index (count seq-after-space))]\n    (if (neg? space-index) nil space-index)))\n\n(defn next-space\n  \"Take a string and an index, and look for the next space *after* the\n  index. If no space is found, return nil. Accept any from-index, \n  including one larger than the length of the string.\"\n  [s from-index]\n  (let [from-index (inc from-index)]\n    (when (< from-index (count s))\n      (let [seq-after-space (take-while #(not= % \\space)\n                                        (drop from-index (seq s)))\n            space-index (+ from-index (count seq-after-space))]\n        (if (>= space-index (count s)) nil space-index)))))\n\n; transient may have made this worse\n(defn wrap-comment\n  \"If this is a comment, and it is too long, word wrap it to the right width.\n  Note that top level comments may well end with a newline, so remove it\n  and reapply it at the end if that is the case.\"\n  [width [s color stype :as element] start]\n  (if-not (or (= stype :comment) (= stype :comment-inline))\n    element\n    (let [comment-width (- width start)\n          semi-str (re-find #\";*\" s)\n          rest-str (subs s (count semi-str))\n          space-str (re-find #\" *\" rest-str)\n          rest-str (subs rest-str (count space-str))\n          newline? (re-find #\"\\n$\" s)\n          comment-width (- comment-width (count semi-str) (count space-str))\n          #_(println \"\\ncomment-width:\" comment-width\n                     \"semi-str:\" semi-str\n                     \"space-str:\" space-str\n                     \"rest-str:\" rest-str)]\n      (loop [comment-str rest-str\n             out (transient [])]\n        #_(prn \"comment-str:\" comment-str)\n        (if (empty? comment-str)\n          (if (zero? (count out))\n            (if newline?\n              [[semi-str color stype] [\"\\n\" :none :indent]]\n              [[semi-str color stype]])\n            (persistent! (if newline? (conj! out [\"\\n\" :none :indent]) out)))\n          (let [last-space-index (if (<= (count comment-str) comment-width)\n                                   (dec (count comment-str))\n                                   (if (<= comment-width 0)\n                                     (or (next-space comment-str 0)\n                                         (dec (count comment-str)))\n                                     (or (last-space comment-str comment-width)\n                                         (next-space comment-str comment-width)\n                                         (dec (count comment-str)))))\n                next-comment (clojure.string/trimr\n                               (subs comment-str 0 (inc last-space-index)))]\n            #_(prn \"last-space-index:\" last-space-index\n                   \"next-comment:\" next-comment)\n            (recur\n              (subs comment-str (inc last-space-index))\n              (if (zero? (count out))\n                ;(empty? out)\n                (conj! out [(str semi-str space-str next-comment) color stype])\n                (conj! (conj! out [(str \"\\n\" (blanks start)) :none :indent])\n                       [(str semi-str space-str next-comment) color\n                        :comment-wrap])))))))))\n\n(defn loc-vec\n  \"Takes the start of this vector and the vector itself.\"\n  [start [s]]\n  (let [split (split-lf s)\n        #_(clojure.string/split s #\"\\n\")]\n    (if (= (count split) 1) (+ start (count s)) (count (last split)))))\n\n(defn style-loc-vec\n  \"Take a style-vec and produce a style-loc-vec with the starting column\n  of each element in the style-vec.\"\n  [style-vec]\n  (butlast (reductions loc-vec 0 style-vec)))\n\n; Transient didn't help here, rather it hurt a bit.\n\n(defn lift-vec\n  \"Take a transient output vector and a vector and lift any style-vec elements\n  out of the input vector.\"\n  [out-vec element]\n  (if (string? (first element))\n    (conj out-vec element)\n    (loop [element-vec element\n           out out-vec]\n      (if-not element-vec\n        out\n        (recur (next element-vec) (conj out (first element-vec)))))))\n\n(defn lift-style-vec\n  \"Take a style-vec [[s color type] [s color type] [[s color type]\n  [s color type]] [s color type] ...] and lift out the inner vectors.\"\n  [style-vec]\n  (reduce lift-vec [] style-vec))\n\n(defn fzprint-wrap-comments\n  \"Take the final output style-vec, and wrap any comments which run over\n  the width. Looking for \"\n  [{:keys [width], :as options} style-vec]\n  #_(def wcsv style-vec)\n  (let [start-col (style-loc-vec style-vec)\n        #_(def stc start-col)\n        _ (dbg options \"fzprint-wrap-comments: style-vec:\" (pr-str style-vec))\n        _ (dbg options \"fzprint-wrap-comments: start-col:\" start-col)\n        wrap-style-vec (mapv (partial wrap-comment width) style-vec start-col)\n        #_(def wsv wrap-style-vec)\n        _ (dbg options \"fzprint-wrap-comments: wrap:\" (pr-str style-vec))\n        out-style-vec (lift-style-vec wrap-style-vec)]\n    out-style-vec))\n\n(defn find-element-from-end\n  \"Find a the first element of this type working from the end of a \n  style-vec.  Return the index of the element.\"\n  [element-type style-vec]\n  (loop [index (dec (count style-vec))]\n    (if (neg? index)\n      nil\n      (let [[_ _ e] (nth style-vec index)]\n        (if (= e element-type) index (recur (dec index)))))))\n\n(defn line-size\n  \"Given a style-vec, how big is it in actual characters.  This doesn't\n  handle newlines.\"\n  [style-vec]\n  (apply + (map (partial loc-vec 0) style-vec)))\n\n(defn space-before-comment\n  \"Given a style-vec, whose last element in a comment, find the amount\n  of space before that comment on the line.\"\n  [style-vec]\n  (let [indent-index (find-element-from-end :indent style-vec)\n        this-line-vec\n          (if indent-index (nthnext style-vec indent-index) style-vec)]\n    (line-size (butlast this-line-vec))))\n\n(defn fzprint-inline-comments\n  \"Try to bring inline comments back onto the line on which they belong.\"\n  [{:keys [width], :as options} style-vec]\n  #_(def fic style-vec)\n  (dbg-pr options \"fzprint-inline-comments:\" style-vec)\n  (loop [cvec style-vec\n         last-out [\"\" nil nil]\n         out []]\n    (if-not cvec\n      (do #_(def fico out) out)\n      (let [[s c e :as element] (first cvec)\n            [_ _ ne nn :as next-element] (second cvec)\n            [_ _ le] last-out\n            new-element\n              (cond\n                (and (= e :indent) (= ne :comment-inline))\n                  (if-not (or (= le :comment) (= le :comment-inline))\n                    ; Regular line to get the inline comment\n                    [(blanks nn) c :whitespace]\n                    ; Last element was a comment...\n                    ; Can't put a comment on a comment, but\n                    ; we want to indent it like the last\n                    ; comment.\n                    ; How much space before the last comment?\n                    (do #_(prn \"inline:\" (space-before-comment out))\n                        [(str \"\\n\" (blanks (space-before-comment out))) c\n                         :indent]\n                        #_element))\n                ; Don't turn inline-comments into comments\n                #_#_(= e :comment-inline) [s c :comment]\n                :else element)]\n        (recur (next cvec) new-element (conj out new-element))))))\n\n;;\n;; ## Align inline comments\n;;\n\n(def max-aligned-inline-comment-distance 5)\n\n(defn find-aligned-inline-comments\n  \"Given a style-vec, find previously aligned inline comments and\n  output the as a sequence of vectors of comments. The previously\n  aligned comments do not have to be consecutive, but they can't\n  be separated by more than max-aligned-inline-comment-distance.\n  Each comment itself is a vector: [indent-index inline-comment-index],\n  yielding a [[[indent-index inline-comment-index] [indent-index\n  inline-comment-index] ...] ...].  The indexes are into the\n  style-vec.\"\n  [style-vec]\n  #_(def fcic style-vec)\n  (loop [cvec style-vec\n         index 0\n         last-indent 0\n         current-seq []\n         current-column 0\n         distance 0\n         out []]\n    (if-not cvec\n      (let [out (if (> (count current-seq) 1) (conj out current-seq) out)]\n        #_(def fcico out)\n        out)\n      (let [[s c e spaces start-column :as element] (first cvec)]\n        (cond (= e :comment-inline)\n                (if (= start-column current-column)\n                  ; include this inline comment in the current-seq, since\n                  ; it has the same starting column\n                  (recur (next cvec)\n                         (inc index)\n                         nil\n                         (if last-indent\n                           (conj current-seq [last-indent index])\n                           (do (throw (#?(:clj Exception.\n                                          :cljs js/Error.)\n                                       (str \"concat-no-nil:\" index)))\n                               []))\n                         current-column\n                         ; distance from last inline comment is zero\n                         0\n                         out)\n                  ; start a new current-seq, since this comment's starting\n                  ; column doesn't match the current-column of the current-seq\n                  (recur (next cvec)\n                         (inc index)\n                         nil\n                         (if last-indent\n                           [[last-indent index]]\n                           (do (throw (#?(:clj Exception.\n                                          :cljs js/Error.)\n                                       (str \"concat-no-nil:\" index)))\n                               []))\n                         ; new starting column\n                         start-column\n                         ; distance from the last inline comment is zero\n                         0\n                           ; if we have more than one current inline comments,\n                           ; add them to the out vector\n                           (if (> (count current-seq) 1)\n                             (conj out current-seq)\n                             out)))\n              (= e :indent)\n                (if (>= distance max-aligned-inline-comment-distance)\n                  ; We have gone too far\n                  (recur\n                    (next cvec)\n                    (inc index)\n                    ; last-indent is this index\n                    index\n                    []\n                    ; current-column\n                    0\n                    ; distance\n                    0\n                    (if (> (count current-seq) 1) (conj out current-seq) out))\n                  ; We have not gone too far\n                  (recur (next cvec)\n                         (inc index)\n                         ; last-indent is this index\n                         index\n                         current-seq\n                         current-column\n                         ; we've passed another line\n                         (inc distance)\n                         out))\n              :else (recur (next cvec)\n                           (inc index)\n                           last-indent\n                           current-seq\n                           current-column\n                           distance\n                           out))))))\n\n(defn find-consecutive-inline-comments\n  \"Given a style-vec, find consecutive inline comments and output\n  the as a sequence of vectors of comments.  Each comment itself\n  is a vector: [indent-index inline-comment-index], yielding a\n  [[[indent-index inline-comment-index] [indent-index inline-comment-index]\n  ...] ...]\"\n  [style-vec]\n  #_(def fcic style-vec)\n  (loop [cvec style-vec\n         index 0\n         last-indent 0\n         current-seq []\n         out []]\n    (if-not cvec\n      (do #_(def fcico out) out)\n      (let [[s c e :as element] (first cvec)]\n        (cond\n          (= e :comment-inline) (recur (next cvec)\n                                       (inc index)\n                                       nil\n                                       (if last-indent\n                                         (conj current-seq [last-indent index])\n                                         (do (throw\n                                               (#?(:clj Exception.\n                                                   :cljs js/Error.)\n                                                (str \"concat-no-nil:\" index)))\n                                             []))\n                                       out)\n          (= e :indent)\n            (recur (next cvec)\n                   (inc index)\n                   index\n                   (if last-indent\n                     ; if we have a last-indent, then we didn't\n                     ; just have a comment\n                     []\n                     ; if we don't have a last-indent, then we\n                     ; did just have a comment previously, so keep\n                     ; collecting comments\n                     current-seq)\n                   (if last-indent\n                     ; if we have a last-indent, then we didn't\n                     ; just have a comment.  But if we have more\n                     ; than one comment vector in current-seq,\n                     ; make sure we keep track of that\n                     (if (> (count current-seq) 1) (conj out current-seq) out)\n                     ; if we didn't have last-indent, then we\n                     ; just had a comment, so keep collecting\n                     ; them\n                     out))\n          :else (recur (next cvec) (inc index) last-indent current-seq out))))))\n(defn comment-column\n  \"Takes a single vector of [indent-index comment-index] and will show the\n  column on the line in which the comment starts.\"\n  [[indent-index comment-index] style-vec]\n  (when-not (vector? style-vec)\n    (throw (#?(:clj Exception.\n               :cljs js/Error.)\n            (str \"comment-column: style-vec not a vector!! \" style-vec))))\n  (loop [index indent-index\n         column 0]\n    (if (= index comment-index)\n      column\n      (recur (inc index) (loc-vec column (nth style-vec index))))))\n\n(defn comment-vec-column\n  \"Take a single inline comment vector:\n  [indent-index inline-comment-index] \n  and replace it with [inline-comment-index start-column spaces-before].\"\n  [style-vec [indent-index inline-comment-index :as comment-vec]]\n  (let [start-column (comment-column comment-vec style-vec)\n        spaces-before (loc-vec 0 (nth style-vec (dec inline-comment-index)))]\n    [inline-comment-index start-column spaces-before]))\n\n(defn comment-vec-seq-column\n  \"Take a single vector of inline comments\n  [[indent-index inline-comment-index] [indent-index inline-comment-index]\n   ...] and replace it with [[inline-comment-index start-column spaces-before]\n   [inline-comment-index start-column spaces-before] ...]\"\n  [style-vec comment-vec-seq]\n  (map (partial comment-vec-column style-vec) comment-vec-seq))\n\n(defn comment-vec-all-column\n  \"Take a seq of all of the comments as produced by \n  find-consecutive-inline-comments, and turn it into:\n  [[[inline-comment-index start-column spaces-before] [inline-comment-index\n  start-column spaces-before]\n  ...] ...]\"\n  [style-vec comment-vec-all]\n  (map (partial comment-vec-seq-column style-vec) comment-vec-all))\n\n(defn minimum-column\n  \"Given a set of inline comments:\n  [[inline-comment-index start-column spaces-before]\n   [inline-comment-index start-column spaces-before] ...], determine\n   the minimum column at which they could be aligned.\"\n  [comment-vec]\n  (let [minimum-vec (map #(inc (- (second %) (nth % 2))) comment-vec)\n        minimum-col (apply max minimum-vec)]\n    minimum-col))\n\n(defn change-start-column\n  \"Given a new start-column, and a vector \n  [[inline-comment-index start-column spaces-before]\n  and a style-vec, return a new style-vec with the inline-comment starting\n  at a new column.\"\n  [new-start-column style-vec\n   [inline-comment-index start-column spaces-before :as comment-vec]]\n  (let [delta-spaces (- new-start-column start-column)\n        new-spaces (+ spaces-before delta-spaces)\n        previous-element-index (dec inline-comment-index)\n        #_(prn \"change-start-column:\"\n               \"spaces-before:\" spaces-before\n               \"delta-spaces:\" delta-spaces\n               \"new-spaces:\" new-spaces)\n        [s c e :as previous-element] (nth style-vec previous-element-index)\n        new-previous-element\n          (cond (= e :indent) [(str \"\\n\" (blanks new-spaces)) c e]\n                (= e :whitespace) [(str (blanks new-spaces)) c e]\n                :else (throw\n                        (#?(:clj Exception.\n                            :cljs js/Error.)\n                         (str \"change-start-column: comment preceded by neither\"\n                              \" an :indent nor :whitespace!\"\n                              e))))]\n    (assoc style-vec previous-element-index new-previous-element)))\n\n(defn align-comment-vec\n  \"Given one set of inline comments: \n  [[inline-comment-index start-column spaces-before]\n   [inline-comment-index start-column spaces-before] ...], align them \n   as best as possible, and return the modified style-vec.\"\n  [style-vec comment-vec]\n  (let [minimum-col (minimum-column comment-vec)]\n    (reduce (partial change-start-column minimum-col) style-vec comment-vec)))\n\n(defn fzprint-align-inline-comments\n  \"Given the current style-vec, align all consecutive inline comments.\"\n  [options style-vec]\n  (let [style (:inline-align-style (:comment options))]\n    (if (= style :none)\n      style-vec\n      (let [comment-vec (cond (= style :aligned) (find-aligned-inline-comments\n                                                   style-vec)\n                              (= style :consecutive)\n                                (find-consecutive-inline-comments style-vec))\n            comment-vec-column (comment-vec-all-column style-vec comment-vec)]\n        (reduce align-comment-vec style-vec comment-vec-column)))))\n\n;;\n;; # External interface to all fzprint functions\n;;\n\n(defn fzprint\n  \"The pretty print part of fzprint.\"\n  [options indent zloc]\n  #_(def opt options)\n  #_(println \"fzprint: indent:\" indent \"(:indent options)\" (:indent options))\n  ; if we are doing specs, find the docstring and modify it with\n  ; the spec output.\n  #_(println \"fn-name:\" (:fn-name options))\n  #_(println \"spec:\" (:value (:spec options)))\n  (let [zloc (if-not (and (= (:ztype options) :zipper) (:value (:spec options)))\n               zloc\n               (add-spec-to-docstring zloc (:value (:spec options))))\n        style-vec (fzprint* (assoc options\n                              :depth 0\n                              :map-depth 0)\n                            indent\n                            zloc)]\n    #_(def fsv style-vec)\n    style-vec))\n\n;    (if (= (:ztype options) :sexpr)\n;      style-vec\n;      (if (:wrap? (:comment options))\n;        (fzprint-wrap-comments options style-vec)\n;        style-vec))))\n\n;;\n;; # Basic functions for testing results -- used only for tests\n;;\n\n(defn line-count \"Count lines in a string.\" [s] (inc (count (re-seq #\"\\n\" s))))\n\n(defn line-widths\n  \"Return a vector the lengths of lines.\"\n  [s]\n  (map count (clojure.string/split s #\"\\n\")))\n\n(defn max-width\n  \"Split a string into lines, and figure the max width.\"\n  [s]\n  (reduce max (line-widths s)))\n\n;;\n;; # Tab Expansion\n;;\n\n(defn expand-tabs\n  \"Takes a string, and expands tabs inside of the string based\n  on a tab-size argument.\"\n  ([tab-size s]\n   (apply str\n     (loop [char-seq (seq s)\n            cur-len (long 0)\n            out (transient [])]\n       (if (empty? char-seq)\n         (persistent! out)\n         (let [this-char (first char-seq)\n               tab-expansion (if (= this-char \\tab)\n                               (- tab-size (mod cur-len tab-size))\n                               nil)]\n           (recur (rest char-seq)\n                  (if (= this-char \\newline)\n                    0\n                    (+ cur-len (long (or tab-expansion 1))))\n                  (if tab-expansion\n                    (apply conj-it! out (seq (blanks tab-expansion)))\n                    (conj! out this-char))))))))\n  ([s] (expand-tabs 8 s)))\n\n;;\n;; # Needed for expectations testing\n;;\n;; Seems defrecord doesn't work in test environment, which is pretty odd.\n;;\n\n(defrecord r [left right])\n(defn make-record [l r] (new r l r))\n\n;;\n;; End of testing functions\n;;\n","~:reader-features",["^S",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["zprint.zprint/blanks","n","cljs.core.apply","cljs.core/str","cljs.core.repeat","zprint.zprint/dots","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","zprint.zprint/conj-it!","seq51305","self__4724__auto__","cljs.core/seq","rest","out","cljs.core/first","more","cljs.core/next","cljs.core.conj_BANG_","zprint.zprint/split-lf","s","input","cljs.core/not","next-lf","clojure.string.index_of","chunk","cljs.core.subs","cljs.core.conj","zprint.zprint/split-lf-2","temp__5733__auto__","G__51316","zprint.zprint/zpmap","js/Error","options","f","coll","cljs.core.map","coll1","coll2","zprint.zprint/zat","value","zprint.zprint/fzprint-dbg","cljs.core.atom","p__51320","map__51321","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","zprint.zprint/log-lines","dbg-print?","dbg-indent","in-hang?","dbg-output","ind","style-vec","cljs.core.println","cljs.core.prn","zprint.zprint/showfn?","fn-map","f-str","or__4126__auto__","cljs.core/re-find","cljs.core/Symbol","e51325","cljs.core/meta","G__51326","cljs.core/name","e","zprint.zprint/show-user-fn?","user-fn-map","e51328","cljs.core/empty?","zprint.zprint/right-separator-map","p__51331","p__51332","p__51333","map__51334","map__51335","map__51336","vec__51337","cljs.core.nth","vec__51340","zprint.zprint/good-enough?","caller","width","rightcnt","dbg?","hang-flow","hang-type-flow","hang-flow-limit","general-hang-adjust","hang-if-equal-flow?","hang-expand","hang-diff","hang-size","hang-adjust","fn-style","p-count","indent-diff","p-lines","p-maxwidth","p-length-seq","p-what","b-lines","b-maxwidth","_","b-what","p-last-maxwidth","cljs.core/last","cljs.core.assoc","result","and__4115__auto__","zprint.zprint/fix-rightcnt","cljs.core._EQ_","factor","zprint.zprint/in-hang","zprint.zprint/contains-nil?","cljs.core/count","p1__51379#","cljs.core.filter","cljs.core/coll?","zprint.zprint/concat-no-nil-alt","seq51380","cljs.core/transient","c","cljs.core/persistent!","zprint.zprint/concat-no-nil-pre-noseq","seq51393","cljs.core.reduce","v","o","cljs.core/reduced","cljs.core/conj!","zprint.zprint/concat-no-nil","seq51397","zprint.zprint/force-vector","cljs.core/vector?","cljs.core.into","zprint.zprint/keyword-fn?","vec__51398","left","right","clojure.string.split","fexpr__51401","p__51402","map__51403","zprint.zprint/get-max-length","max-length","depth","x__4217__auto__","y__4218__auto__","zprint.zprint/no-max-length","p__51405","vec__51406","zprint.zprint/accumulate-ll","count-comment?","cur-len","just-eol?","just-comment?","in","tag","eol?","comment?","count-s","p__51409","p__51410","vec__51411","vec__51414","zprint.zprint/generate-ll","element","vec__51417","l","r","cljs.core/List","zprint.zprint/line-lengths-iter","next-vec","current-string","line-length","previous-comment?","vec__51426","vec__51429","advance?","next-string","force-newline?","new-line-length","zprint.zprint/line-lengths","length-vec","vec__51432","cljs.core.partial","zprint.zprint/single-line?","p1__51435#","p2__51436#","p1__51437#","clojure.string/includes?","zprint.zprint/find-what","s-vec","vec__51438","what","this","zprint.zprint/style-lines","lengths","count-lengths","cljs.core/max","dbg-ge","p__51441","p__51442","map__51443","vec__51444","zprint.zprint/fzfit","line-count","max-width","style-lines-return","zprint.zprint/fzfit-one-line","lines","zprint.zprint/rightmost","zprint.zprint/not-rightmost","cljs.core.dissoc","zprint.zprint/c-r-pair","commas?","rightmost-pair?","rightmost?","zprint.zprint/str->key","p__51448","map__51449","zprint.zprint/zcolor-map","color-map","key-or-str","G__51451","cljs.core/Keyword","zprint.zprint/hangflow","hangflow?","hang-or-flow","zprint.zprint/fzprint-hang-unless-fail","hindent","findent","fzfn","zloc","G__51452","zprint.zfns/zstring","zprint.zfns/zfirst","hanging","cljs.core.not_EQ_","G__51453","G__51454","G__51455","value__51281__auto__","cljs.core.pr_str","zprint.zprint.concat_no_nil","zprint.zprint/replace-color","local-color","vec__51456","vec__51459","string","color","p__51462","p__51463","map__51464","map__51465","vec__51466","zprint.zprint/fzprint-two-up","one-line?","do-in-hang?","map-depth","hang?","dbg-local?","dbg-cnt?","indent","indent-arg","flow?","key-color","key-depth-color","key-value-color","justify-width","lloc","rloc","xloc","pair","zprint.zfns/ztag","vec__51471","vec__51474","local-hang?","local-options","loptions","roptions","local-roptions","value-color-map","G__51477","zprint.zfns/zsexpr","zprint.config.merge_deep","modifier-set","modifier?","G__51483","zprint.zprint/middle-element?","G__51484","arg-1","zprint.zprint/fzprint*","arg-1-newline?","zprint.zfns/znewline?","arg-1-line-count","arg-1-max-width","arg-1-lines","combined-arg-1","G__51485","G__51486","G__51487","arg-1-fit-oneline?","arg-1-fit?","arg-1-width","hanging-width","hanging-spaces","hanging-indent","flow-indent","zprint.zfns/zvector?","vec__51488","zprint.zprint/fzprint-binding-vec","G__51491","G__51492","G__51493","hang-count","zprint.zfns/zcount","hanging-lines","fit?","flow-it?","flow","flow-lines","G__51494","G__51495","G__51496","G__51497","G__51498","zprint.zprint/fzprint-flow-seq","cljs.core/nnext","p__51504","map__51505","map__51506","zprint.zprint/fzprint-justify-width","justify?","firsts","cljs.core.remove","cljs.core/nil?","p1__51499#","G__51509","G__51510","G__51511","style-seq","each-one-line?","p1__51500#","p2__51501#","p1__51502#","p2__51503#","x__4214__auto__","y__4215__auto__","cljs.core/second","G__51513","zprint.zprint/fit-within?","size","zprint.zprint.fit_within_QMARK_","remaining","zprint.zprint/remove-hangflow","hf-style-vec","p__51514","map__51515","map__51516","zprint.zprint/fzprint-map-two-up","force-nl?","parallel?","caller-map","len","caller-options","justify-options","beginning-coll","cljs.core/butlast","beginning-remaining","beginning","zprint.zprint.zpmap","end-coll","end-remaining","end","temp__5735__auto__","end-result","zprint.zprint/compare-keys","x","y","cljs.core/compare","zprint.zprint/compare-ordered-keys","key-value","zdotdotdot","p__51521","map__51522","map__51523","zprint.zprint/order-out","sort?","sort-in-code?","key-order","in-code?","access","p1__51519#","p2__51520#","cljs.core.sort","zprint.zfns/zdotdotdot","G__51526","G__51527","zprint.zprint/pair-element?","zprint.zfns/zcomment?","zprint.zfns/zuneval?","p__51528","map__51529","zprint.zprint/remove-key-seq","m","ks","this-key","next-key","removed-map","G__51531","G__51532","zprint.zprint/ignore-key-seq-silent","cljs.core.get_in","zprint.zprint/ignore-key-seq","cljs.core/assoc-in","p__51533","map__51534","map__51535","zprint.zprint/map-ignore","key-ignore","key-ignore-silent","ignored-silent","ignored","zprint.zprint/partition-all-2-nc","no-sort?","index","vec__51548","new-remaining","pair-vec","new-no-sort?","vec__51551","comment-seq","rest-seq","p1__51538#","cljs.core/split-with","cljs.core.concat","G__51554","G__51555","G__51556","zprint.zprint/cleave-end","G__51559","zprint.zfns/zsymbol?","G__51560","zprint.zfns/zreader-cond-w-symbol?","vec__51561","rev-seq","cljs.core/reverse","split-non-coll","p1__51557#","zprint.zfns/zcoll?","zprint.zfns/zreader-cond-w-coll?","cljs.core/list","remainder","cljs.core.take","zprint.zprint/partition-all-sym","part-sym","p1__51564#","cljs.core.partition_by","zprint.zfns/znil?","cljs.core.mapcat","vec__51605","next-remaining","new-out","G__51619","cljs.core/ffirst","G__51621","G__51622","G__51640","G__51641","G__51642","cljs.core/nthnext","G__51643","G__51644","cljs.core/cons","G__51646","zprint.zprint/rstr-vec","r-str","r-type","nl","G__51647","zprint.zfns/zlast","zprint.zprint.rstr_vec","p__51648","map__51649","map__51650","nl-separator?","G__51653","l-str","l-str-vec","r-str-vec","G__51654","G__51655","G__51656","zprint.zprint/interpose-nl-hf","zprint.zfns/zseqnws","p__51657","map__51658","zprint.zprint/fzprint-hang","zloc-count","fexpr__51663","G__51664","G__51665","G__51666","G__51667","hr-lines","fd-lines","hr-good?","p__51668","map__51669","map__51670","zprint.zprint/fzprint-pairs","zloc-seq","G__51673","G__51674","G__51675","G__51676","vec__51677","part","cljs.core.comp","p__51681","map__51682","map__51683","zprint.zprint/fzprint-extend","G__51686","G__51687","G__51688","G__51689","p1__51680#","zprint.zprint/concatv!","seq51690","G__51691","self__4723__auto__","cols","col","zprint.zprint/fzprint-one-line","seq-right","last-index","gt-1?","new-ind","cljs.core/long","vec__51698","vec__51701","next-zloc","sep","next-options","next-out","next-lines","zprint.zprint.concatv_BANG_","zprint.zprint/fzprint-seq","p1__51704#","p2__51705#","G__51706","G__51707","G__51708","G__51709","G__51710","G__51711","G__51713","nl-first?","coll-print","one-line","cljs.core.interpose","one-line-lines","G__51714","G__51715","G__51716","zprint.zprint/precede-w-nl","zprint.zprint.fzprint_flow_seq","p__51717","map__51718","map__51719","zprint.zprint/fzprint-hang-one","hang-avoid","G__51722","G__51723","G__51724","G__51725","zprint.zprint/count-constant-pairs","seq-right-rev","element-count","constant-required?","pair-size","comment-or-newline?","zprint.zprint/zcomment-or-newline?","zprint.zfns/zconstant?","p__51726","map__51727","map__51728","zprint.zprint/constant-pair","constant-pair?","constant-pair-min","paired-item-count","non-paired-item-count","pair-seq","cljs.core.drop","zprint.zprint/ensure-start-w-nl","element-type","zprint.zprint/ensure-end-w-nl","G__51732","zprint.zprint/fzprint-hang-remaining","p__51733","map__51734","map__51735","respect-nl?","G__51738","G__51739","vec__51740","vec__51743","vec__51746","flow-result","hang-result","zprint.zprint.fzprint_hang_remaining","zprint.zprint/fzprint-get-zloc-seq","zprint.zfns/zmap-w-nl","cljs.core/identity","zprint.zfns/zmap","zprint.zprint/newline-or-comment?","zloc-tag","zprint.zprint/remove-last-newline","ssv","last-style-vec","last-len","total-len","remove-one","cljs.core/PersistentVector","zprint.zprint/add-newline-to-comment","fzprint*-return","the-type","zprint.zprint/gather-up-to-next-zloc","nloc-seq","next-count","p__51749","vec__51750","zprint.zprint/fzprint-up-to-next-zloc","current-count","next-data","starting-count","vec__51753","pre-next-zloc-seq","coll-out","first-type","zprint.zprint/fzprint-up-to-first-zloc","p__51756","vec__51757","zprint.zprint/get-zloc-seq-right","input-data","zprint.zprint/at-newline?","this-tag","zprint.zprint/next-newline","nloc","next-right","zprint.zutil/right*","zprint.zutil/whitespace?","zprint.zprint/length-after-newline","nl-split","nl-num","zprint.zprint/tag-l-size","t","G__51760","zprint.zprint/left-or-up","ploc","total-up","next-left","zprint.zutil/left*","moving-up","zprint.zutil/up*","up-tag","zprint.zutil/tag","up-size","zprint.zprint/length-before","vec__51761","indent-before","vec__51767","zstr","length-right-of-newline","zprint.zprint/next-actual","next-nloc","zprint.zutil/zrightnws","next-tag","zprint.zprint/first-actual","zprint.zprint/hang-zloc?","vec__51770","count-prior-to-newline","newline","second-element","second-indent","third-element","third-indent","zprint.zprint/indent-shift","actual-ind","svec","shift-ind","cur-seq","cur-ind","vec__51779","this-seq","new-seq","vec__51782","type","linecnt","last-width","G__51786","zprint.zprint/indent-zmap","p__51787","map__51788","map__51789","wrap-after-multi?","first-indent-only?","zprint.zprint/merge-fzprint-seq","actual-indent","beginning?","l-str-indent?","vec__51795","multi?","thetype","newline?","comma?","isempty?","newline-before?","newline-after?","zprint.zprint.indent_zmap","zprint.zprint/hang-indent","zprint.zprint/flow-indent","zprint.zprint/newline-seq?","newline-vec","starts-with-nl-vec","p1__51798#","cljs.core.mapv","clojure.string/starts-with?","true-seq","cljs.core.distinct","fzprint-seq-vec","p1__51800#","p2__51799#","cljs.core/vector","zprint.zprint/fzprint-indent-x","arg-1-indent","l-str-len","scalar-ind","indent-only-style","already-hung?","raw-indent","coll-print-contains-nil?","output","G__51802","zprint.zprint/fzprint-indent","zprint.zfns/zmap-w-nl-comma","zprint.zprint.fzprint_indent","zprint.zprint/zfind-seq","zthing?","i","G__51803","zprint.zprint/body-set","zprint.zprint/body-map","zprint.zprint/noarg1-set","zprint.zprint/noarg1-map","zprint.zprint/noarg1","fn-type","zprint.zprint/fn-style->caller","p__51804","map__51805","zprint.zprint/allow-one-line?","fn-force-nl","fn-gt2-force-nl","fn-gt3-force-nl","future-caller","zprint.zprint/modify-zloc","vec__51807","trigger-symbol","modify-fn","return-altered-zipper-value","call-fn?","G__51817","return","p__51819","map__51820","zprint.zprint/fzprint-list*","no-arg1?","vec__51822","vec__51825","vec__51828","G__51831","G__51832","G__51833","zprint.zfns/ztake-append","pre-arg-1-style-vec","arg-1-zloc","arg-1-count","first-data","arg-1-coll?","zprint.zfns/zkeyword?","arg-1-indent-alt?","fn-str","G__51834","zprint.config/config-and-validate","pre-arg-2-style-vec","arg-2-zloc","arg-2-count","second-data","zprint.zfns/zcount-zloc-seq-nc-nws","indent-only?","one-line-ok?","fexpr__51835","indent-adj","default-indent","zprint.zfns/zlist?","one-line-ind","vec__51836","binding-style-vec","G__51839","G__51840","G__51841","zloc-seq-right-first","G__51842","G__51843","G__51844","G__51845","G__51846","G__51847","vec__51848","vec__51851","pre-arg-3-style-vec","arg-3-zloc","arg-3-count","third-data","zloc-seq-right-third","first-three","first-two-wo-pre-arg-1","G__51854","G__51855","G__51856","first-two-one-line?","first-two","G__51857","G__51858","G__51859","vec__51860","vec__51863","pre-arg-4-style-vec","arg-4-zloc","arg-4-count","fourth-data","arg-vec-index","p1__51818#","G__51867","doc-string?","mixin-start","mixin-length","mixins?","doc-string","mixins","vec__51868","mixin-sentinal","G__51871","G__51872","G__51873","G__51874","G__51875","G__51876","zloc-seq-right-second","G__51877","G__51878","G__51879","G__51880","G__51881","G__51882","G__51883","G__51884","G__51885","G__51886","G__51887","G__51888","local-indent","zprint.zprint/fzprint-list","zprint.zprint/fzprint-anon-fn","zprint.zprint/any-zcoll?","coll?-seq","p1__51889#","p2__51890#","p__51891","map__51892","map__51893","zprint.zprint/wrap-zmap","previous-newline?","next-seq","vec__51899","comment-inline?","zprint.zprint/remove-nl","p1__51902#","zprint.zprint/internal-validate","error-str","errors","zprint.config.validate_options","zprint.zprint/lazy-sexpr-seq","nws-seq","cljs.core/LazySeq","G__51903","G__51904","cljs.core/rest","p__51905","map__51906","map__51907","zprint.zprint/fzprint-vec*","wrap-coll?","wrap?","binding?","option-fn-first","option-fn","fn-format","map__51910","map__51911","new-options","first-sexpr","G__51912","zprint.zfns/zfirst-no-comment","zprint.zfns/zwhitespaceorcomment?","nws-count","sexpr-seq","zprint.zprint/fzprint-vec","zprint.zprint/fzprint-array","zprint.zprint/fzprint-set","zprint.zprint/interpose-either","sep-true","sep-nil","pred?","interpose?","zprint.zprint.conj_it_BANG_","G__51916","not-first?","ind-seq","added-nl?","vec__51923","vec__51926","last-what","next-ind","zprint.zprint/count-newline-types","newline-style-vec","count-of-types","p1__51929#","p__51930","map__51931","zprint.zprint/interpose-either-nl-hf","sep-true-nl","sep-nil-nl","nl-separator-flow?","suboptions","pred-fn","previous-pred?","add-nl?","first?","newline-count","vec__51939","hangflow","style-vec-empty?","vec__51942","interpose-style-vec","interpose-count","addtl-nl-needed","p__51946","map__51947","map__51948","zprint.zprint/fzprint-map*","ztype","lift-ns?","lift-ns-in-code?","map-options","ns","vec__51951","vec__51954","zprint.zfns/zseqnws-w-nl","lift-pair-seq","G__51957","G__51958","G__51959","zprint.zfns/zlift-ns","pair-count","pair-print-one-line","cljs.core/constantly","pair-print","p1__51945#","zprint.zprint/fzprint-map","vec__51960","lifted-map","zprint.zfns/znamespacedmap?","G__51963","zprint.zprint/object-str?","G__51965","zprint.zprint/fzprint-object","zloc-value","zprint.zfns/zobj-to-vec","zprint.zprint/hash-identity-str","obj","cljs.core/hash","p__51966","map__51967","map__51968","zprint.zprint/fzprint-atom","object?","zprint.zprint.fzprint_object","zprint.zfns/zderef","zprint.zprint/fzprint-future-promise-delay-agent","zloc-type","zprint.zfns/zfuture?","zprint.zfns/zpromise?","zprint.zfns/zdelay?","zprint.zfns/zagent?","cljs.core/realized?","type-str","G__51971","zloc-realized?","G__51972","p__51973","map__51974","map__51975","zprint.zprint/fzprint-fn-obj","arg-1-left","arg-1-right","class-str","cljs.core/type","name-js","name-split","arg-2","zprint.zprint/fzprint-ns","cljs.core/ns-name","zprint.zprint/dec-depth","p__51978","map__51979","map__51980","zprint.zprint/fzprint-record","record-type?","to-string?","G__51983","G__51984","G__51985","G__51986","G__51987","G__51988","tokens","zprint.zprint/fzprint-meta","zprint.zprint/fzprint-reader-macro","G__51989","alt-at?","reader-cond?","namespaced?","at?","G__51991","zprint.zfns/zsecond","G__51993","G__51995","floc","G__51996","zprint.zprint/fzprint-newline","vec__51997","zprint.finish/newline-vec","zprint.zprint/prefix-tags","zprint.zprint/prefix-options","prefix-tag","zprint.zprint/make-caller","new-caller","existing-caller","key-seq","p1__52000#","cljs.core.update_in","p__52001","map__52002","hex?","shift-seq","string-str?","string-color","max-depth","trim-comments?","max-hang-depth","max-hang-span","max-hang-count","next-inner","cljs.core/deref","avail","dbg-data","dbg-focus?","zprint.zfns/zfind-path","zprint.zfns/zrecord?","zprint.zfns/zmap?","zprint.zfns/zset?","zprint.zfns/zanonfn?","zprint.zfns/zfn-obj?","zprint.zfns/zarray?","zprint.zfns/zexpandarray","zprint.zfns/zatom?","zprint.zfns/zmeta?","G__52004","G__52005","zprint.zfns/zns?","zprint.zfns/zreader-macro?","overflow-in-hang?","cljs.core/some","zcomment","clojure.string/replace-first","inline-comment-vec","zprint.zprint/inlinecomment?","zprint.zfns/znumstr","spaces","tnloc","nloc-length-before","zloc-length-before","zprint.zutil/length","zprint.zprint/last-space","from-index","seq-after-space","p1__52006#","cljs.core.take_while","space-index","zprint.zprint/next-space","p1__52007#","p__52008","vec__52009","zprint.zprint/wrap-comment","stype","start","comment-width","semi-str","rest-str","space-str","comment-str","last-space-index","next-comment","clojure.string/trimr","p__52012","vec__52013","zprint.zprint/loc-vec","split","zprint.zprint/style-loc-vec","cljs.core.reductions","zprint.zprint/lift-vec","out-vec","element-vec","zprint.zprint/lift-style-vec","p__52016","map__52017","zprint.zprint/fzprint-wrap-comments","start-col","wrap-style-vec","out-style-vec","zprint.zprint/find-element-from-end","vec__52019","zprint.zprint/line-size","cljs.core/+","zprint.zprint/space-before-comment","indent-index","this-line-vec","p__52022","map__52023","zprint.zprint/fzprint-inline-comments","cvec","last-out","vec__52034","vec__52037","vec__52040","ne","nn","next-element","le","new-element","zprint.zprint/max-aligned-inline-comment-distance","zprint.zprint/find-aligned-inline-comments","last-indent","current-seq","current-column","distance","vec__52046","start-column","zprint.zprint/find-consecutive-inline-comments","vec__52052","p__52055","vec__52056","zprint.zprint/comment-column","comment-index","column","p__52059","vec__52060","zprint.zprint/comment-vec-column","inline-comment-index","comment-vec","spaces-before","zprint.zprint/comment-vec-seq-column","comment-vec-seq","zprint.zprint/comment-vec-all-column","comment-vec-all","zprint.zprint/minimum-column","minimum-vec","p1__52063#","minimum-col","p__52064","vec__52065","zprint.zprint/change-start-column","new-start-column","vec__52068","delta-spaces","new-spaces","previous-element-index","previous-element","new-previous-element","zprint.zprint/align-comment-vec","zprint.zprint/fzprint-align-inline-comments","style","comment-vec-column","zprint.zprint/fzprint","zprint.zutil/add-spec-to-docstring","zprint.zprint/line-count","cljs.core/re-seq","zprint.zprint/line-widths","zprint.zprint/max-width","G__52072","zprint.zprint/expand-tabs","tab-size","char-seq","this-char","tab-expansion","cljs.core/mod","zprint.zprint.expand_tabs","this__4380__auto__","k__4381__auto__","this__4382__auto__","k52074","else__4383__auto__","G__52078","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","ret__4402__auto__","p__52079","vec__52080","k__4403__auto__","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","G__52073","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this52075","other52076","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core/-with-meta","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__52083","cljs.core/keyword-identical?","expr__52084","this__4392__auto__","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/-nth","cljs.core/-conj","zprint.zprint/r","this__4423__auto__","writer__4424__auto__","cljs.core/-write","G__52077","extmap__4419__auto__","G__52086","cljs.core/record?","zprint.zprint/->r","zprint.zprint/map->r","zprint.zprint/make-record"]],"~:used-vars",["^S",["~$zprint.zfns/zdotdotdot","~$zprint.zprint/object-str?","~$zprint.zprint/cleave-end","~$zprint.zprint/fzprint-set","~$zprint.zprint/hash-identity-str","~$zprint.zfns/zset?","~$cljs.core/rest","~$zprint.zprint/count-newline-types","~$zprint.zprint/find-consecutive-inline-comments","~$zprint.zprint/fzprint-dbg","~$zprint.zprint/fzprint-array","~$cljs.core/str","~$zprint.zprint/fzfit","~$cljs.core/re-seq","~$zprint.zprint/minimum-column","~$zprint.zprint/precede-w-nl","~$zprint.zfns/zmeta?","~$zprint.zprint/fn-style->caller","~$zprint.zprint/get-max-length","~$zprint.zutil/right*","~$zprint.zfns/zsexpr","~$zprint.zprint/style-loc-vec","~$zprint.zprint/indent-zmap","~$zprint.zprint/fzprint-up-to-first-zloc","~$zprint.zfns/zobj-to-vec","~$zprint.zprint/remove-last-newline","~$cljs.core/pr-sequential-writer","~$clojure.string/split","~$zprint.zprint/left-or-up","~$zprint.zprint/count-constant-pairs","~$cljs.core/vector?","~$zprint.zfns/zcount","~$cljs.core/=","~$zprint.zprint/line-lengths-iter","~$zprint.zprint/hangflow","~$zprint.zprint/hang-zloc?","~$zprint.zprint/inlinecomment?","~$zprint.zprint/fzprint-meta","~$zprint.zprint/first-actual","~$zprint.zprint/fzprint-reader-macro","~$cljs.core/-assoc","~$zprint.zprint/ensure-start-w-nl","~$zprint.zprint/fzprint-record","~$zprint.zprint/flow-indent","~$cljs.core/partial","~$cljs.core/-write","~$zprint.zprint/fzprint-binding-vec","~$zprint.zprint/comment-column","~$zprint.zprint/not-rightmost","~$zprint.zutil/whitespace?","~$zprint.zprint/at-newline?","~$cljs.core/-iterator","~$cljs.core/hash","~$zprint.zprint/in-hang","~$zprint.zfns/zstring","~$zprint.zprint/line-lengths","~$zprint.zprint/line-size","~$cljs.core/count","~$zprint.zprint/zpmap","~$zprint.zprint/remove-key-seq","~$zprint.zprint/find-aligned-inline-comments","~$zprint.zprint/change-start-column","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$zprint.zprint/showfn?","~$cljs.core/identity","~$cljs.core/prn","~$zprint.zprint/pair-element?","~$zprint.zprint/body-map","~$cljs.core/last","~$zprint.zfns/zmap-w-nl","~$cljs.core/mapv","~$zprint.zprint/compare-ordered-keys","~$cljs.core/not=","~$zprint.zprint/modify-zloc","~$zprint.zprint/fzprint-one-line","~$cljs.core/MapEntry","~$cljs.core/dissoc","~$zprint.zprint/interpose-nl-hf","~$zprint.zfns/zns?","~$zprint.zprint/force-vector","~$cljs.core/LazySeq","~$cljs.core/atom","~$zprint.zprint/compare-keys","~$zprint.zprint/max-width","~$zprint.zprint/fzprint-newline","~$cljs.core/-with-meta","~$zprint.zprint/ensure-end-w-nl","~$cljs.core/concat","~$zprint.zprint/any-zcoll?","~$zprint.zprint/fzprint-vec","~$cljs.core/pr-str","~$zprint.zprint/merge-fzprint-seq","~$cljs.core/ns-name","~$zprint.zprint/ignore-key-seq","~$zprint.zprint/map->r","~$zprint.zprint/align-comment-vec","~$zprint.zfns/znumstr","~$clojure.string/includes?","~$zprint.zprint/fzprint-pairs","~$zprint.zprint/remove-hangflow","~$zprint.zfns/zexpandarray","~$zprint.zprint/fzprint","~$zprint.zprint/internal-validate","~$zprint.zprint/fit-within?","~$zprint.zfns/zreader-cond-w-symbol?","~$cljs.core/empty?","~$zprint.zfns/zwhitespaceorcomment?","~$zprint.zutil/left*","~$cljs.core/contains?","~$zprint.zprint/dots","~$cljs.core/into","~$zprint.zprint/split-lf","~$zprint.zprint/fzprint*","~$zprint.zprint/make-record","~$cljs.core/conj","~$zprint.zprint/ignore-key-seq-silent","~$zprint.zprint/next-space","~$zprint.zprint/replace-color","~$zprint.zprint/prefix-options","~$zprint.zprint/right-separator-map","~$cljs.core/sort","~$cljs.core/-conj","~$zprint.zprint/show-user-fn?","~$zprint.zprint/contains-nil?","~$zprint.zprint/->r","~$zprint.zprint/fzprint-get-zloc-seq","~$cljs.core/map","~$zprint.zprint/fzprint-hang-remaining","~$zprint.zfns/ztag","~$zprint.zprint/fzprint-align-inline-comments","~$zprint.zprint/get-zloc-seq-right","~$zprint.zprint/generate-ll","~$zprint.zprint/add-newline-to-comment","~$zprint.zfns/zmap","~$zprint.zprint/space-before-comment","~$zprint.zprint/find-element-from-end","~$zprint.zprint/fzprint-wrap-comments","~$zprint.zprint/concat-no-nil-alt","~$cljs.core/PersistentVector","~$zprint.zprint/fzprint-indent-x","~$zprint.zprint/make-caller","~$cljs.core/get-in","~$zprint.zprint/fzprint-map*","~$cljs.core/List","~$zprint.zprint/hang-indent","~$cljs.core/nthnext","~$cljs.core/long","~$zprint.zprint/concat-no-nil-pre-noseq","~$cljs.core/get","~$zprint.zprint/fzfit-one-line","~$zprint.zprint/concat-no-nil","~$zprint.zprint/fzprint-inline-comments","~$zprint.zprint/indent-shift","~$zprint.zprint/line-count","~$zprint.zprint/tag-l-size","~$zprint.zprint/body-set","~$cljs.core/-nth","~$cljs.core/remove","~$zprint.zprint/allow-one-line?","~$zprint.zprint/fzprint-future-promise-delay-agent","~$zprint.zprint/length-after-newline","~$cljs.core/not-empty","~$zprint.zprint/fzprint-justify-width","~$zprint.zprint/blanks","~$zprint.zprint/middle-element?","~$zprint.zprint/max-aligned-inline-comment-distance","~$zprint.zprint/order-out","~$cljs.core/conj!","~$zprint.zfns/znewline?","~$zprint.zprint/fzprint-map","~$cljs.core/re-find","~$zprint.zprint/constant-pair","~$zprint.zfns/zlist?","~$zprint.zfns/zarray?","~$zprint.zprint/partition-all-sym","~$cljs.core/persistent!","~$zprint.zprint/zcomment-or-newline?","~$zprint.zprint/noarg1-map","~$zprint.zprint/zat","~$cljs.core/-lookup","~$cljs.core/reduced","~$zprint.zprint/fzprint-flow-seq","~$zprint.zprint/gather-up-to-next-zloc","~$cljs.core/nth","~$zprint.zprint/prefix-tags","~$zprint.zprint/lazy-sexpr-seq","~$zprint.zprint/fzprint-hang-one","~$zprint.zfns/zcomment?","~$cljs.core/max","~$cljs.core/second","~$zprint.zfns/zatom?","~$cljs.core/nil-iter","~$zprint.zprint/conj-it!","~$cljs.core/println","~$zprint.zprint/loc-vec","~$zprint.zprint/rightmost","~$zprint.zprint/fzprint-list","~$zprint.zprint/c-r-pair","~$zprint.zprint/remove-nl","~$zprint.zfns/zanonfn?","~$zprint.zprint/split-lf-2","~$zprint.zprint/single-line?","~$zprint.zfns/zkeyword?","~$cljs.core/next","~$zprint.zprint/expand-tabs","~$cljs.core/reductions","~$zprint.zprint/partition-all-2-nc","~$zprint.zprint/fzprint-fn-obj","~$zprint.zprint/comment-vec-column","~$zprint.zfns/znamespacedmap?","~$zprint.zprint/fzprint-object","~$cljs.core/RecordIter","~$zprint.zfns/zderef","~$zprint.zprint/comment-vec-seq-column","~$zprint.zprint/fzprint-two-up","~$cljs.core/realized?","~$zprint.zprint/newline-or-comment?","~$zprint.zprint/wrap-comment","~$cljs.core/not","~$cljs.core/compare","~$zprint.zprint/last-space","~$zprint.zprint/newline-seq?","~$zprint.zprint/interpose-either","~$zprint.zfns/zfn-obj?","~$zprint.zprint/fzprint-anon-fn","~$cljs.core/assoc","~$zprint.zprint/rstr-vec","~$cljs.core/interpose","~$zprint.zprint/lift-style-vec","~$cljs.core/assoc-in","~$zprint.zfns/zconstant?","~$zprint.zprint/fzprint-extend","~$cljs.core/Symbol","~$zprint.zprint/zcolor-map","~$zprint.zfns/zrecord?","~$zprint.zprint/fzprint-ns","~$cljs.core/coll?","~$zprint.zfns/zagent?","~$cljs.core/repeat","~$zprint.zprint/find-what","~$zprint.zprint/fzprint-atom","~$zprint.zprint/fzprint-seq","~$zprint.zprint/fzprint-indent","~$zprint.zprint/length-before","~$zprint.zprint/fix-rightcnt","~$zprint.zprint/concatv!","~$zprint.zprint/log-lines","~$zprint.zprint/line-widths","~$zprint.zprint/no-max-length","~$cljs.core/first","~$cljs.core/butlast","~$zprint.zprint/noarg1-set","~$zprint.zprint/fzprint-up-to-next-zloc","~$zprint.zprint/fzprint-vec*","~$zprint.zfns/zreader-macro?","~$zprint.zprint/noarg1","~$zprint.zprint/map-ignore","~$cljs.core/name","~$zprint.zprint/fzprint-list*","~$cljs.core/subs","~$cljs.core/+","~$zprint.zprint/accumulate-ll","~$zprint.zprint/fzprint-map-two-up","~$zprint.zfns/zvector?","~$cljs.core/update-in","~$zprint.zprint/fzprint-hang-unless-fail","~$zprint.zprint/str->key","~$zprint.zprint/keyword-fn?","~$zprint.zprint/lift-vec","~$zprint.zutil/length","~$zprint.zprint/interpose-either-nl-hf","~$zprint.zprint/fzprint-hang","~$js/Error","~$cljs.core/vector","~$zprint.zprint/wrap-zmap","~$zprint.zprint/comment-vec-all-column","~$zprint.zprint/style-lines","~$zprint.zprint/good-enough?","~$zprint.zprint/next-actual","~$cljs.core/some","~$zprint.zprint/zfind-seq","~$zprint.zprint/next-newline","~$zprint.zprint/r","~$zprint.zprint/dec-depth"]]],"~:cache-keys",["~#cmap",[["^30","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^S",[]],"~:deps-syms",["^13","~$goog.dom.HtmlElement"]]],["^30","rewrite_clj/node/token.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","~$rewrite-clj.node.protocols"]]],["^30","cljs/spec/gen/alpha.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","~$goog.Uri"]]],["^30","cljs/tools/reader/impl/utils.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^16","~$goog.string"]]],["^30","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","~$goog.array","~$goog.asserts"]]],["^30","rewrite_clj/parser/core.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","~$rewrite-clj.node","~$rewrite-clj.reader","~$rewrite-clj.parser.keyword","~$rewrite-clj.parser.string","~$rewrite-clj.parser.token","~$rewrite-clj.parser.whitespace","~$cljs.tools.reader.reader-types"]]],["^30","rewrite_clj/parser/string.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:2","^:3","^9["]]],["^30","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13"]]],["^30","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:0","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^30","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:1","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^:;"]]],["^30","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:1"]]],["^30","rewrite_clj/zip/seqz.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","~$rewrite-clj.zip.base","~$rewrite-clj.zip.editz","~$rewrite-clj.zip.findz","~$rewrite-clj.zip.insert","~$rewrite-clj.zip.move","~$clojure.zip"]]],["^30","rewrite_clj/zip/move.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","~$rewrite-clj.zip.whitespace","^:G"]]],["^30","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13"]]],["^30","rewrite_clj/zip.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:B","^Z","^:F","^:D","^:C","^:E","~$rewrite-clj.zip.removez","~$rewrite-clj.zip.seqz","^:G"]]],["^30","rewrite_clj/zip/editz.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:B","^:F","^:I","~$rewrite-clj.zip.utils","^:H","^:2","^:G"]]],["^30","cljs/tools/reader/edn.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","~$cljs.tools.reader.impl.errors","^:8","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^9[","~$goog.string.StringBuffer"]]],["^30","zprint/rewrite.cljc"],["02ceac7da3bfccbead302de08773bfdd0e22cd28","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^16","^17","^Z","^:2","^10","^:B","^:H","^:F","^:I","^:C","^:G"]]],["^30","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13"]]],["^30","cljs/tools/reader/impl/inspect.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11"]]],["^30","zprint/config.cljc"],["02ceac7da3bfccbead302de08773bfdd0e22cd28","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^16","~$clojure.set","~$clojure.data","~$zprint.spec","~$zprint.rewrite","~$cljs.reader"]]],["^30","cljs/tools/reader.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:8","^:M","^:N","^:L","^:0","^9[","^:P"]]],["^30","rewrite_clj/node/forms.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^9Y"]]],["^30","rewrite_clj/zip/insert.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:B","^:H","^:2","^:G"]]],["^30","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13"]]],["^30","rewrite_clj/zip/utils.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:G"]]],["^30","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13"]]],["^30","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:1"]]],"~:SHADOW-TIMESTAMP",[1598571556000,1598571556000,1598571537000],["^30","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:1","~$goog.reflect"]]],["^30","rewrite_clj/node/reader_macro.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^9Y","~$rewrite-clj.node.whitespace"]]],["^30","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:1","~$goog.html.trustedtypes","^:>","^:?","^:@","^:A"]]],["^30","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13"]]],["^30","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13"]]],["^30","rewrite_clj/zip/findz.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:B","^:F","^:2","^:H","^:G"]]],["^30","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:0","^:1","~$goog.html.SafeUrl","^:@","^:A","^:;"]]],["^30","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:1","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^:Z","^:=","~$goog.html.uncheckedconversions","^:@","^:;"]]],["^30","clojure/walk.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11"]]],["^30","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^30","rewrite_clj/node/meta.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^9Y","^:X"]]],["^30","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:0","^:1","~$goog.dom.TagName","~$goog.dom.tags","^;2","^;3","~$goog.html.SafeStyleSheet","^:Z","^:=","^:Y","^:>","^:?","~$goog.labs.userAgent.browser","^::","^:@","^:A","^:;"]]],["^30","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^::"]]],["^30","rewrite_clj/node/stringz.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^9Y","^:O","^16"]]],["^30","rewrite_clj/node/comment.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^9Y"]]],["^30","rewrite_clj/node/keyword.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^9Y"]]],["^30","cljs/reader.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^::","^:O","~$cljs.tools.reader.edn","^:P"]]],["^30","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^30","zprint/zutil.cljc"],["02ceac7da3bfccbead302de08773bfdd0e22cd28","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^16","^14","^Z","^:2","^10","^:B","^:H","^:F","^:I","^:C","^:G"]]],["^30","zprint/finish.cljc"],["02ceac7da3bfccbead302de08773bfdd0e22cd28","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^16","^15","~$zprint.focus"]]],["^30","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:0","^:1","^9[","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^30","zprint/focus.cljc"],["02ceac7da3bfccbead302de08773bfdd0e22cd28","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^16","^15"]]],["^30","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13"]]],["^30","rewrite_clj/node/protocols.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^16"]]],["^30","rewrite_clj/node/seq.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^9Y"]]],["^30","rewrite_clj/node/uneval.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^9Y"]]],["^30","cljs/spec/alpha.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^::","~$clojure.walk","~$cljs.spec.gen.alpha","^16"]]],["^30","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13"]]],["^30","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",[]]],["^30","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:0","^::"]]],["^30","cljs/tools/reader/impl/errors.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:8","^16","~$cljs.tools.reader.impl.inspect"]]],["^30","rewrite_clj/node/whitespace.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^9Y"]]],["^30","rewrite_clj/node/coercer.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","~$rewrite-clj.node.comment","~$rewrite-clj.node.forms","~$rewrite-clj.node.keyword","~$rewrite-clj.node.quote","~$rewrite-clj.node.stringz","~$rewrite-clj.node.uneval","~$rewrite-clj.node.meta","~$rewrite-clj.node.fn","^9Y","~$rewrite-clj.node.reader-macro","~$rewrite-clj.node.seq","~$rewrite-clj.node.token","^:X"]]],["^30","clojure/string.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^9[","^:P"]]],["^30","rewrite_clj/parser.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","~$rewrite-clj.parser.core","^:2","^:3"]]],["^30","rewrite_clj/parser/keyword.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:2","^:8","^:3"]]],["^30","zprint/zfns.cljc"],["02ceac7da3bfccbead302de08773bfdd0e22cd28","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11"]]],["^30","rewrite_clj/parser/token.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:2","^:3","^9["]]],["^30","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","~$goog.dom.safe","^;4","^:@","^:;"]]],["^30","clojure/data.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:Q"]]],["^30","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13"]]],["^30","rewrite_clj/node/fn.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^9Y","^;D"]]],["^30","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:;"]]],["^30","rewrite_clj/node.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","~$rewrite-clj.node.coercer","^9Y","^;I","^;P","^:X","^;Q","^;G","^;H","^;M","^;K","^;O","^;J","^;L","^;N"]]],["^30","rewrite_clj/zip/removez.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:F","^:K","^:H","^:G"]]],["^30","clojure/zip.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11"]]],["^30","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13"]]],["^30","cljs/tools/reader/reader_types.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:M","^9[","^:P"]]],["^30","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:0","^:1","^;0","~$goog.math"]]],["^30","zprint/spec.cljc"],["02ceac7da3bfccbead302de08773bfdd0e22cd28","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^16","^H"]]],["^30","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:1","^;1","^;2","^;3","^;9","^:Z","^:=","^:@","^:;"]]],["^30","rewrite_clj/reader.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:O","^:8","^:N","^9[","^9Y"]]],["^30","rewrite_clj/node/quote.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^9Y"]]],["^30","cljs/tools/reader/impl/commons.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:L","^:8","^:M"]]],["^30","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13"]]],["^30","cljs/core.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","~$goog.math.Long","~$goog.math.Integer","^9[","^::","^:0","^9Z","^:P"]]],["^30","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:1","^:Y","^:@","^:A"]]],["^30","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:0","^:1","^;3","^::","^:@","^:A","^:;"]]],["^30","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:W"]]],["^30","zprint/zprint.cljc"],["02ceac7da3bfccbead302de08773bfdd0e22cd28","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^16","^12","^14","^15","^[","^17","^Z","^10"]]],["^30","clojure/set.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11"]]],["^30","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:0","^:1","^9["]]],["^30","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^:1","^:A"]]],["^30","rewrite_clj/zip/base.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:2","^Z","^:H","^:G"]]],["^30","rewrite_clj/zip/whitespace.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:2","^:G"]]],["^30","zprint/ansi.cljc"],["02ceac7da3bfccbead302de08773bfdd0e22cd28","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^16"]]],["^30","rewrite_clj/parser/whitespace.cljs"],["dd14a371d0d09eedccb39f01e3edabefb2d1e64f","^9T",["^ ","^9U",null,"^9V",["^S",[]],"^9W",["^13","^11","^:2","^:3"]]]]],"~:clj-info",["^ ","jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/spec/gen/alpha.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/compiler.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64.clj",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map.clj",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/tagged_literals.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1596724258000,"jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/analyzer.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/core.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/util.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/externs.clj",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/spec/alpha.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64_vlq.clj",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/reader.clj",1598571537000,"jar:file:/home/giovani/.m2/repository/binaryage/devtools/1.0.0/devtools-1.0.0.jar!/devtools/defaults.clj",1596725445000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/env.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/zprint/zprint/0.5.1/zprint-0.5.1.jar!/zprint/macros.cljc",1598571556000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/zprint/zprint/0.5.1/zprint-0.5.1.jar!/zprint/smacros.cljc",1598571556000,"jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/js_deps.cljc",1598571537000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","zprint/zprint.cljc","^7",1,"^8",14,"^9",1,"^:",27,"^;",true],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J"],"^K",["^ ","^L","^M","^N","^M","^O","^M","^P","^M","^Q","^M"],"^R",["^S",[]],"^T","^U","^X",null,"^Y",["^ ","^Z","^Z","~$p","^Z","^[","^[","^10","^10","^11","^11","^12","^12","^13","^13","^14","^14","^15","^15","~$s","^16","~$z","^10","^16","^16","^17","^17"],"^18",["^S",["^19","^1:"]],"~:shadow/js-access-global",["^S",["Error"]],"^1;",["^ ","^1<","^14","^1=","^14","^1>","^14","^1?","^14","^1@","^14","^1A","^14","^1B","^14","^1C","^14","^1D","^14","^1E","^14","^1F","^14","^1G","^14","^1H","^14","^1I","^14","^1J","^14","^1K","^14","^1L","^14","^1M","^14","^1N","^14","^1O","^[","^1P","^14","^1Q","^14","^1R","^14","^1S","^[","^1T","^14","^1U","^14","^1V","^14","^1W","^14","^1X","^14","^1Y","^15","^1Z","^14","^1[","^14","^20","^14","^21","^14","^22","^17","^23","^14","^24","^14","^25","^14","^26","^14","^27","^14","^28","^14","^29","^14","^2:","^14","^2;","^14","^2<","^14","^2=","^14","^2>","^14","^2?","^14","^2@","^14","^2A","^14","^2B","^14","^2C","^14","^2D","^14","^2E","^14","^2F","^14","^2G","^14","^2H","^14","^2I","^14","^2J","^14","^2K","^14","^2L","^14","^2M","^14","^2N","^12","^2O","^14","^2P","^14","^2Q","^14","^2R","^14"],"~:defs",["^ ","~$body-set",["^ ","^T","^6U","^6","zprint/zprint.cljc","^7",2799,"^8",1,"^9",2799,"^:",14,"^5",["^ ","^6","zprint/zprint.cljc","^7",2799,"^8",6,"^9",2799,"^:",14],"~:tag","~$cljs.core/ISet"],"~$allow-one-line?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2840,"^8",7,"^9",2840,"^:",22,"~:arglists",["^2T",["~$quote",["^2T",[[["^ ","~:keys",["~$fn-force-nl","~$fn-gt2-force-nl","~$fn-gt3-force-nl"],"^2W","~$options"],"~$len","~$fn-style"]]]]],"~:doc","Should we allow this function to print on a single line?"],"^T","^6X","^6","zprint/zprint.cljc","^:",22,"~:method-params",["^2T",[["~$p__51804","^=0","^=1"]]],"~:protocol-impl",null,"~:arglists-meta",["^2T",[null,null]],"^8",1,"~:variadic?",false,"^7",2840,"~:ret-tag","~$boolean","^9",2840,"~:max-fixed-arity",3,"~:fn-var",true,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["^<X","^<Y","^<Z"],"^2W","^<["],"^=0","^=1"]]]]],"^=2","Should we allow this function to print on a single line?"],"~$replace-color",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",689,"^8",7,"^9",689,"^:",20,"^<U",["^2T",["^<V",["^2T",[["~$local-color","~$style-vec"]]]]],"^=2","Given a style-vec with exactly one thing in it, replace the color\n  with whatever local color we have determined is correct."],"^T","^5[","^6","zprint/zprint.cljc","^:",20,"^=3",["^2T",[["^==","^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",689,"^=8",["^S",[null,"~$cljs.core/IVector"]],"^9",689,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^==","^=>"]]]]],"^=2","Given a style-vec with exactly one thing in it, replace the color\n  with whatever local color we have determined is correct."],"~$fzprint-inline-comments",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4808,"^8",7,"^9",4808,"^:",30,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["~$width"],"^2W","^<["],"^=>"]]]]],"^=2","Try to bring inline comments back onto the line on which they belong."],"^T","^6Q","^6","zprint/zprint.cljc","^:",30,"^=3",["^2T",[["~$p__52022","^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4808,"^=8",["^S",["~$clj","^=?"]],"^9",4808,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["^=A"],"^2W","^<["],"^=>"]]]]],"^=2","Try to bring inline comments back onto the line on which they belong."],"~$right-separator-map",["^ ","^T","^61","^6","zprint/zprint.cljc","^7",156,"^8",1,"^9",156,"^:",25,"^5",["^ ","^6","zprint/zprint.cljc","^7",156,"^8",6,"^9",156,"^:",25],"^<Q","~$cljs.core/IMap"],"~$fzprint-justify-width",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",990,"^8",7,"^9",990,"^:",28,"^<U",["^2T",["^<V",["^2T",[["~$caller",["^9S",[["^ ","^<W",["~$justify?"]],"^=G","^2W","^<["]],"~$ind","~$coll"]]]]],"^=2","Figure the width for a justification of a set of pairs in coll.  \n  Also, decide if it makes any sense to justify the pairs at all.\n  For instance, they all need to be one-line."],"^T","^70","^6","zprint/zprint.cljc","^:",28,"^=3",["^2T",[["^=G","~$p__51504","^=I","^=J"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",990,"^=8",["^S",["~$number","~$clj-nil"]],"^9",990,"^=:",4,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",[["^ ","^<W",["^=H"]],"^=G","^2W","^<["]],"^=I","^=J"]]]]],"^=2","Figure the width for a justification of a set of pairs in coll.  \n  Also, decide if it makes any sense to justify the pairs at all.\n  For instance, they all need to be one-line."],"~$expand-tabs",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",5138,"^8",7,"^9",5138,"^:",18,"^<U",["^2T",["^<V",["^2T",[["~$tab-size","~$s"],["~$s"]]]]],"^=2","Takes a string, and expands tabs inside of the string based\n  on a tab-size argument.","~:top-fn",["^ ","^=7",false,"~:fixed-arity",2,"^=:",2,"^=3",[["^=O","~$s"],["~$s"]],"^<U",["^2T",[["^=O","~$s"],["~$s"]]],"^=6",["^2T",[null,null]]]],"^T","^7Z","^6","zprint/zprint.cljc","^:",18,"^=P",["^ ","^=7",false,"^=Q",2,"^=:",2,"^=3",[["^=O","~$s"],["~$s"]],"^<U",["^2T",[["^=O","~$s"],["~$s"]]],"^=6",["^2T",[null,null]]],"^=3",[["^=O","~$s"],["~$s"]],"^=5",null,"^=Q",2,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"~:methods",[["^ ","^=Q",2,"^=7",false,"^<Q","~$any"],["^ ","^=Q",1,"^=7",false,"^<Q","^=S"]],"^7",5138,"^9",5138,"^=:",2,"^=;",true,"^<U",["^2T",[["^=O","~$s"],["~$s"]]],"^=2","Takes a string, and expands tabs inside of the string based\n  on a tab-size argument."],"~$fzprint-list",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3439,"^8",7,"^9",3439,"^:",19,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","~$zloc"]]]]],"^=2","Pretty print and focus style a :list element."],"^T","^7R","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["^<[","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3439,"^=8",["^S",["^=C","^=M"]],"^9",3439,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Pretty print and focus style a :list element."],"~$fzprint-hang-remaining",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1882,"^8",7,"^9",1882,"^:",29,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",["^<W",["~$dbg?","^=A"],["^ ","^<W",["~$hang?","~$constant-pair?","~$constant-pair-min","~$hang-avoid","~$hang-expand","~$hang-diff","~$nl-separator?","~$respect-nl?"]],"^=G","^2W","^<["]],"~$hindent","~$findent","~$zloc-seq","^=1","~$zloc-count"],["^=G","^<[","^>4","^>5","^=U","^=1"]]]]],"^=2","zloc-seq is a seq of zlocs of a collection.  We already know\n  that the given zloc won't fit on the current line. [Besides, we\n  ensure that if there are two things remaining anyway. ???] So\n  now, try hanging and see if that is better than flow.  Unless\n  :hang? is nil, in which case we will just flow.  hindent is\n  hang-indent, and findent is flow-indent. This should never be\n  called with :one-line because this is only called from fzprint-list*\n  after the one-line processing is done. If the hindent equals the\n  flow indent, then just do flow.  Do only zloc-count non-whitespace\n  elements of zloc-seq if it exists.","^=P",["^ ","^=7",false,"^=Q",7,"^=:",7,"^=3",[["^=G",["^9S",["^<W",["^=W","^=A"],["^ ","^<W",["^=X","^=Y","^=Z","^=[","^>0","^>1","^>2","^>3"]],"^=G","^2W","^<["]],"^>4","^>5","^>6","^=1","^>7"],["^=G","^<[","^>4","^>5","^=U","^=1"]],"^<U",["^2T",[["^=G",["^9S",["^<W",["^=W","^=A"],["^ ","^<W",["^=X","^=Y","^=Z","^=[","^>0","^>1","^>2","^>3"]],"^=G","^2W","^<["]],"^>4","^>5","^>6","^=1","^>7"],["^=G","^<[","^>4","^>5","^=U","^=1"]]],"^=6",["^2T",[null,null]]]],"^T","^69","^6","zprint/zprint.cljc","^:",29,"^=P",["^ ","^=7",false,"^=Q",7,"^=:",7,"^=3",[["^=G",["^9S",["^<W",["^=W","^=A"],["^ ","^<W",["^=X","^=Y","^=Z","^=[","^>0","^>1","^>2","^>3"]],"^=G","^2W","^<["]],"^>4","^>5","^>6","^=1","^>7"],["^=G","^<[","^>4","^>5","^=U","^=1"]],"^<U",["^2T",[["^=G",["^9S",["^<W",["^=W","^=A"],["^ ","^<W",["^=X","^=Y","^=Z","^=[","^>0","^>1","^>2","^>3"]],"^=G","^2W","^<["]],"^>4","^>5","^>6","^=1","^>7"],["^=G","^<[","^>4","^>5","^=U","^=1"]]],"^=6",["^2T",[null,null]]],"^=3",[["^=G",["^9S",["^<W",["^=W","^=A"],["^ ","^<W",["^=X","^=Y","^=Z","^=[","^>0","^>1","^>2","^>3"]],"^=G","^2W","^<["]],"^>4","^>5","^>6","^=1","^>7"],["^=G","^<[","^>4","^>5","^=U","^=1"]],"^=5",null,"^=Q",7,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^=R",[["^ ","^=Q",7,"^=7",false,"^<Q",["^S",[null,"^=C","^=M"]]],["^ ","^=Q",6,"^=7",false,"^<Q",["^S",[null,"^=C","^=M"]]]],"^7",1882,"^9",1882,"^=:",7,"^=;",true,"^<U",["^2T",[["^=G",["^9S",["^<W",["^=W","^=A"],["^ ","^<W",["^=X","^=Y","^=Z","^=[","^>0","^>1","^>2","^>3"]],"^=G","^2W","^<["]],"^>4","^>5","^>6","^=1","^>7"],["^=G","^<[","^>4","^>5","^=U","^=1"]]],"^=2","zloc-seq is a seq of zlocs of a collection.  We already know\n  that the given zloc won't fit on the current line. [Besides, we\n  ensure that if there are two things remaining anyway. ???] So\n  now, try hanging and see if that is better than flow.  Unless\n  :hang? is nil, in which case we will just flow.  hindent is\n  hang-indent, and findent is flow-indent. This should never be\n  called with :one-line because this is only called from fzprint-list*\n  after the one-line processing is done. If the hindent equals the\n  flow indent, then just do flow.  Do only zloc-count non-whitespace\n  elements of zloc-seq if it exists."],"~$blanks",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",31,"^8",7,"^9",31,"^:",13,"^<U",["^2T",["^<V",["^2T",[["~$n"]]]]],"^=2","Produce a blank string of desired size."],"^T","^71","^6","zprint/zprint.cljc","^:",13,"^=3",["^2T",[["~$n"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",31,"^=8","^=S","^9",31,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$n"]]]]],"^=2","Produce a blank string of desired size."],"~$remove-hangflow",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1024,"^8",7,"^9",1024,"^:",22,"^<U",["^2T",["^<V",["^2T",[["~$hf-style-vec"]]]]],"^=2","Convert a hangflow style-vec to a regular style-vec."],"^T","^5I","^6","zprint/zprint.cljc","^:",22,"^=3",["^2T",[["^>:"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1024,"^=8",["^S",["^56","^=M"]],"^9",1024,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^>:"]]]]],"^=2","Convert a hangflow style-vec to a regular style-vec."],"~$concat-no-nil-alt",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",280,"^8",7,"^9",280,"^:",24,"^<U",["^2T",["^<V",["^2T",[["~$&","~$rest"]]]]],"^=2","Concatentate multiple sequences, but if any of them are nil, return nil.\n  This version is 15-20% slower than the version below. Keeping it around\n  just for illustrative purposes.","^=P",["^ ","^=7",true,"^=Q",0,"^=:",0,"^=3",[["^2T",["^><"]]],"^<U",["^2T",[["~$&","^><"]]],"^=6",["^2T",[null]]]],"^T","^6C","^6","zprint/zprint.cljc","^:",24,"^=P",["^ ","^=7",true,"^=Q",0,"^=:",0,"^=3",[["^2T",["^><"]]],"^<U",["^2T",[["~$&","^><"]]],"^=6",["^2T",[null]]],"^=3",[["^2T",["^><"]]],"^=5",null,"^=Q",0,"^=6",["^2T",[null]],"^8",1,"^=7",true,"^=R",[["^ ","^=Q",0,"^=7",true,"^<Q",["^S",["^=C","^=M"]]]],"^7",280,"^=8","^=S","^9",280,"^=:",0,"^=;",true,"^<U",["^2T",[["~$&","^><"]]],"^=2","Concatentate multiple sequences, but if any of them are nil, return nil.\n  This version is 15-20% slower than the version below. Keeping it around\n  just for illustrative purposes."],"~$find-element-from-end",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4783,"^8",7,"^9",4783,"^:",28,"^<U",["^2T",["^<V",["^2T",[["~$element-type","^=>"]]]]],"^=2","Find a the first element of this type working from the end of a \n  style-vec.  Return the index of the element."],"^T","^6A","^6","zprint/zprint.cljc","^:",28,"^=3",["^2T",[["^>>","^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4783,"^=8",["^S",["^=L","^=M"]],"^9",4783,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^>>","^=>"]]]]],"^=2","Find a the first element of this type working from the end of a \n  style-vec.  Return the index of the element."],"~$make-caller",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4434,"^8",7,"^9",4434,"^:",18,"^<U",["^2T",["^<V",["^2T",[["^<[","~$new-caller","~$existing-caller","~$key-seq"]]]]],"^=2","Sometime we need to give a caller to a routine, and there isn't\n  a specific caller in the configuration.  So, we will use the configuration\n  from some other caller and make up a new one just for this situation.\n  The key-seq is the series of keys to both look up and create.  The\n  caller is the new caller, and the existing-caller is the one from which\n  we we will extract the information. This returns a new options map with\n  the new-caller in it."],"^T","^6F","^6","zprint/zprint.cljc","^:",18,"^=3",["^2T",[["^<[","^>@","^>A","^>B"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4434,"^=8",["^S",["^=C","^=S"]],"^9",4434,"^=:",4,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^>@","^>A","^>B"]]]]],"^=2","Sometime we need to give a caller to a routine, and there isn't\n  a specific caller in the configuration.  So, we will use the configuration\n  from some other caller and make up a new one just for this situation.\n  The key-seq is the series of keys to both look up and create.  The\n  caller is the new caller, and the existing-caller is the one from which\n  we we will extract the information. This returns a new options map with\n  the new-caller in it."],"~$fzprint-indent-x",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2630,"^8",7,"^9",2630,"^:",23,"^<U",["^2T",["^<V",["^2T",[["^=G","~$l-str","~$r-str","^<[","^=I","^=U","^=1","~$arg-1-indent"]]]]],"^=2","This function assumes that :indent-only? was set for the caller\n  in the options (since anything else doesn't make sense).  It takes\n  a zloc and the ind, which is where we are on the line this point,\n  and will process the zloc to include any newlines.  Of course we\n  have to have all of the white space in the zloc too, since we\n  need to ask some questions about what we are starting with at\n  some point.  We don't add newlines and we let the newlines that\n  are in there do their thing.  We might add newlines if we move\n  beyond the right margin, but for now, we don't (and it isn't\n  entirely clear how or if that would work).  This routine has to\n  make decisions about the indent, that is whether to hang or flow\n  the expression. It does that based on what was done in the input\n  if the configuration allows."],"^T","^6E","^6","zprint/zprint.cljc","^:",23,"^=3",["^2T",[["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2630,"^=8",["^S",["^=C","^=?","^=M"]],"^9",2630,"^=:",8,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F"]]]]],"^=2","This function assumes that :indent-only? was set for the caller\n  in the options (since anything else doesn't make sense).  It takes\n  a zloc and the ind, which is where we are on the line this point,\n  and will process the zloc to include any newlines.  Of course we\n  have to have all of the white space in the zloc too, since we\n  need to ask some questions about what we are starting with at\n  some point.  We don't add newlines and we let the newlines that\n  are in there do their thing.  We might add newlines if we move\n  beyond the right margin, but for now, we don't (and it isn't\n  entirely clear how or if that would work).  This routine has to\n  make decisions about the indent, that is whether to hang or flow\n  the expression. It does that based on what was done in the input\n  if the configuration allows."],"~$dots",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",36,"^8",7,"^9",36,"^:",11,"^<U",["^2T",["^<V",["^2T",[["~$n"]]]]],"^=2","Produce a dot string of desired size."],"^T","^5S","^6","zprint/zprint.cljc","^:",11,"^=3",["^2T",[["~$n"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",36,"^=8","^=S","^9",36,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$n"]]]]],"^=2","Produce a dot string of desired size."],"~$concat-no-nil-pre-noseq",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",293,"^8",7,"^9",293,"^:",30,"^<U",["^2T",["^<V",["^2T",[["~$&","^><"]]]]],"^=2","Concatentate multiple sequences, but if any of them are nil or empty\n  collections, return nil.","^=P",["^ ","^=7",true,"^=Q",0,"^=:",0,"^=3",[["^2T",["^><"]]],"^<U",["^2T",[["~$&","^><"]]],"^=6",["^2T",[null]]]],"^T","^6M","^6","zprint/zprint.cljc","^:",30,"^=P",["^ ","^=7",true,"^=Q",0,"^=:",0,"^=3",[["^2T",["^><"]]],"^<U",["^2T",[["~$&","^><"]]],"^=6",["^2T",[null]]],"^=3",[["^2T",["^><"]]],"^=5",null,"^=Q",0,"^=6",["^2T",[null]],"^8",1,"^=7",true,"^=R",[["^ ","^=Q",0,"^=7",true,"^<Q",["^S",["^=C","^=M"]]]],"^7",293,"^=8","^=S","^9",293,"^=:",0,"^=;",true,"^<U",["^2T",[["~$&","^><"]]],"^=2","Concatentate multiple sequences, but if any of them are nil or empty\n  collections, return nil."],"~$partition-all-sym",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1348,"^8",7,"^9",1348,"^:",24,"^<U",["^2T",["^<V",["^2T",[["^<[","~$modifier-set","^=J"]]]]],"^=2","Similar to partition-all-2-nc, but instead of trying to pair things\n  up (modulo comments and unevaled expressions), this begins things\n  with a symbol, and then accumulates collections until the next symbol.\n  Returns a seq of seqs, where the first thing in each internal seq is\n  a protocol and the remaining thing(s) in that seq are the expressions that\n  follow.  If there is a single thing, it is returned in its own internal\n  seq. ((P (foo [this a) (bar-me [this] b) (barx [this y] (+ c y))) ...)\n  Made harder by the fact that the symbol might be inside of a #?() reader\n  conditional.  It handles comments before symbols on the symbol indent, \n  and the comments before the collections on the collection indent.  \n  Since it doesn't know how many collections there are, this is not trivial.  \n  Must be called with a sequence of z-things (these days called a zseq)"],"^T","^7<","^6","zprint/zprint.cljc","^:",24,"^=3",["^2T",[["^<[","^>J","^=J"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1348,"^=8","^=C","^9",1348,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^>J","^=J"]]]]],"^=2","Similar to partition-all-2-nc, but instead of trying to pair things\n  up (modulo comments and unevaled expressions), this begins things\n  with a symbol, and then accumulates collections until the next symbol.\n  Returns a seq of seqs, where the first thing in each internal seq is\n  a protocol and the remaining thing(s) in that seq are the expressions that\n  follow.  If there is a single thing, it is returned in its own internal\n  seq. ((P (foo [this a) (bar-me [this] b) (barx [this y] (+ c y))) ...)\n  Made harder by the fact that the symbol might be inside of a #?() reader\n  conditional.  It handles comments before symbols on the symbol indent, \n  and the comments before the collections on the collection indent.  \n  Since it doesn't know how many collections there are, this is not trivial.  \n  Must be called with a sequence of z-things (these days called a zseq)"],"~$zcomment-or-newline?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1852,"^8",7,"^9",1852,"^:",27,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","If this zloc is a comment or a newline, return true."],"^T","^7>","^6","zprint/zprint.cljc","^:",27,"^=3",["^2T",[["^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1852,"^=8","^=S","^9",1852,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","If this zloc is a comment or a newline, return true."],"~$conj-it!",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",41,"^8",7,"^9",41,"^:",15,"^<U",["^2T",["^<V",["^2T",[["~$&","^><"]]]]],"^=2","Make a version of conj! that take multiple arguments.","^=P",["^ ","^=7",true,"^=Q",0,"^=:",0,"^=3",[["^2T",["^><"]]],"^<U",["^2T",[["~$&","^><"]]],"^=6",["^2T",[null]]]],"^T","^7N","^6","zprint/zprint.cljc","^:",15,"^=P",["^ ","^=7",true,"^=Q",0,"^=:",0,"^=3",[["^2T",["^><"]]],"^<U",["^2T",[["~$&","^><"]]],"^=6",["^2T",[null]]],"^=3",[["^2T",["^><"]]],"^=5",null,"^=Q",0,"^=6",["^2T",[null]],"^8",1,"^=7",true,"^=R",[["^ ","^=Q",0,"^=7",true,"^<Q","^=S"]],"^7",41,"^=8","^=S","^9",41,"^=:",0,"^=;",true,"^<U",["^2T",[["~$&","^><"]]],"^=2","Make a version of conj! that take multiple arguments."],"~$fzfit-one-line",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",576,"^8",7,"^9",576,"^:",21,"^<U",["^2T",["^<V",["^2T",[["^<[","~$style-lines-return"]]]]],"^=2","Given the return from style-lines  and options, \n  return true if it fits on a single line."],"^T","^6O","^6","zprint/zprint.cljc","^:",21,"^=3",["^2T",[["^<[","^>N"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",576,"^=8","^=9","^9",576,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^>N"]]]]],"^=2","Given the return from style-lines  and options, \n  return true if it fits on a single line."],"~$lazy-sexpr-seq",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3561,"^8",7,"^9",3561,"^:",21,"^<U",["^2T",["^<V",["^2T",[["~$nws-seq"]]]]]],"^T","^7G","^6","zprint/zprint.cljc","^:",21,"^=3",["^2T",[["^>P"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3561,"^=8","^=C","^9",3561,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^>P"]]]]]],"~$line-count",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",5122,"^8",7,"^9",5122,"^:",17,"^<U",["^2T",["^<V",["^2T",[["~$s"]]]]],"^=2","Count lines in a string."],"^T","^6S","^6","zprint/zprint.cljc","^:",17,"^=3",["^2T",[["~$s"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",5122,"^=8","^=L","^9",5122,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$s"]]]]],"^=2","Count lines in a string."],"~$concatv!",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1574,"^8",7,"^9",1574,"^:",15,"^<U",["^2T",["^<V",["^2T",[["~$v","~$&","^><"]]]]],"^=2","Given a transient vector v, concatenate all of the other\n  elements in all of the remaining collections onto v.","^=P",["^ ","^=7",true,"^=Q",1,"^=:",1,"^=3",[["^2T",["~$v","^><"]]],"^<U",["^2T",[["~$v","~$&","^><"]]],"^=6",["^2T",[null]]]],"^T","^8W","^6","zprint/zprint.cljc","^:",15,"^=P",["^ ","^=7",true,"^=Q",1,"^=:",1,"^=3",[["^2T",["~$v","^><"]]],"^<U",["^2T",[["~$v","~$&","^><"]]],"^=6",["^2T",[null]]],"^=3",[["^2T",["~$v","^><"]]],"^=5",null,"^=Q",1,"^=6",["^2T",[null]],"^8",1,"^=7",true,"^=R",[["^ ","^=Q",1,"^=7",true]],"^7",1574,"^=8","^=S","^9",1574,"^=:",1,"^=;",true,"^<U",["^2T",[["~$v","~$&","^><"]]],"^=2","Given a transient vector v, concatenate all of the other\n  elements in all of the remaining collections onto v."],"~$fzprint-seq",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1628,"^8",7,"^9",1628,"^:",18,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^>6"]]]]],"^=2","Take a seq of a zloc, created by (zmap identity zloc) when zloc\n  is a collection, or (zmap-right identity zloc) when zloc is already\n  inside of a collection, and return a seq of the fzprint* of each \n  element.  No spacing between any of these elements. Note that this\n  is not a style-vec, but a seq of style-vecs of each of the elements.\n  These would need to be concatenated together to become a style-vec.\n  ind is either a constant or a seq of indents, one for each element in\n  zloc-seq."],"^T","^8S","^6","zprint/zprint.cljc","^:",18,"^=3",["^2T",[["^<[","^=I","^>6"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1628,"^=8",["^S",["^=C","^=?","^=M"]],"^9",1628,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^>6"]]]]],"^=2","Take a seq of a zloc, created by (zmap identity zloc) when zloc\n  is a collection, or (zmap-right identity zloc) when zloc is already\n  inside of a collection, and return a seq of the fzprint* of each \n  element.  No spacing between any of these elements. Note that this\n  is not a style-vec, but a seq of style-vecs of each of the elements.\n  These would need to be concatenated together to become a style-vec.\n  ind is either a constant or a seq of indents, one for each element in\n  zloc-seq."],"~$loc-vec",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4735,"^8",7,"^9",4735,"^:",14,"^<U",["^2T",["^<V",["^2T",[["~$start",["~$s"]]]]]],"^=2","Takes the start of this vector and the vector itself."],"^T","^7P","^6","zprint/zprint.cljc","^:",14,"^=3",["^2T",[["^>U","~$p__52012"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4735,"^=8","^=L","^9",4735,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^>U",["~$s"]]]]]],"^=2","Takes the start of this vector and the vector itself."],"~$partition-all-2-nc",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1254,"^8",7,"^9",1254,"^:",25,"^<U",["^2T",["^<V",["^2T",[["^<[","^=J"]]]]],"^=2","Input is (zseqnws zloc) or (zseqnws-w-nl) where one assumes that\n  these are pairs.  Thus, a seq of zlocs.  Output is a sequence of\n  seqs, where the seqs are usually pairs, but might be single things.\n  Doesn't pair up comments or #_(...) unevaled sexpressions.  The\n  ones before the first part of a pair come as a single element in\n  what would usually be a pair, and the ones between the first and\n  second parts of a pair come inside the pair.  There may be an\n  arbitrary number of elements between the first and second elements\n  of the pair (one per line).  If there are any comments or unevaled\n  sexpressions, don't sort the keys, as we might lose track of where\n  the comments or unevaled s-expressions go."],"^T","^80","^6","zprint/zprint.cljc","^:",25,"^=3",["^2T",[["^<[","^=J"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1254,"^=8",["^S",["^=?","^=M"]],"^9",1254,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=J"]]]]],"^=2","Input is (zseqnws zloc) or (zseqnws-w-nl) where one assumes that\n  these are pairs.  Thus, a seq of zlocs.  Output is a sequence of\n  seqs, where the seqs are usually pairs, but might be single things.\n  Doesn't pair up comments or #_(...) unevaled sexpressions.  The\n  ones before the first part of a pair come as a single element in\n  what would usually be a pair, and the ones between the first and\n  second parts of a pair come inside the pair.  There may be an\n  arbitrary number of elements between the first and second elements\n  of the pair (one per line).  If there are any comments or unevaled\n  sexpressions, don't sort the keys, as we might lose track of where\n  the comments or unevaled s-expressions go."],"~$length-before",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2289,"^8",7,"^9",2289,"^:",20,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Given a zloc, find the amount of printing space before it on its\n  current line."],"^T","^8U","^6","zprint/zprint.cljc","^:",20,"^=3",["^2T",[["^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2289,"^=8",["^S",["^=S","^=L"]],"^9",2289,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Given a zloc, find the amount of printing space before it on its\n  current line."],"~$fzprint-future-promise-delay-agent",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4131,"^8",7,"^9",4131,"^:",41,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Print out a future or a promise or a delay.  These can only be \n  sexpressions, since they don't exist in a textual representation \n  of code (or data for that matter).  That means that we can use \n  regular sexpression operations on zloc."],"^T","^6Y","^6","zprint/zprint.cljc","^:",41,"^=3",["^2T",[["^<[","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4131,"^=8",["^S",["^=C","^=M"]],"^9",4131,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Print out a future or a promise or a delay.  These can only be \n  sexpressions, since they don't exist in a textual representation \n  of code (or data for that matter).  That means that we can use \n  regular sexpression operations on zloc."],"~$rightmost",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",587,"^8",7,"^9",587,"^:",16,"^<U",["^2T",["^<V",["^2T",[["^<["]]]]],"^=2","Increase the rightmost count, if any, and return one if not."],"^T","^7Q","^6","zprint/zprint.cljc","^:",16,"^=3",["^2T",[["^<["]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",587,"^=8",["^S",["^=C","^=S"]],"^9",587,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<["]]]]],"^=2","Increase the rightmost count, if any, and return one if not."],"~$split-lf-2",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",59,"^8",7,"^9",59,"^:",17,"^<U",["^2T",["^<V",["^2T",[["~$s"]]]]],"^=2","Do split for newlines, instead of using regular expressions.\n  Maximum split is 2."],"^T","^7V","^6","zprint/zprint.cljc","^:",17,"^=3",["^2T",[["~$s"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",59,"^=8","^=?","^9",59,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$s"]]]]],"^=2","Do split for newlines, instead of using regular expressions.\n  Maximum split is 2."],"~$c-r-pair",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",597,"^8",7,"^9",597,"^:",15,"^<U",["^2T",["^<V",["^2T",[["~$commas?","~$rightmost-pair?","~$rightmost?","^<["]]]]],"^=2","Handle the complexity of commas and rightmost-pair with options.\n  If it isn't a rightmost, it loses rightmost status.\n  If it is a rightmost, and in the rightmost pair, it gain one rightmost\n  since it has the right end thing (and we don't care about the comma).\n  If it is the rightmost of the non-rightmost-pair, then the comma\n  matters, and we handle that appropriately.  Whew!"],"^T","^7S","^6","zprint/zprint.cljc","^:",15,"^=3",["^2T",[["^?1","^?2","^?3","^<["]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",597,"^=8",["^S",[null,"^=C","^=S","^=M"]],"^9",597,"^=:",4,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^?1","^?2","^?3","^<["]]]]],"^=2","Handle the complexity of commas and rightmost-pair with options.\n  If it isn't a rightmost, it loses rightmost status.\n  If it is a rightmost, and in the rightmost pair, it gain one rightmost\n  since it has the right end thing (and we don't care about the comma).\n  If it is the rightmost of the non-rightmost-pair, then the comma\n  matters, and we handle that appropriately.  Whew!"],"~$fzprint-fn-obj",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4187,"^8",7,"^9",4187,"^:",21,"^<U",["^2T",["^<V",["^2T",[[["^9S",[["^ ","^<W",["~$object?"]],"~:fn-obj","^2W","^<["]],"^=I","^=U"]]]]],"^=2","Print a function object, what you get when you put a function in\n  a collection, for instance.  This doesn't do macros, you will notice.\n  It also can't be invoked when zloc is a zipper."],"^T","^81","^6","zprint/zprint.cljc","^:",21,"^=3",["^2T",[["~$p__51973","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4187,"^=8",["^S",["^=C","^=M"]],"^9",4187,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^9S",[["^ ","^<W",["^?5"]],"^?6","^2W","^<["]],"^=I","^=U"]]]]],"^=2","Print a function object, what you get when you put a function in\n  a collection, for instance.  This doesn't do macros, you will notice.\n  It also can't be invoked when zloc is a zipper."],"~$single-line?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",519,"^8",7,"^9",519,"^:",19,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","This looks at a style vec and doesn't do all that style-lines does.\n  It just looks for a new-line in the strings, and returns true if it\n  doesn't find one."],"^T","^7W","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",519,"^=8","^=9","^9",519,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","This looks at a style vec and doesn't do all that style-lines does.\n  It just looks for a new-line in the strings, and returns true if it\n  doesn't find one."],"~$fzprint-map*",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3936,"^8",7,"^9",3936,"^:",19,"^<U",["^2T",["^<V",["^2T",[["^=G","^>D","^>E",["^9S",["^<W",["~$one-line?","~$ztype","~$map-depth","~$in-code?"],["^ ","^<W",["~$comma?","~$key-ignore","~$key-ignore-silent","^>2","~$force-nl?","~$lift-ns?","~$lift-ns-in-code?","^>3","~$indent-only?","~$indent"],"^2W","~$map-options"],"^=G","^2W","^<["]],"^=I","^=U","^2U"]]]]]],"^T","^6H","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["^=G","^>D","^>E","~$p__51946","^=I","^=U","^2U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3936,"^=8",["^S",["^=C","^=M"]],"^9",3936,"^=:",7,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G","^>D","^>E",["^9S",["^<W",["^?:","^?;","^?<","^?="],["^ ","^<W",["^?>","^??","^?@","^>2","^?A","^?B","^?C","^>3","^?D","^?E"],"^2W","^?F"],"^=G","^2W","^<["]],"^=I","^=U","^2U"]]]]]],"~$constant-pair",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1827,"^8",7,"^9",1827,"^:",20,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",[["^ ","^<W",["^=Y","^=Z"]],"^=G","^2W","^<["]],"~$seq-right"]]]]],"^=2","Argument is a zloc-seq.  Output is a [pair-seq non-paired-item-count],\n  if any.  If there are no pair-seqs, pair-seq must be nil, not an\n  empty seq.  This will largely ignore newlines."],"^T","^79","^6","zprint/zprint.cljc","^:",20,"^=3",["^2T",[["^=G","~$p__51726","^?I"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1827,"^=8","^=?","^9",1827,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",[["^ ","^<W",["^=Y","^=Z"]],"^=G","^2W","^<["]],"^?I"]]]]],"^=2","Argument is a zloc-seq.  Output is a [pair-seq non-paired-item-count],\n  if any.  If there are no pair-seqs, pair-seq must be nil, not an\n  empty seq.  This will largely ignore newlines."],"~$order-out",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1152,"^8",7,"^9",1152,"^:",16,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",[["^ ","^<W",["~$sort?","~$sort-in-code?","~$key-order","~$key-value"]],"^=G","^<W",["^?="],"^2W","^<["]],"~$access","~$out"]]]]],"^=2","A variety of sorting and ordering options for the output of\n  partition-all-2-nc.  It can sort, which is the default, but if\n  the caller has a key-order vector, it will extract any keys in\n  that vector and place them first (in order) before sorting the\n  other keys.  If sorting is not called for, does nothing."],"^T","^74","^6","zprint/zprint.cljc","^:",16,"^=3",["^2T",[["^=G","~$p__51521","^?P","^?Q"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1152,"^=8",["^S",[null,"~$seq","~$cljs.core/IList"]],"^9",1152,"^=:",4,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",[["^ ","^<W",["^?L","^?M","^?N","^?O"]],"^=G","^<W",["^?="],"^2W","^<["]],"^?P","^?Q"]]]]],"^=2","A variety of sorting and ordering options for the output of\n  partition-all-2-nc.  It can sort, which is the default, but if\n  the caller has a key-order vector, it will extract any keys in\n  that vector and place them first (in order) before sorting the\n  other keys.  If sorting is not called for, does nothing."],"~$hang-indent",["^ ","^T","^6J","^6","zprint/zprint.cljc","^7",2600,"^8",1,"^9",2600,"^:",17,"^5",["^ ","^6","zprint/zprint.cljc","^7",2600,"^8",6,"^9",2600,"^:",17],"^<Q","^<R"],"~$fzprint-two-up",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",700,"^8",7,"^9",700,"^:",21,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",["^<W",["^?:","^=W","~$dbg-indent","~$in-hang?","~$do-in-hang?","^?<"],["^ ","^<W",["^=X","~$dbg-local?","~$dbg-cnt?","^?E","~$indent-arg","~$flow?","~$key-color","~$key-depth-color","~$key-value-color"]],"^=G","^2W","^<["]],"^=I","^?1","~$justify-width","^?2",["~$lloc","~$rloc","~$xloc","^2W","~$pair"]]]]]],"^=2","Print a single pair of things (though it might not be exactly a\n  pair, given comments and :extend and the like), like bindings in\n  a let, clauses in a cond, keys and values in a map.  Controlled\n  by various maps, the key of which is caller.  Returns \n  [:hang <style-vec>] or [:flow <style-vec>] so that the upstream folks\n  know whether this was a hang or flow and can do the right thing\n  based on that."],"^T","^88","^6","zprint/zprint.cljc","^:",21,"^=3",["^2T",[["^=G","~$p__51462","^=I","^?1","^@5","^?2","~$p__51463"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",700,"^=8",["^S",["^=?","^=M"]],"^9",700,"^=:",7,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",["^<W",["^?:","^=W","^?W","^?X","^?Y","^?<"],["^ ","^<W",["^=X","^?Z","^?[","^?E","^@0","^@1","^@2","^@3","^@4"]],"^=G","^2W","^<["]],"^=I","^?1","^@5","^?2",["^@6","^@7","^@8","^2W","^@9"]]]]]],"^=2","Print a single pair of things (though it might not be exactly a\n  pair, given comments and :extend and the like), like bindings in\n  a let, clauses in a cond, keys and values in a map.  Controlled\n  by various maps, the key of which is caller.  Returns \n  [:hang <style-vec>] or [:flow <style-vec>] so that the upstream folks\n  know whether this was a hang or flow and can do the right thing\n  based on that."],"~$newline-or-comment?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2088,"^8",7,"^9",2088,"^:",26,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Given an zloc, is it a newline or a comment?"],"^T","^8:","^6","zprint/zprint.cljc","^:",26,"^=3",["^2T",[["^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2088,"^=8",["^S",["^=9","^=M"]],"^9",2088,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Given an zloc, is it a newline or a comment?"],"~$prefix-tags",["^ ","^T","^7F","^6","zprint/zprint.cljc","^7",4412,"^8",1,"^9",4412,"^:",17,"^5",["^ ","^6","zprint/zprint.cljc","^7",4412,"^8",6,"^9",4412,"^:",17],"^<Q","^=E"],"~$fzprint-flow-seq",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1663,"^8",7,"^9",1663,"^:",23,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^>6","^?A","~$nl-first?"],["^<[","^=I","^>6"],["^<[","^=I","^>6","^?A"]]]]],"^=2","Take a seq of a zloc, created by (zmap identity zloc) and return\n  a style-vec of the result.  Either it fits on one line, or it is\n  rendered on multiple lines.  You can force multiple lines with\n  force-nl?. If you want it to do less than everything in the\n  original zloc, modify the result of (zmap identity zloc) to just\n  contain what you want to print. ind is either a single indent,\n  or a seq of indents, one for each element in zloc-seq.  Don't\n  concatenate an indent/newline on to the beginning of the output\n  from this routine.  Let this routine do it for you, as it needs\n  to know one is there in order to properly deal with any newlines\n  in the actual stream.  Else you will get two where you only should\n  have one.","^=P",["^ ","^=7",false,"^=Q",5,"^=:",5,"^=3",[["^<[","^=I","^>6","^?A","^@?"],["^<[","^=I","^>6"],["^<[","^=I","^>6","^?A"]],"^<U",["^2T",[["^<[","^=I","^>6","^?A","^@?"],["^<[","^=I","^>6"],["^<[","^=I","^>6","^?A"]]],"^=6",["^2T",[null,null,null]]]],"^T","^7C","^6","zprint/zprint.cljc","^:",23,"^=P",["^ ","^=7",false,"^=Q",5,"^=:",5,"^=3",[["^<[","^=I","^>6","^?A","^@?"],["^<[","^=I","^>6"],["^<[","^=I","^>6","^?A"]],"^<U",["^2T",[["^<[","^=I","^>6","^?A","^@?"],["^<[","^=I","^>6"],["^<[","^=I","^>6","^?A"]]],"^=6",["^2T",[null,null,null]]],"^=3",[["^<[","^=I","^>6","^?A","^@?"],["^<[","^=I","^>6"],["^<[","^=I","^>6","^?A"]],"^=5",null,"^=Q",5,"^=6",["^2T",[null,null,null]],"^8",1,"^=7",false,"^=R",[["^ ","^=Q",5,"^=7",false,"^<Q","^=S"],["^ ","^=Q",3,"^=7",false,"^<Q","^=S"],["^ ","^=Q",4,"^=7",false,"^<Q","^=S"]],"^7",1663,"^9",1663,"^=:",5,"^=;",true,"^<U",["^2T",[["^<[","^=I","^>6","^?A","^@?"],["^<[","^=I","^>6"],["^<[","^=I","^>6","^?A"]]],"^=2","Take a seq of a zloc, created by (zmap identity zloc) and return\n  a style-vec of the result.  Either it fits on one line, or it is\n  rendered on multiple lines.  You can force multiple lines with\n  force-nl?. If you want it to do less than everything in the\n  original zloc, modify the result of (zmap identity zloc) to just\n  contain what you want to print. ind is either a single indent,\n  or a seq of indents, one for each element in zloc-seq.  Don't\n  concatenate an indent/newline on to the beginning of the output\n  from this routine.  Let this routine do it for you, as it needs\n  to know one is there in order to properly deal with any newlines\n  in the actual stream.  Else you will get two where you only should\n  have one."],"~$gather-up-to-next-zloc",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2123,"^8",7,"^9",2123,"^:",29,"^<U",["^2T",["^<V",["^2T",[["^>6"]]]]],"^=2","Given a zloc-seq, gather newlines and comments up to the next\n  zloc into a seq.  Returns [seq next-zloc next-count]."],"^T","^7D","^6","zprint/zprint.cljc","^:",29,"^=3",["^2T",[["^>6"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2123,"^=8","^=?","^9",2123,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^>6"]]]]],"^=2","Given a zloc-seq, gather newlines and comments up to the next\n  zloc into a seq.  Returns [seq next-zloc next-count]."],"~$noarg1-map",["^ ","^T","^7?","^6","zprint/zprint.cljc","^7",2818,"^8",1,"^9",2818,"^:",16,"^5",["^ ","^6","zprint/zprint.cljc","^7",2818,"^8",6,"^9",2818,"^:",16],"^<Q","^=E"],"~$zcolor-map",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",643,"^8",7,"^9",643,"^:",17,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["~$color-map"],"^2W","^<["],"~$key-or-str"]]]]],"^=2","Look up the thing in the zprint-color-map.  Accepts keywords or\n  strings."],"^T","^8K","^6","zprint/zprint.cljc","^:",17,"^=3",["^2T",[["~$p__51448","^@D"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",643,"^=8","^=S","^9",643,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["^@C"],"^2W","^<["],"^@D"]]]]],"^=2","Look up the thing in the zprint-color-map.  Accepts keywords or\n  strings."],"~$next-actual",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2314,"^8",7,"^9",2314,"^:",18,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Return the next actual element, ignoring comments and whitespace\n  and everything else but real elements."],"^T","^9L","^6","zprint/zprint.cljc","^:",18,"^=3",["^2T",[["^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2314,"^=8",["^S",[null,"^=S","^=M"]],"^9",2314,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Return the next actual element, ignoring comments and whitespace\n  and everything else but real elements."],"~$fzprint-ns",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4236,"^8",7,"^9",4236,"^:",17,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]]],"^T","^8M","^6","zprint/zprint.cljc","^:",17,"^=3",["^2T",[["^<[","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4236,"^=8",["^S",["^=C","^=M"]],"^9",4236,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]]],"~$str->key",["^ ","^T","^9@","^6","zprint/zprint.cljc","^7",626,"^8",1,"^9",626,"^:",14,"^5",["^ ","^6","zprint/zprint.cljc","^7",626,"^8",6,"^9",626,"^:",14],"^<Q","^=E"],"~$fzprint-hang-one",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1695,"^8",7,"^9",1695,"^:",23,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",["^<W",["^?:","^=A"],["^ ","^<W",["^=["]],"^=G","^2W","^<["]],"^>4","^>5","^=U"]]]]],"^=2","Try out the given zloc, and if it fits on the current line, just\n  do that. It might fit on the same line, as this may not be the rest\n  of the list that we are printing. If not, check it out with good-enough?\n  and do the best you can.  Three choices, really: fits on same line, \n  does ok as hanging, or better with flow. hindent is hang-indent, and \n  findent is flow-indent, and each contains the initial separator.  \n  Might be nice if the fn-style actually got sent to this fn."],"^T","^7H","^6","zprint/zprint.cljc","^:",23,"^=3",["^2T",[["^=G","~$p__51717","^>4","^>5","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1695,"^=8",["^S",["^=C","^=M"]],"^9",1695,"^=:",5,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",["^<W",["^?:","^=A"],["^ ","^<W",["^=["]],"^=G","^2W","^<["]],"^>4","^>5","^=U"]]]]],"^=2","Try out the given zloc, and if it fits on the current line, just\n  do that. It might fit on the same line, as this may not be the rest\n  of the list that we are printing. If not, check it out with good-enough?\n  and do the best you can.  Three choices, really: fits on same line, \n  does ok as hanging, or better with flow. hindent is hang-indent, and \n  findent is flow-indent, and each contains the initial separator.  \n  Might be nice if the fn-style actually got sent to this fn."],"~$fzprint-extend",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1550,"^8",7,"^9",1550,"^:",21,"^<U",["^2T",["^<V",["^2T",[[["^9S",[["^ ","^<W",["^>2"]],"~:extend","^2W","^<["]],"^=I","^>6"]]]]],"^=2","Print things with a symbol and collections following.  Kind of like with\n  pairs, but not quite. Takes a zloc-seq."],"^T","^8I","^6","zprint/zprint.cljc","^:",21,"^=3",["^2T",[["~$p__51681","^=I","^>6"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1550,"^=8","^=S","^9",1550,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^9S",[["^ ","^<W",["^>2"]],"^@L","^2W","^<["]],"^=I","^>6"]]]]],"^=2","Print things with a symbol and collections following.  Kind of like with\n  pairs, but not quite. Takes a zloc-seq."],"~$find-what",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",529,"^8",7,"^9",529,"^:",16,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","Given a style-vec, come up with a string that gives some hint of \n  where this style-vec came from."],"^T","^8Q","^6","zprint/zprint.cljc","^:",16,"^=3",["^2T",[["^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",529,"^=8",["^S",[null,"^=S","^=M"]],"^9",529,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","Given a style-vec, come up with a string that gives some hint of \n  where this style-vec came from."],"~$fzprint-atom",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4108,"^8",7,"^9",4108,"^:",19,"^<U",["^2T",["^<V",["^2T",[[["^9S",[["^ ","^<W",["^?5"]],"~:atom","^2W","^<["]],"^=I","^=U"]]]]]],"^T","^8R","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["~$p__51966","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4108,"^=8",["^S",["^=C","^=M"]],"^9",4108,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^9S",[["^ ","^<W",["^?5"]],"^@P","^2W","^<["]],"^=I","^=U"]]]]]],"~$comment-vec-column",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",5004,"^8",7,"^9",5004,"^:",25,"^<U",["^2T",["^<V",["^2T",[["^=>",["~$indent-index","~$inline-comment-index","^2W","~$comment-vec"]]]]]],"^=2","Take a single inline comment vector:\n  [indent-index inline-comment-index] \n  and replace it with [inline-comment-index start-column spaces-before]."],"^T","^82","^6","zprint/zprint.cljc","^:",25,"^=3",["^2T",[["^=>","~$p__52059"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",5004,"^=8","^=?","^9",5004,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=>",["^@S","^@T","^2W","^@U"]]]]]],"^=2","Take a single inline comment vector:\n  [indent-index inline-comment-index] \n  and replace it with [inline-comment-index start-column spaces-before]."],"~$fzprint-indent",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2695,"^8",7,"^9",2695,"^:",21,"^<U",["^2T",["^<V",["^2T",[["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F","~$first-indent-only?"],["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F"]]]]],"^=2","This function assumes that :indent-only? was set for the caller\n  in the options (since anything else doesn't make sense).  It takes\n  a zloc and the ind, which is where we are on the line this point,\n  and will process the zloc to include any newlines.  Of course we\n  have to have all of the white space in the zloc too, since we\n  need to ask some questions about what we are starting with at\n  some point.  We don't add newlines and we let the newlines that\n  are in there do their thing.  We might add newlines if we move\n  beyond the right margin, but for now, we don't (and it isn't\n  entirely clear how or if that would work).  This routine has to\n  make decisions about the indent, that is whether to hang or flow\n  the expression. It does that based on what was done in the input\n  if the configuration allows.","^=P",["^ ","^=7",false,"^=Q",9,"^=:",9,"^=3",[["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F","^@X"],["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F"]],"^<U",["^2T",[["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F","^@X"],["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F"]]],"^=6",["^2T",[null,null]]]],"^T","^8T","^6","zprint/zprint.cljc","^:",21,"^=P",["^ ","^=7",false,"^=Q",9,"^=:",9,"^=3",[["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F","^@X"],["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F"]],"^<U",["^2T",[["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F","^@X"],["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F"]]],"^=6",["^2T",[null,null]]],"^=3",[["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F","^@X"],["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F"]],"^=5",null,"^=Q",9,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^=R",[["^ ","^=Q",9,"^=7",false,"^<Q",["^S",["^=C","^=?","^=M"]]],["^ ","^=Q",8,"^=7",false,"^<Q",["^S",["^=C","^=?","^=M"]]]],"^7",2695,"^9",2695,"^=:",9,"^=;",true,"^<U",["^2T",[["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F","^@X"],["^=G","^>D","^>E","^<[","^=I","^=U","^=1","^>F"]]],"^=2","This function assumes that :indent-only? was set for the caller\n  in the options (since anything else doesn't make sense).  It takes\n  a zloc and the ind, which is where we are on the line this point,\n  and will process the zloc to include any newlines.  Of course we\n  have to have all of the white space in the zloc too, since we\n  need to ask some questions about what we are starting with at\n  some point.  We don't add newlines and we let the newlines that\n  are in there do their thing.  We might add newlines if we move\n  beyond the right margin, but for now, we don't (and it isn't\n  entirely clear how or if that would work).  This routine has to\n  make decisions about the indent, that is whether to hang or flow\n  the expression. It does that based on what was done in the input\n  if the configuration allows."],"~$fix-rightcnt",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",613,"^8",7,"^9",613,"^:",19,"^<U",["^2T",["^<V",["^2T",[["~$rightcnt"]]]]],"^=2","Handle issue with rightcnt."],"^T","^8V","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["^@Z"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",613,"^=8","^=L","^9",613,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^@Z"]]]]],"^=2","Handle issue with rightcnt."],"~$r",["^ ","~:num-fields",2,"~:protocols",["^S",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","^=E","~$cljs.core/ILookup"]],"^T","^9P","^6","zprint/zprint.cljc","^:",13,"~:type",true,"^8",12,"~:internal-ctor",true,"^7",5167,"~:record",true,"^9",5167,"^<Q","~$function","~:skip-protocol-flag",["^S",["^A1","^A2","^A3","^A4","^A5","^A6","^A7","^A8","^A9","^A:","^A;","^A<","^A=","^=E","^A>"]]],"~$remove-nl",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3541,"^8",7,"^9",3541,"^:",16,"^<U",["^2T",["^<V",["^2T",[["^=J"]]]]],"^=2","Remove any [_ _ :newline] from the seq."],"^T","^7T","^6","zprint/zprint.cljc","^:",16,"^=3",["^2T",[["^=J"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3541,"^=8","^56","^9",3541,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=J"]]]]],"^=2","Remove any [_ _ :newline] from the seq."],"~$fzprint-map",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4057,"^8",7,"^9",4057,"^:",18,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Format a real map."],"^T","^77","^6","zprint/zprint.cljc","^:",18,"^=3",["^2T",[["^<[","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4057,"^=8",["^S",["^=C","^=M"]],"^9",4057,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Format a real map."],"~$fzprint-vec*",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3567,"^8",7,"^9",3567,"^:",19,"^<U",["^2T",["^<V",["^2T",[["^=G","^>D","^>E",["^9S",["^<W",["^@Z","^?="],["^ ","^<W",["~$wrap-coll?","~$wrap?","~$binding?","~$option-fn-first","~$option-fn","^>3","^?L","^?M","~$fn-format","^?E","^?D"]],"^=G","^2W","^<["]],"^=I","^=U"]]]]],"^=2","Print basic stuff like a vector or a set.  Several options for how to\n  print them."],"^T","^93","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["^=G","^>D","^>E","~$p__51905","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3567,"^=8",["^S",["^=C","^=M"]],"^9",3567,"^=:",6,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G","^>D","^>E",["^9S",["^<W",["^@Z","^?="],["^ ","^<W",["^AG","^AH","^AI","^AJ","^AK","^>3","^?L","^?M","^AL","^?E","^?D"]],"^=G","^2W","^<["]],"^=I","^=U"]]]]],"^=2","Print basic stuff like a vector or a set.  Several options for how to\n  print them."],"~$wrap-comment",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4687,"^8",7,"^9",4687,"^:",19,"^<U",["^2T",["^<V",["^2T",[["^=A",["~$s","~$color","~$stype","^2W","~$element"],"^>U"]]]]],"^=2","If this is a comment, and it is too long, word wrap it to the right width.\n  Note that top level comments may well end with a newline, so remove it\n  and reapply it at the end if that is the case."],"^T","^8;","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["^=A","~$p__52008","^>U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4687,"^=8",["^S",[null,"^=C"]],"^9",4687,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=A",["~$s","^AO","^AP","^2W","^AQ"],"^>U"]]]]],"^=2","If this is a comment, and it is too long, word wrap it to the right width.\n  Note that top level comments may well end with a newline, so remove it\n  and reapply it at the end if that is the case."],"~$comment-vec-seq-column",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",5013,"^8",7,"^9",5013,"^:",29,"^<U",["^2T",["^<V",["^2T",[["^=>","~$comment-vec-seq"]]]]],"^=2","Take a single vector of inline comments\n  [[indent-index inline-comment-index] [indent-index inline-comment-index]\n   ...] and replace it with [[inline-comment-index start-column spaces-before]\n   [inline-comment-index start-column spaces-before] ...]"],"^T","^87","^6","zprint/zprint.cljc","^:",29,"^=3",["^2T",[["^=>","^AT"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",5013,"^=8","^56","^9",5013,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=>","^AT"]]]]],"^=2","Take a single vector of inline comments\n  [[indent-index inline-comment-index] [indent-index inline-comment-index]\n   ...] and replace it with [[inline-comment-index start-column spaces-before]\n   [inline-comment-index start-column spaces-before] ...]"],"~$log-lines",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",98,"^8",7,"^9",98,"^:",16,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["~$dbg-print?","^?W","^?X"],"^2W","^<["],"~$dbg-output","^=I","^=>"]]]]],"^=2","Accept a style-vec that we are about to hand to style-lines, and\n  output it if called for, to aid in debugging."],"^T","^8X","^6","zprint/zprint.cljc","^:",16,"^=3",["^2T",[["~$p__51320","^AW","^=I","^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",98,"^=8","^=M","^9",98,"^=:",4,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["^AV","^?W","^?X"],"^2W","^<["],"^AW","^=I","^=>"]]]]],"^=2","Accept a style-vec that we are about to hand to style-lines, and\n  output it if called for, to aid in debugging."],"~$line-widths",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",5124,"^8",7,"^9",5124,"^:",18,"^<U",["^2T",["^<V",["^2T",[["~$s"]]]]],"^=2","Return a vector the lengths of lines."],"^T","^8Y","^6","zprint/zprint.cljc","^:",18,"^=3",["^2T",[["~$s"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",5124,"^=8","^56","^9",5124,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$s"]]]]],"^=2","Return a vector the lengths of lines."],"~$lift-style-vec",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4762,"^8",7,"^9",4762,"^:",21,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","Take a style-vec [[s color type] [s color type] [[s color type]\n  [s color type]] [s color type] ...] and lift out the inner vectors."],"^T","^8F","^6","zprint/zprint.cljc","^:",21,"^=3",["^2T",[["^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4762,"^=8",["^S",[null,"^=S"]],"^9",4762,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","Take a style-vec [[s color type] [s color type] [[s color type]\n  [s color type]] [s color type] ...] and lift out the inner vectors."],"~$fzprint-map-two-up",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1029,"^8",7,"^9",1029,"^:",25,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",[["^ ","^<W",["^=H","^?A"]],"^=G","^<W",["^=A","^@Z","^?:","~$parallel?"],"^2W","^<["]],"^=I","^?1","^=J"]]]]],"^=2","Accept a sequence of pairs, and map fzprint-two-up across those pairs.\n  If you have :one-line? set, this will return nil if it is way over,\n  but it can't accurately tell exactly what will fit on one line, since\n  it doesn't know the separators and such.  So, :one-line? true is a\n  performance optimization, so it doesn't do a whole huge map just to\n  find out that it could not possibly have fit on one line.  So, this\n  returns a sequence of style-vecs, where the indentation for the\n  stuff inside of the pairs is already there, but the separators of\n  the style-vecs (including indentation and commas) is done by the\n  caller of fzprint-map-two-up. Always returns a sequence of vector pairs:\n  [[:hang <style-vec-for-one-pair>] [:flow <style-vec-for-one-pair>] ...].\n  If you want a style vec instead, call remove-hangflow on the return \n  from fzprint-map-two-up.  This will use one-line?, but not check to see\n  that it actually fits.  If you care about that, then you should check the\n  return yourself.  It will, however, make an estimate of whether or not\n  it will fit and if it clearly doesn't, it will return a nil."],"^T","^9<","^6","zprint/zprint.cljc","^:",25,"^=3",["^2T",[["^=G","~$p__51514","^=I","^?1","^=J"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1029,"^=8",["^S",["^=C","^=?","^=M"]],"^9",1029,"^=:",5,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",[["^ ","^<W",["^=H","^?A"]],"^=G","^<W",["^=A","^@Z","^?:","^B0"],"^2W","^<["]],"^=I","^?1","^=J"]]]]],"^=2","Accept a sequence of pairs, and map fzprint-two-up across those pairs.\n  If you have :one-line? set, this will return nil if it is way over,\n  but it can't accurately tell exactly what will fit on one line, since\n  it doesn't know the separators and such.  So, :one-line? true is a\n  performance optimization, so it doesn't do a whole huge map just to\n  find out that it could not possibly have fit on one line.  So, this\n  returns a sequence of style-vecs, where the indentation for the\n  stuff inside of the pairs is already there, but the separators of\n  the style-vecs (including indentation and commas) is done by the\n  caller of fzprint-map-two-up. Always returns a sequence of vector pairs:\n  [[:hang <style-vec-for-one-pair>] [:flow <style-vec-for-one-pair>] ...].\n  If you want a style vec instead, call remove-hangflow on the return \n  from fzprint-map-two-up.  This will use one-line?, but not check to see\n  that it actually fits.  If you care about that, then you should check the\n  return yourself.  It will, however, make an estimate of whether or not\n  it will fit and if it clearly doesn't, it will return a nil."],"~$rstr-vec",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1449,"^8",7,"^9",1449,"^:",15,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U","^>E","~$r-type"],["^<[","^=I","^=U","^>E"]]]]],"^=2","Create an r-str-vec with, possibly, a newline at the beginning if\n  the last thing before it is a comment.","^=P",["^ ","^=7",false,"^=Q",5,"^=:",5,"^=3",[["^<[","^=I","^=U","^>E","^B3"],["^<[","^=I","^=U","^>E"]],"^<U",["^2T",[["^<[","^=I","^=U","^>E","^B3"],["^<[","^=I","^=U","^>E"]]],"^=6",["^2T",[null,null]]]],"^T","^8D","^6","zprint/zprint.cljc","^:",15,"^=P",["^ ","^=7",false,"^=Q",5,"^=:",5,"^=3",[["^<[","^=I","^=U","^>E","^B3"],["^<[","^=I","^=U","^>E"]],"^<U",["^2T",[["^<[","^=I","^=U","^>E","^B3"],["^<[","^=I","^=U","^>E"]]],"^=6",["^2T",[null,null]]],"^=3",[["^<[","^=I","^=U","^>E","^B3"],["^<[","^=I","^=U","^>E"]],"^=5",null,"^=Q",5,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^=R",[["^ ","^=Q",5,"^=7",false,"^<Q","^56"],["^ ","^=Q",4,"^=7",false,"^<Q","^56"]],"^7",1449,"^9",1449,"^=:",5,"^=;",true,"^<U",["^2T",[["^<[","^=I","^=U","^>E","^B3"],["^<[","^=I","^=U","^>E"]]],"^=2","Create an r-str-vec with, possibly, a newline at the beginning if\n  the last thing before it is a comment."],"~$zat",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",84,"^8",7,"^9",84,"^:",10,"^<U",["^2T",["^<V",["^2T",[["^<[","~$value"]]]]],"^=2","Takes an option map and the return from zfuture.  If the\n  options map has (:parallel? options) as true, then deref\n  the value, otherwise just pass it through."],"^T","^7@","^6","zprint/zprint.cljc","^:",10,"^=3",["^2T",[["^<[","^B5"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",84,"^9",84,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^B5"]]]]],"^=2","Takes an option map and the return from zfuture.  If the\n  options map has (:parallel? options) as true, then deref\n  the value, otherwise just pass it through."],"~$interpose-either",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3717,"^8",7,"^9",3717,"^:",23,"^<U",["^2T",["^<V",["^2T",[["~$sep-true","~$sep-nil","~$pred?","^=J"]]]]],"^=2","Do the same as interpose, but different seps depending on pred?.\n  If sep-nil is nil, then when pred? is false we don't interpose\n  anything!"],"^T","^8@","^6","zprint/zprint.cljc","^:",23,"^=3",["^2T",[["^B7","^B8","^B9","^=J"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3717,"^=8","^=C","^9",3717,"^=:",4,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^B7","^B8","^B9","^=J"]]]]],"^=2","Do the same as interpose, but different seps depending on pred?.\n  If sep-nil is nil, then when pred? is false we don't interpose\n  anything!"],"~$fzprint-hang",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1487,"^8",7,"^9",1487,"^:",19,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["^?:"],"^2W","^<["],"^=G","^>4","^>5","~$fzfn","^>7","^=U"]]]]],"^=2","Try to hang something and try to flow it, and then see which is\n  better.  Has hang and flow indents. fzfn is the function to use \n  to do zloc.  Note what fzfn does with the input.  For instance,\n  fzprint-pairs does a (zmap-right identity zloc).  Presumably the\n  caller knows what the fzfn does, so it has to count the items\n  itself and pass it in here as zloc-count if it isn't just (zcount zloc)."],"^T","^9E","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["~$p__51657","^=G","^>4","^>5","^B;","^>7","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1487,"^=8",["^S",["^=C","^=M"]],"^9",1487,"^=:",7,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["^?:"],"^2W","^<["],"^=G","^>4","^>5","^B;","^>7","^=U"]]]]],"^=2","Try to hang something and try to flow it, and then see which is\n  better.  Has hang and flow indents. fzfn is the function to use \n  to do zloc.  Note what fzfn does with the input.  For instance,\n  fzprint-pairs does a (zmap-right identity zloc).  Presumably the\n  caller knows what the fzfn does, so it has to count the items\n  itself and pass it in here as zloc-count if it isn't just (zcount zloc)."],"~$wrap-zmap",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3458,"^8",7,"^9",3458,"^:",16,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",["^<W",["^=A","^@Z"],["^ ","^<W",["~$wrap-after-multi?"]],"^=G","^2W","^<["]],"^=I","~$coll-print"]]]]],"^=2","Given the output from fzprint-seq, which is a style-vec in\n  the making without spacing, but with extra [] around the elements,\n  wrap the elements to the right margin."],"^T","^9H","^6","zprint/zprint.cljc","^:",16,"^=3",["^2T",[["^=G","~$p__51891","^=I","^B?"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3458,"^=8",["^S",["^=?","^56","^=M"]],"^9",3458,"^=:",4,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",["^<W",["^=A","^@Z"],["^ ","^<W",["^B>"]],"^=G","^2W","^<["]],"^=I","^B?"]]]]],"^=2","Given the output from fzprint-seq, which is a style-vec in\n  the making without spacing, but with extra [] around the elements,\n  wrap the elements to the right margin."],"~$good-enough?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",165,"^8",7,"^9",165,"^:",19,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",["^<W",["^=A","^@Z","^=W"],["^ ","^<W",["~$hang-flow","~$hang-type-flow","~$hang-flow-limit","~$general-hang-adjust","~$hang-if-equal-flow?"]],"~:tuning",["^ ","^<W",["^>0","^>1","~$hang-size","~$hang-adjust"]],"^=G","^2W","^<["]],"^=1","~$p-count","~$indent-diff",["~$p-lines","~$p-maxwidth","~$p-length-seq","~$p-what"],["~$b-lines","~$b-maxwidth","~$_","~$b-what"]]]]]],"^=2","Given the fn-style, is the first output good enough to be worth\n  doing. p is pretty, which is typically hanging, and b is basic, which\n  is typically flow. p-count is the number of elements in the hang."],"^T","^9K","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["^=G","~$p__51331","^=1","^BJ","^BK","~$p__51332","~$p__51333"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",165,"^=8",["^S",[null,"^=9","^=S","^=M"]],"^9",165,"^=:",7,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",["^<W",["^=A","^@Z","^=W"],["^ ","^<W",["^BB","^BC","^BD","^BE","^BF"]],"^BG",["^ ","^<W",["^>0","^>1","^BH","^BI"]],"^=G","^2W","^<["]],"^=1","^BJ","^BK",["^BL","^BM","^BN","^BO"],["^BP","^BQ","~$_","^BR"]]]]]],"^=2","Given the fn-style, is the first output good enough to be worth\n  doing. p is pretty, which is typically hanging, and b is basic, which\n  is typically flow. p-count is the number of elements in the hang."],"~$precede-w-nl",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3735,"^8",7,"^9",3735,"^:",19,"^<U",["^2T",["^<V",["^2T",[["^=I","^=J","~$not-first?"]]]]],"^=2","Move through a sequence of style vecs and ensure that at least\n  one newline (actually an indent) appears before each element.  If\n  a newline in the style-vecs is where we wanted one, well and good.\n  If there are more than we wanted, be sure that they come out.\n  (Really? -- this is worth checking!)\n  Also, a comment gets a newline and shouldn't overlay a following\n  explicit newline.  If not-first? is truthy, then don't put a\n  newline before the first element."],"^T","^3K","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["^=I","^=J","^BW"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3735,"^=8",["^S",["^?S","^=C"]],"^9",3735,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=I","^=J","^BW"]]]]],"^=2","Move through a sequence of style vecs and ensure that at least\n  one newline (actually an indent) appears before each element.  If\n  a newline in the style-vecs is where we wanted one, well and good.\n  If there are more than we wanted, be sure that they come out.\n  (Really? -- this is worth checking!)\n  Also, a comment gets a newline and shouldn't overlay a following\n  explicit newline.  If not-first? is truthy, then don't put a\n  newline before the first element."],"~$get-max-length",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",332,"^8",7,"^9",332,"^:",21,"^<U",["^2T",["^<V",["^2T",[[["^ ","^2W","^<[","^<W",["~$max-length","~$depth"]]]]]]],"^=2","Given the options map, return the max length.  This might be\n  a constant number, but it might be based on the depth as well.\n  Returns nil of there is no max-length set."],"^T","^3N","^6","zprint/zprint.cljc","^:",21,"^=3",["^2T",[["~$p__51402"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",332,"^=8",["^S",["^=S","^=M"]],"^9",332,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^ ","^2W","^<[","^<W",["^BY","^BZ"]]]]]]],"^=2","Given the options map, return the max length.  This might be\n  a constant number, but it might be based on the depth as well.\n  Returns nil of there is no max-length set."],"~$lift-vec",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4750,"^8",7,"^9",4750,"^:",15,"^<U",["^2T",["^<V",["^2T",[["~$out-vec","^AQ"]]]]],"^=2","Take a transient output vector and a vector and lift any style-vec elements\n  out of the input vector."],"^T","^9B","^6","zprint/zprint.cljc","^:",15,"^=3",["^2T",[["^C1","^AQ"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4750,"^=8",["^S",[null,"^=C"]],"^9",4750,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^C1","^AQ"]]]]],"^=2","Take a transient output vector and a vector and lift any style-vec elements\n  out of the input vector."],"~$style-lines",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",542,"^8",7,"^9",542,"^:",18,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=>"]]]]],"^=2","Take a style output, and tell us how many lines it takes to print it\n  and the maximum width that it reaches. Returns \n  [<line-count> <max-width> [line-lengths]].\n  Doesn't require any max-width inside the style-vec. Also returns the\n  line lengths in case that is helpful (since we have them anyway).\n  If (:dbg-ge options) has value, then uses find-what to see if what it\n  finds matches the value, and if it does, place the value in the\n  resulting vector."],"^T","^9J","^6","zprint/zprint.cljc","^:",18,"^=3",["^2T",[["^<[","^=I","^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",542,"^=8",["^S",["^=C","^=M"]],"^9",542,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=>"]]]]],"^=2","Take a style output, and tell us how many lines it takes to print it\n  and the maximum width that it reaches. Returns \n  [<line-count> <max-width> [line-lengths]].\n  Doesn't require any max-width inside the style-vec. Also returns the\n  line lengths in case that is helpful (since we have them anyway).\n  If (:dbg-ge options) has value, then uses find-what to see if what it\n  finds matches the value, and if it does, place the value in the\n  resulting vector."],"~$dec-depth",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4257,"^8",7,"^9",4257,"^:",16,"^<U",["^2T",["^<V",["^2T",[["^<["]]]]],"^=2","Given an options map, decrement the :depth value and return the result."],"^T","^9Q","^6","zprint/zprint.cljc","^:",16,"^=3",["^2T",[["^<["]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4257,"^=8",["^S",["^=C","^=S","^=M"]],"^9",4257,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<["]]]]],"^=2","Given an options map, decrement the :depth value and return the result."],"~$zfind-seq",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2780,"^8",7,"^9",2780,"^:",16,"^<U",["^2T",["^<V",["^2T",[["~$zthing?","^>6"]]]]],"^=2","Find the location, counting from zero, and counting every element \n  in the seq, of the first zthing?.  Return its index if it is found, \n  nil if not."],"^T","^9N","^6","zprint/zprint.cljc","^:",16,"^=3",["^2T",[["^C5","^>6"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2780,"^=8",["^S",["^=L","^=M"]],"^9",2780,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^C5","^>6"]]]]],"^=2","Find the location, counting from zero, and counting every element \n  in the seq, of the first zthing?.  Return its index if it is found, \n  nil if not."],"~$fzprint-up-to-first-zloc",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2183,"^8",7,"^9",2183,"^:",31,"^<U",["^2T",["^<V",["^2T",[["^=G","^<[","^=I","^=U"]]]]],"^=2","Returns [pre-first-style-vec first-zloc first-count zloc-seq], where\n  pre-first-style-vec will be :noseq if there isn't anything, and first-count\n  is what you give to nthnext to get to the first-zloc in zloc-seq."],"^T","^3S","^6","zprint/zprint.cljc","^:",31,"^=3",["^2T",[["^=G","^<[","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2183,"^=8","^=?","^9",2183,"^=:",4,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G","^<[","^=I","^=U"]]]]],"^=2","Returns [pre-first-style-vec first-zloc first-count zloc-seq], where\n  pre-first-style-vec will be :noseq if there isn't anything, and first-count\n  is what you give to nthnext to get to the first-zloc in zloc-seq."],"~$next-newline",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2220,"^8",7,"^9",2220,"^:",19,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Given a zloc that is down inside of a collection, presumably\n  a list, return a vector containing the number of printing elements\n  we had to traverse to get to it as well as the newline."],"^T","^9O","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2220,"^=8","^=?","^9",2220,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Given a zloc that is down inside of a collection, presumably\n  a list, return a vector containing the number of printing elements\n  we had to traverse to get to it as well as the newline."],"~$hash-identity-str",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4099,"^8",7,"^9",4099,"^:",24,"^<U",["^2T",["^<V",["^2T",[["~$obj"]]]]],"^=2","Find the hash-code identity for an object."],"^T","^3@","^6","zprint/zprint.cljc","^:",24,"^=3",["^2T",[["^C9"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4099,"^=8","~$string","^9",4099,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^C9"]]]]],"^=2","Find the hash-code identity for an object."],"~$last-space",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4660,"^8",7,"^9",4660,"^:",17,"^<U",["^2T",["^<V",["^2T",[["~$s","~$from-index"]]]]],"^=2","Take a string and an index, and look for the last space prior to the\n  index. If we wanted to tie ourselves to 1.8, we could use \n  clojure.string/last-index-of, but we don't.  However, we use similar\n  conventions, i.e., if no space is found, return nil, and if the index\n  is a space return that value, and accept any from-index, including one\n  larger than the length of the string."],"^T","^8>","^6","zprint/zprint.cljc","^:",17,"^=3",["^2T",[["~$s","^C<"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4660,"^=8",["^S",["^=L","^=M"]],"^9",4660,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$s","^C<"]]]]],"^=2","Take a string and an index, and look for the last space prior to the\n  index. If we wanted to tie ourselves to 1.8, we could use \n  clojure.string/last-index-of, but we don't.  However, we use similar\n  conventions, i.e., if no space is found, return nil, and if the index\n  is a space return that value, and accept any from-index, including one\n  larger than the length of the string."],"~$fzprint-object",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4086,"^8",7,"^9",4086,"^:",21,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U","~$zloc-value"],["^<[","^=I","^=U"]]]]],"^=2","Print something that looks like #object[...] in a way\n  that will acknowledge the structure inside of the [...]","^=P",["^ ","^=7",false,"^=Q",4,"^=:",4,"^=3",[["^<[","^=I","^=U","^C>"],["^<[","^=I","^=U"]],"^<U",["^2T",[["^<[","^=I","^=U","^C>"],["^<[","^=I","^=U"]]],"^=6",["^2T",[null,null]]]],"^T","^84","^6","zprint/zprint.cljc","^:",21,"^=P",["^ ","^=7",false,"^=Q",4,"^=:",4,"^=3",[["^<[","^=I","^=U","^C>"],["^<[","^=I","^=U"]],"^<U",["^2T",[["^<[","^=I","^=U","^C>"],["^<[","^=I","^=U"]]],"^=6",["^2T",[null,null]]],"^=3",[["^<[","^=I","^=U","^C>"],["^<[","^=I","^=U"]],"^=5",null,"^=Q",4,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^=R",[["^ ","^=Q",4,"^=7",false,"^<Q",["^S",["^=C","^=M"]]],["^ ","^=Q",3,"^=7",false,"^<Q",["^S",["^=C","^=M"]]]],"^7",4086,"^9",4086,"^=:",4,"^=;",true,"^<U",["^2T",[["^<[","^=I","^=U","^C>"],["^<[","^=I","^=U"]]],"^=2","Print something that looks like #object[...] in a way\n  that will acknowledge the structure inside of the [...]"],"~$fzprint-set",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3711,"^8",7,"^9",3711,"^:",18,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Pretty print and focus style a :set element."],"^T","^3?","^6","zprint/zprint.cljc","^:",18,"^=3",["^2T",[["^<[","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3711,"^=8",["^S",["^=C","^=M"]],"^9",3711,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Pretty print and focus style a :set element."],"~$no-max-length",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",342,"^8",7,"^9",342,"^:",20,"^<U",["^2T",["^<V",["^2T",[["^<["]]]]],"^=2","Given an options map, return another options map with no\n  :max-length key.  This is to that you can call a routine that\n  normally deals with :max-length and get it to do the normal\n  thing."],"^T","^8Z","^6","zprint/zprint.cljc","^:",20,"^=3",["^2T",[["^<["]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",342,"^=8",["^S",["^=C","^=S"]],"^9",342,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<["]]]]],"^=2","Given an options map, return another options map with no\n  :max-length key.  This is to that you can call a routine that\n  normally deals with :max-length and get it to do the normal\n  thing."],"~$fzprint-array",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3707,"^8",7,"^9",3707,"^:",20,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]]],"^T","^3F","^6","zprint/zprint.cljc","^:",20,"^=3",["^2T",[["^<[","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3707,"^=8",["^S",["^=C","^=M"]],"^9",3707,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]]],"~$noarg1",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2825,"^8",7,"^9",2825,"^:",13,"^<U",["^2T",["^<V",["^2T",[["^<[","~$fn-type"]]]]],"^=2","Set noarg1 in the options if it is the right fn-type."],"^T","^95","^6","zprint/zprint.cljc","^:",13,"^=3",["^2T",[["^<[","^CC"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2825,"^=8",["^S",[null,"^=C","^=S"]],"^9",2825,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^CC"]]]]],"^=2","Set noarg1 in the options if it is the right fn-type."],"~$map-ignore",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1238,"^8",7,"^9",1238,"^:",17,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",[["^ ","^<W",["^??","^?@"]],"^=G","^2W","^<["]],"^=U"]]]]],"^=2","Take a map and remove any of the key sequences specified from it.\n  Note that this only works for sexpressions, not for actual zippers."],"^T","^96","^6","zprint/zprint.cljc","^:",17,"^=3",["^2T",[["^=G","~$p__51533","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1238,"^=8",["^S",[null,"^=S"]],"^9",1238,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",[["^ ","^<W",["^??","^?@"]],"^=G","^2W","^<["]],"^=U"]]]]],"^=2","Take a map and remove any of the key sequences specified from it.\n  Note that this only works for sexpressions, not for actual zippers."],"~$newline-seq?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2607,"^8",7,"^9",2607,"^:",19,"^<U",["^2T",["^<V",["^2T",[["^2N"]]]]],"^=2","Given a vector of vectors, decide if we should merge these individually\n  into the top level vector."],"^T","^8?","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["^2N"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2607,"^=8","^=9","^9",2607,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^2N"]]]]],"^=2","Given a vector of vectors, decide if we should merge these individually\n  into the top level vector."],"~$accumulate-ll",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",356,"^8",7,"^9",356,"^:",20,"^<U",["^2T",["^<V",["^2T",[["~$count-comment?",["^?Q","~$cur-len","~$just-eol?","~$just-comment?","^2W","~$in"],"~$s","~$tag","~$eol?"]]]]],"^=2","Take the vector carrying the intermediate results, and\n  do the right thing with a new string. Vector is\n  [ 0 out - vector accumulating line lengths \n    1 cur-len - length of current line\n    just-eol? - did we just do an eol?\n    ]\n  s - string to add to current line\n  tag - element type of string (comment's don't count in length)\n  eol? - should we terminate line after adding count of s"],"^T","^9;","^6","zprint/zprint.cljc","^:",20,"^=3",["^2T",[["^CH","~$p__51405","~$s","^CM","^CN"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",356,"^=8","^=?","^9",356,"^=:",5,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^CH",["^?Q","^CI","^CJ","^CK","^2W","^CL"],"~$s","^CM","^CN"]]]]],"^=2","Take the vector carrying the intermediate results, and\n  do the right thing with a new string. Vector is\n  [ 0 out - vector accumulating line lengths \n    1 cur-len - length of current line\n    just-eol? - did we just do an eol?\n    ]\n  s - string to add to current line\n  tag - element type of string (comment's don't count in length)\n  eol? - should we terminate line after adding count of s"],"~$fzprint-anon-fn",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3444,"^8",7,"^9",3444,"^:",22,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Pretty print and focus style a fn element."],"^T","^8B","^6","zprint/zprint.cljc","^:",22,"^=3",["^2T",[["^<[","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3444,"^=8",["^S",["^=C","^=M"]],"^9",3444,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Pretty print and focus style a fn element."],"~$comment-vec-all-column",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",5021,"^8",7,"^9",5021,"^:",29,"^<U",["^2T",["^<V",["^2T",[["^=>","~$comment-vec-all"]]]]],"^=2","Take a seq of all of the comments as produced by \n  find-consecutive-inline-comments, and turn it into:\n  [[[inline-comment-index start-column spaces-before] [inline-comment-index\n  start-column spaces-before]\n  ...] ...]"],"^T","^9I","^6","zprint/zprint.cljc","^:",29,"^=3",["^2T",[["^=>","^CR"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",5021,"^=8","^56","^9",5021,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=>","^CR"]]]]],"^=2","Take a seq of all of the comments as produced by \n  find-consecutive-inline-comments, and turn it into:\n  [[[inline-comment-index start-column spaces-before] [inline-comment-index\n  start-column spaces-before]\n  ...] ...]"],"~$in-hang",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",264,"^8",7,"^9",264,"^:",14,"^<U",["^2T",["^<V",["^2T",[["^<["]]]]],"^=2","Add :in-hang? true to the options map."],"^T","^4E","^6","zprint/zprint.cljc","^:",14,"^=3",["^2T",[["^<["]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",264,"^=8",["^S",[null,"^=C","^=S"]],"^9",264,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<["]]]]],"^=2","Add :in-hang? true to the options map."],"~$comment-column",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4990,"^8",7,"^9",4990,"^:",21,"^<U",["^2T",["^<V",["^2T",[[["^@S","~$comment-index"],"^=>"]]]]],"^=2","Takes a single vector of [indent-index comment-index] and will show the\n  column on the line in which the comment starts."],"^T","^4?","^6","zprint/zprint.cljc","^:",21,"^=3",["^2T",[["~$p__52055","^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4990,"^=8","^=L","^9",4990,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^@S","^CU"],"^=>"]]]]],"^=2","Takes a single vector of [indent-index comment-index] and will show the\n  column on the line in which the comment starts."],"~$line-size",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4793,"^8",7,"^9",4793,"^:",16,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","Given a style-vec, how big is it in actual characters.  This doesn't\n  handle newlines."],"^T","^4H","^6","zprint/zprint.cljc","^:",16,"^=3",["^2T",[["^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4793,"^=8","^=S","^9",4793,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","Given a style-vec, how big is it in actual characters.  This doesn't\n  handle newlines."],"~$minimum-column",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",5030,"^8",7,"^9",5030,"^:",21,"^<U",["^2T",["^<V",["^2T",[["^@U"]]]]],"^=2","Given a set of inline comments:\n  [[inline-comment-index start-column spaces-before]\n   [inline-comment-index start-column spaces-before] ...], determine\n   the minimum column at which they could be aligned."],"^T","^3J","^6","zprint/zprint.cljc","^:",21,"^=3",["^2T",[["^@U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",5030,"^=8","^=S","^9",5030,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^@U"]]]]],"^=2","Given a set of inline comments:\n  [[inline-comment-index start-column spaces-before]\n   [inline-comment-index start-column spaces-before] ...], determine\n   the minimum column at which they could be aligned."],"~$interpose-either-nl-hf",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3823,"^8",7,"^9",3823,"^:",29,"^<U",["^2T",["^<V",["^2T",[["^B7","~$sep-true-nl","^B8","~$sep-nil-nl",["^ ","^<W",["^>2","~$nl-separator-flow?"],"^2W","~$suboptions"],"~$pred-fn","^=J"]]]]],"^=2","Do very specialized interpose, but different seps depending on pred-fn\n  return and nl-separator?. This assumes that sep-* does one line, and\n  sep-*-nl does two lines."],"^T","^9D","^6","zprint/zprint.cljc","^:",29,"^=3",["^2T",[["^B7","^CZ","^B8","^C[","~$p__51930","^D2","^=J"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3823,"^=8","^=S","^9",3823,"^=:",7,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^B7","^CZ","^B8","^C[",["^ ","^<W",["^>2","^D0"],"^2W","^D1"],"^D2","^=J"]]]]],"^=2","Do very specialized interpose, but different seps depending on pred-fn\n  return and nl-separator?. This assumes that sep-* does one line, and\n  sep-*-nl does two lines."],"~$fzprint-hang-unless-fail",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",664,"^8",7,"^9",664,"^:",31,"^<U",["^2T",["^<V",["^2T",[["^<[","^>4","^>5","^B;","^=U"]]]]],"^=2","Try to hang something and if it doesn't hang at all, then flow it,\n  but strongly prefer hang.  Has hang and flow indents, and fzfn is the\n  fzprint-? function to use with zloc.  Callers need to know whether this\n  was hang or flow, so it returns [{:hang | :flow} style-vec] all the time."],"^T","^9?","^6","zprint/zprint.cljc","^:",31,"^=3",["^2T",[["^<[","^>4","^>5","^B;","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",664,"^=8","^=?","^9",664,"^=:",5,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^>4","^>5","^B;","^=U"]]]]],"^=2","Try to hang something and if it doesn't hang at all, then flow it,\n  but strongly prefer hang.  Has hang and flow indents, and fzfn is the\n  fzprint-? function to use with zloc.  Callers need to know whether this\n  was hang or flow, so it returns [{:hang | :flow} style-vec] all the time."],"~$keyword-fn?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",325,"^8",7,"^9",325,"^:",18,"^<U",["^2T",["^<V",["^2T",[["^<[","~$s"]]]]],"^=2","Takes a string, and returns the fn-style if it is a keyword and\n  without the : it can be found in the fn-map."],"^T","^9A","^6","zprint/zprint.cljc","^:",18,"^=3",["^2T",[["^<[","~$s"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",325,"^=8",["^S",["^=S","^=M"]],"^9",325,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","~$s"]]]]],"^=2","Takes a string, and returns the fn-style if it is a keyword and\n  without the : it can be found in the fn-map."],"~$not-rightmost",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",592,"^8",7,"^9",592,"^:",20,"^<U",["^2T",["^<V",["^2T",[["^<["]]]]],"^=2","Remove the rightmost count."],"^T","^4@","^6","zprint/zprint.cljc","^:",20,"^=3",["^2T",[["^<["]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",592,"^=8",["^S",["^=C","^=M"]],"^9",592,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<["]]]]],"^=2","Remove the rightmost count."],"~$find-aligned-inline-comments",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4847,"^8",7,"^9",4847,"^:",35,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","Given a style-vec, find previously aligned inline comments and\n  output the as a sequence of vectors of comments. The previously\n  aligned comments do not have to be consecutive, but they can't\n  be separated by more than max-aligned-inline-comment-distance.\n  Each comment itself is a vector: [indent-index inline-comment-index],\n  yielding a [[[indent-index inline-comment-index] [indent-index\n  inline-comment-index] ...] ...].  The indexes are into the\n  style-vec."],"^T","^4L","^6","zprint/zprint.cljc","^:",35,"^=3",["^2T",[["^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4847,"^=8",["^S",["^=C","^=S"]],"^9",4847,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","Given a style-vec, find previously aligned inline comments and\n  output the as a sequence of vectors of comments. The previously\n  aligned comments do not have to be consecutive, but they can't\n  be separated by more than max-aligned-inline-comment-distance.\n  Each comment itself is a vector: [indent-index inline-comment-index],\n  yielding a [[[indent-index inline-comment-index] [indent-index\n  inline-comment-index] ...] ...].  The indexes are into the\n  style-vec."],"~$zpmap",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",76,"^8",16,"^9",76,"^:",21,"^<U",["^2T",["^<V",["^2T",[["^<[","~$f","^=J"],["^<[","~$f","~$coll1","~$coll2"]]]]],"^=P",["^ ","^=7",false,"^=Q",4,"^=:",4,"^=3",[["^<[","~$f","^=J"],["^<[","~$f","^D9","^D:"]],"^<U",["^2T",[["^<[","~$f","^=J"],["^<[","~$f","^D9","^D:"]]],"^=6",["^2T",[null,null]]]],"^T","^4J","^6","zprint/zprint.cljc","^:",21,"^=P",["^ ","^=7",false,"^=Q",4,"^=:",4,"^=3",[["^<[","~$f","^=J"],["^<[","~$f","^D9","^D:"]],"^<U",["^2T",[["^<[","~$f","^=J"],["^<[","~$f","^D9","^D:"]]],"^=6",["^2T",[null,null]]],"^=3",[["^<[","~$f","^=J"],["^<[","~$f","^D9","^D:"]],"^=5",null,"^=Q",4,"^=6",["^2T",[null,null]],"^8",10,"^=7",false,"^=R",[["^ ","^=Q",3,"^=7",false,"^<Q","^56"],["^ ","^=Q",4,"^=7",false,"^<Q","^56"]],"^7",76,"^9",76,"^=:",4,"^=;",true,"^<U",["^2T",[["^<[","~$f","^=J"],["^<[","~$f","^D9","^D:"]]]],"~$change-start-column",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",5040,"^8",7,"^9",5040,"^:",26,"^<U",["^2T",["^<V",["^2T",[["~$new-start-column","^=>",["^@T","~$start-column","~$spaces-before","^2W","^@U"]]]]]],"^=2","Given a new start-column, and a vector \n  [[inline-comment-index start-column spaces-before]\n  and a style-vec, return a new style-vec with the inline-comment starting\n  at a new column."],"^T","^4M","^6","zprint/zprint.cljc","^:",26,"^=3",["^2T",[["^D<","^=>","~$p__52064"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",5040,"^=8",["^S",["^=C","^=S"]],"^9",5040,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^D<","^=>",["^@T","^D=","^D>","^2W","^@U"]]]]]],"^=2","Given a new start-column, and a vector \n  [[inline-comment-index start-column spaces-before]\n  and a style-vec, return a new style-vec with the inline-comment starting\n  at a new column."],"~$remove-last-newline",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2095,"^8",7,"^9",2095,"^:",26,"^<U",["^2T",["^<V",["^2T",[["~$ssv"]]]]],"^=2","Given a seq of style-vecs, look at the last one, and if it is a\n  :newline, then remove it.  But the last one might be a single\n  one, in which case we will remove the whole thing, and it might be\n  the last one in a sequence, in which case we will remove just that\n  one.  If there is nothing left, return [[[\"\" :none :none]]]."],"^T","^3U","^6","zprint/zprint.cljc","^:",26,"^=3",["^2T",[["^DA"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2095,"^=8",["^S",[null,"^=C"]],"^9",2095,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^DA"]]]]],"^=2","Given a seq of style-vecs, look at the last one, and if it is a\n  :newline, then remove it.  But the last one might be a single\n  one, in which case we will remove the whole thing, and it might be\n  the last one in a sequence, in which case we will remove just that\n  one.  If there is nothing left, return [[[\"\" :none :none]]]."],"~$noarg1-set",["^ ","^T","^91","^6","zprint/zprint.cljc","^7",2816,"^8",1,"^9",2816,"^:",16,"^5",["^ ","^6","zprint/zprint.cljc","^7",2816,"^8",6,"^9",2816,"^:",16],"^<Q","^<R"],"~$fzprint-up-to-next-zloc",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2134,"^8",7,"^9",2134,"^:",30,"^<U",["^2T",["^<V",["^2T",[["^=G","^<[","^=I",["~$_","~$_","~$current-count","^>6","^2W","~$next-data"]]]]]],"^=2","Using the information returned from fzprint-up-to-first-zloc or\n  fzprint-up-to-next-zloc, find the next zloc and return \n  [pre-next-style-vec next-zloc next-count zloc-seq]"],"^T","^92","^6","zprint/zprint.cljc","^:",30,"^=3",["^2T",[["^=G","^<[","^=I","~$p__51749"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2134,"^=8","^=?","^9",2134,"^=:",4,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G","^<[","^=I",["~$_","~$_","^DD","^>6","^2W","^DE"]]]]]],"^=2","Using the information returned from fzprint-up-to-first-zloc or\n  fzprint-up-to-next-zloc, find the next zloc and return \n  [pre-next-style-vec next-zloc next-count zloc-seq]"],"~$cleave-end",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1327,"^8",7,"^9",1327,"^:",17,"^<U",["^2T",["^<V",["^2T",[["^=J"]]]]],"^=2","Take a seq, and if it is contains a single symbol, simply return\n  it in another seq.  If it contains something else, remove any non\n  collections off of the end and return them in their own double seqs,\n  as well as return the remainder (the beginning) as a double seq."],"^T","^3>","^6","zprint/zprint.cljc","^:",17,"^=3",["^2T",[["^=J"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1327,"^=8","^=C","^9",1327,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=J"]]]]],"^=2","Take a seq, and if it is contains a single symbol, simply return\n  it in another seq.  If it contains something else, remove any non\n  collections off of the end and return them in their own double seqs,\n  as well as return the remainder (the beginning) as a double seq."],"~$object-str?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4081,"^8",7,"^9",4081,"^:",18,"^<U",["^2T",["^<V",["^2T",[["~$s"]]]]],"^=2","Return true if the string starts with #object["],"^T","^3=","^6","zprint/zprint.cljc","^:",18,"^=3",["^2T",[["~$s"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4081,"^=8",["^S",["^=C","^=?","^=S","~$cljs.core/MetaFn","^=M"]],"^9",4081,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$s"]]]]],"^=2","Return true if the string starts with #object["],"~$fzprint-list*",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2878,"^8",7,"^9",2878,"^:",20,"^<U",["^2T",["^<V",["^2T",[["^=G","^>D","^>E",["^ ","^<W",["~$fn-map","~$user-fn-map","^?:","^=1","~$no-arg1?","^<X"],"^2W","^<["],"^=I","^=U"]]]]],"^=2","Print a list, which might be a list or an anon fn.  \n  Lots of work to make a list look good, as that is typically code. \n  Presently all of the callers of this are :list or :vector-fn."],"^T","^98","^6","zprint/zprint.cljc","^:",20,"^=3",["^2T",[["^=G","^>D","^>E","~$p__51819","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2878,"^=8",["^S",["^=C","^=M"]],"^9",2878,"^=:",6,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G","^>D","^>E",["^ ","^<W",["^DK","^DL","^?:","^=1","^DM","^<X"],"^2W","^<["],"^=I","^=U"]]]]],"^=2","Print a list, which might be a list or an anon fn.  \n  Lots of work to make a list look good, as that is typically code. \n  Presently all of the callers of this are :list or :vector-fn."],"~$hang-zloc?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2333,"^8",7,"^9",2333,"^:",17,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Should we hang this zloc, or flow it.  We assume that we are at\n  the start of the collection (though this could be generalized to\n  deal with other starting locations easily enough).  Return true\n  if we should hang it based just on the information in the zloc\n  itself.  The criteria are: If there is a newline after the second\n  thing in the zloc, and the amount of space prior to the third thing\n  is the same as the amount of space prior to the second thing, then\n  the incoming zloc was hung and we should do the same. Of course, it\n  would also only be hung if the second thing was on the same line as\n  the first thing."],"^T","^43","^6","zprint/zprint.cljc","^:",17,"^=3",["^2T",[["^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2333,"^=8",["^S",[null,"^=9","^=S","^=M"]],"^9",2333,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Should we hang this zloc, or flow it.  We assume that we are at\n  the start of the collection (though this could be generalized to\n  deal with other starting locations easily enough).  Return true\n  if we should hang it based just on the information in the zloc\n  itself.  The criteria are: If there is a newline after the second\n  thing in the zloc, and the amount of space prior to the third thing\n  is the same as the amount of space prior to the second thing, then\n  the incoming zloc was hung and we should do the same. Of course, it\n  would also only be hung if the second thing was on the same line as\n  the first thing."],"~$fzprint-reader-macro",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4336,"^8",7,"^9",4336,"^:",27,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Print a reader-macro, often a reader-conditional. Adapted for differences\n  in parsing #?@ between rewrite-clj and rewrite-cljs.  Also adapted for\n  the rewrite-clj not parsing namespaced maps in the version presently\n  used."],"^T","^47","^6","zprint/zprint.cljc","^:",27,"^=3",["^2T",[["^<[","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4336,"^=8",["^S",["^=C","^=M"]],"^9",4336,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Print a reader-macro, often a reader-conditional. Adapted for differences\n  in parsing #?@ between rewrite-clj and rewrite-cljs.  Also adapted for\n  the rewrite-clj not parsing namespaced maps in the version presently\n  used."],"~$ensure-start-w-nl",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1857,"^8",7,"^9",1857,"^:",24,"^<U",["^2T",["^<V",["^2T",[["^=I","^=>"]]]]],"^=2","Given a style-vec, ensure it starts with a newline.  If it doesn't,\n  then put one in.  We could take the whole newline, but the indent is\n  really the only unique thing."],"^T","^49","^6","zprint/zprint.cljc","^:",24,"^=3",["^2T",[["^=I","^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1857,"^=8",["^S",[null,"^=C","^=M"]],"^9",1857,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=I","^=>"]]]]],"^=2","Given a style-vec, ensure it starts with a newline.  If it doesn't,\n  then put one in.  We could take the whole newline, but the indent is\n  really the only unique thing."],"~$line-lengths",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",483,"^8",7,"^9",483,"^:",19,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=>"]]]]],"^=2","Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments at the\n  end. Note that only vectors with :whitespace or :indent are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character."],"^T","^4G","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["^<[","^=I","^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",483,"^=8",["^S",["^=S","^=M"]],"^9",483,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=>"]]]]],"^=2","Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments at the\n  end. Note that only vectors with :whitespace or :indent are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character."],"~$merge-fzprint-seq",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2617,"^8",7,"^9",2617,"^:",24,"^<U",["^2T",["^<V",["^2T",[["~$fzprint-seq-vec"]]]]],"^=2","Given the output from fzprint-seq, which is a seq of the\n  output of fzprint*, apply a function to each of them that has\n  more than one element (since less has no meaning) and when the\n  function returns true, merge the vector in as individual elements."],"^T","^5A","^6","zprint/zprint.cljc","^:",24,"^=3",["^2T",[["^DT"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2617,"^=8",["^S",[null,"^=C","^=S"]],"^9",2617,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^DT"]]]]],"^=2","Given the output from fzprint-seq, which is a seq of the\n  output of fzprint*, apply a function to each of them that has\n  more than one element (since less has no meaning) and when the\n  function returns true, merge the vector in as individual elements."],"~$max-width",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",5129,"^8",7,"^9",5129,"^:",16,"^<U",["^2T",["^<V",["^2T",[["~$s"]]]]],"^=2","Split a string into lines, and figure the max width."],"^T","^59","^6","zprint/zprint.cljc","^:",16,"^=3",["^2T",[["~$s"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",5129,"^=8","^=S","^9",5129,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$s"]]]]],"^=2","Split a string into lines, and figure the max width."],"~$fzprint-binding-vec",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1462,"^8",7,"^9",1462,"^:",26,"^<U",["^2T",["^<V",["^2T",[[["^9S",[["^ ","^<W",["^>2"]],"~:binding","^2W","^<["]],"^=I","^=U"]]]]]],"^T","^4>","^6","zprint/zprint.cljc","^:",26,"^=3",["^2T",[["~$p__51648","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1462,"^=8",["^S",["^=C","^=M"]],"^9",1462,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^9S",[["^ ","^<W",["^>2"]],"^DW","^2W","^<["]],"^=I","^=U"]]]]]],"~$fn-style->caller",["^ ","^T","^3M","^6","zprint/zprint.cljc","^7",2830,"^8",1,"^9",2830,"^:",22,"^5",["^ ","^6","zprint/zprint.cljc","^7",2830,"^8",6,"^9",2830,"^:",22],"^<Q","^=E"],"~$fzprint-vec",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3703,"^8",7,"^9",3703,"^:",18,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]]],"^T","^5?","^6","zprint/zprint.cljc","^:",18,"^=3",["^2T",[["^<[","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3703,"^=8",["^S",["^=C","^=M"]],"^9",3703,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]]],"~$at-newline?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2214,"^8",7,"^9",2214,"^:",18,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Is this a newline or equivalent?  Comments and newlines are both\n  newlines for the purposed of this routine."],"^T","^4B","^6","zprint/zprint.cljc","^:",18,"^=3",["^2T",[["^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2214,"^=8","^=9","^9",2214,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Is this a newline or equivalent?  Comments and newlines are both\n  newlines for the purposed of this routine."],"~$indent-zmap",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2412,"^8",7,"^9",2412,"^:",18,"^<U",["^2T",["^<V",["^2T",[["^=G",["^9S",["^<W",["^=A","^@Z"],["^ ","^<W",["^B>"]],"^=G","^2W","^<["]],"^=I","~$actual-ind","^B?","^?E","^@X"],["^=G","^<[","^=I","^E1","^B?","^?E"]]]]],"^=2","Implement :indent-only?.  This routine is the central one through\n  which all :indent-only? processing flows, and replaces all of the\n  detailed logic in fzprint-list*, fzprint-vec*, and fzprint-map*.\n  This is called directly by fzprint-vec*, which handles both vectors\n  and sets, and through fzprint-indent by fzprint-list* and\n  fzprint-map*.  Thus, all of the data structures get their\n  :indent-only? processing handled by ident-zmap.  coll-print is\n  the output from fzprint-seq, which is a style-vec in the making\n  without spacing, but with extra [] around the elements.  Everything\n  is based off of ind, and we know nothing to the left of that.\n  ind must be the left end of everything, not the right of l-str!\n  The actual-ind is to the right of l-str.  When we get a newline,\n  replace any spaces after it with our own, and that would be to\n  bring it to ind + indent.  ","^=P",["^ ","^=7",false,"^=Q",7,"^=:",7,"^=3",[["^=G",["^9S",["^<W",["^=A","^@Z"],["^ ","^<W",["^B>"]],"^=G","^2W","^<["]],"^=I","^E1","^B?","^?E","^@X"],["^=G","^<[","^=I","^E1","^B?","^?E"]],"^<U",["^2T",[["^=G",["^9S",["^<W",["^=A","^@Z"],["^ ","^<W",["^B>"]],"^=G","^2W","^<["]],"^=I","^E1","^B?","^?E","^@X"],["^=G","^<[","^=I","^E1","^B?","^?E"]]],"^=6",["^2T",[null,null]]]],"^T","^3R","^6","zprint/zprint.cljc","^:",18,"^=P",["^ ","^=7",false,"^=Q",7,"^=:",7,"^=3",[["^=G",["^9S",["^<W",["^=A","^@Z"],["^ ","^<W",["^B>"]],"^=G","^2W","^<["]],"^=I","^E1","^B?","^?E","^@X"],["^=G","^<[","^=I","^E1","^B?","^?E"]],"^<U",["^2T",[["^=G",["^9S",["^<W",["^=A","^@Z"],["^ ","^<W",["^B>"]],"^=G","^2W","^<["]],"^=I","^E1","^B?","^?E","^@X"],["^=G","^<[","^=I","^E1","^B?","^?E"]]],"^=6",["^2T",[null,null]]],"^=3",[["^=G",["^9S",["^<W",["^=A","^@Z"],["^ ","^<W",["^B>"]],"^=G","^2W","^<["]],"^=I","^E1","^B?","^?E","^@X"],["^=G","^<[","^=I","^E1","^B?","^?E"]],"^=5",null,"^=Q",7,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^=R",[["^ ","^=Q",7,"^=7",false,"^<Q",["^S",["^=C","^=?","^=M"]]],["^ ","^=Q",6,"^=7",false,"^<Q",["^S",["^=C","^=?","^=M"]]]],"^7",2412,"^9",2412,"^=:",7,"^=;",true,"^<U",["^2T",[["^=G",["^9S",["^<W",["^=A","^@Z"],["^ ","^<W",["^B>"]],"^=G","^2W","^<["]],"^=I","^E1","^B?","^?E","^@X"],["^=G","^<[","^=I","^E1","^B?","^?E"]]],"^=2","Implement :indent-only?.  This routine is the central one through\n  which all :indent-only? processing flows, and replaces all of the\n  detailed logic in fzprint-list*, fzprint-vec*, and fzprint-map*.\n  This is called directly by fzprint-vec*, which handles both vectors\n  and sets, and through fzprint-indent by fzprint-list* and\n  fzprint-map*.  Thus, all of the data structures get their\n  :indent-only? processing handled by ident-zmap.  coll-print is\n  the output from fzprint-seq, which is a style-vec in the making\n  without spacing, but with extra [] around the elements.  Everything\n  is based off of ind, and we know nothing to the left of that.\n  ind must be the left end of everything, not the right of l-str!\n  The actual-ind is to the right of l-str.  When we get a newline,\n  replace any spaces after it with our own, and that would be to\n  bring it to ind + indent.  "],"~$style-loc-vec",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4742,"^8",7,"^9",4742,"^:",20,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","Take a style-vec and produce a style-loc-vec with the starting column\n  of each element in the style-vec."],"^T","^3Q","^6","zprint/zprint.cljc","^:",20,"^=3",["^2T",[["^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4742,"^=8","^?S","^9",4742,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","Take a style-vec and produce a style-loc-vec with the starting column\n  of each element in the style-vec."],"~$remove-key-seq",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1199,"^8",7,"^9",1199,"^:",21,"^<U",["^2T",["^<V",["^2T",[["~$m","~$ks"]]]]],"^=2","If given a non-collection, simply does a dissoc of the key, but\n  if given a sequence of keys, will remove the final one."],"^T","^4K","^6","zprint/zprint.cljc","^:",21,"^=3",["^2T",[["~$m","^E4"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1199,"^=8",["^S",["^=C","^=S","^=M"]],"^9",1199,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$m","^E4"]]]]],"^=2","If given a non-collection, simply does a dissoc of the key, but\n  if given a sequence of keys, will remove the final one."],"~$hangflow",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",657,"^8",7,"^9",657,"^:",15,"^<U",["^2T",["^<V",["^2T",[["~$hangflow?","~$hang-or-flow","^=>"]]]]],"^=2","Take a style-vec, and if hangflow? is true, return a\n  vector [hang-or-flow style-vec], else return style-vec.\n  But a nil style-vec returns nil."],"^T","^42","^6","zprint/zprint.cljc","^:",15,"^=3",["^2T",[["^E6","^E7","^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",657,"^=8",["^S",[null,"^=?","^=M"]],"^9",657,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^E6","^E7","^=>"]]]]],"^=2","Take a style-vec, and if hangflow? is true, return a\n  vector [hang-or-flow style-vec], else return style-vec.\n  But a nil style-vec returns nil."],"~$fzprint-record",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4262,"^8",7,"^9",4262,"^:",21,"^<U",["^2T",["^<V",["^2T",[[["^9S",[["^ ","^<W",["~$record-type?","~$to-string?"]],"^AA","^2W","^<["]],"^=I","^=U"]]]]]],"^T","^4:","^6","zprint/zprint.cljc","^:",21,"^=3",["^2T",[["~$p__51978","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4262,"^=8",["^S",["^=C","^=S","^=M"]],"^9",4262,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^9S",[["^ ","^<W",["^E9","^E:"]],"^AA","^2W","^<["]],"^=I","^=U"]]]]]],"~$first-actual",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2327,"^8",7,"^9",2327,"^:",19,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Return the first actual element, ignoring comments and whitespace\n  and everything else but real elements."],"^T","^46","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2327,"^=8",["^S",[null,"^=S","^=M"]],"^9",2327,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Return the first actual element, ignoring comments and whitespace\n  and everything else but real elements."],"~$modify-zloc",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2851,"^8",7,"^9",2851,"^:",18,"^<U",["^2T",["^<V",["^2T",[["^=G","^<[","^=U"]]]]],"^=2","If the (caller options) has a value for :return-altered-zipper, then\n  examine the value.  It should be [<depth> <symbol> <fn>]. \n  If the <depth> is nil, any depth will do. If the\n  <symbol> is nil, any symbol will do.  If the <depth> and <symbol>\n  match, then the <fn> is called as (fn caller options zloc), and must\n  return a new zloc."],"^T","^4[","^6","zprint/zprint.cljc","^:",18,"^=3",["^2T",[["^=G","^<[","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2851,"^=8",["^S",[null,"^=S"]],"^9",2851,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G","^<[","^=U"]]]]],"^=2","If the (caller options) has a value for :return-altered-zipper, then\n  examine the value.  It should be [<depth> <symbol> <fn>]. \n  If the <depth> is nil, any depth will do. If the\n  <symbol> is nil, any symbol will do.  If the <depth> and <symbol>\n  match, then the <fn> is called as (fn caller options zloc), and must\n  return a new zloc."],"~$fzprint-one-line",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1587,"^8",7,"^9",1587,"^:",23,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^>6"]]]]],"^=2","Do a fzprint-seq like thing, but do it incrementally and\n  if it gets too big, return nil."],"^T","^50","^6","zprint/zprint.cljc","^:",23,"^=3",["^2T",[["^<[","^=I","^>6"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1587,"^=8",["^S",["^=C","^=M"]],"^9",1587,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^>6"]]]]],"^=2","Do a fzprint-seq like thing, but do it incrementally and\n  if it gets too big, return nil."],"~$fzfit",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",563,"^8",7,"^9",563,"^:",12,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["^=A","^@Z","^=W"],"^2W","^<["],["^>Q","^DU","^2W","^>N"]]]]]],"^=2","Given output from style-lines and options, see if it fits the width.  \n  Return the number of lines it takes if it fits, nil otherwise."],"^T","^3H","^6","zprint/zprint.cljc","^:",12,"^=3",["^2T",[["~$p__51441","~$p__51442"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",563,"^=8",["^S",[null,"^=S","^=M"]],"^9",563,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["^=A","^@Z","^=W"],"^2W","^<["],["^>Q","^DU","^2W","^>N"]]]]]],"^=2","Given output from style-lines and options, see if it fits the width.  \n  Return the number of lines it takes if it fits, nil otherwise."],"~$fzprint-meta",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4299,"^8",7,"^9",4299,"^:",19,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Print the two items in a meta node.  Different because it doesn't print\n  a single collection, so it doesn't do any indent or rightmost.  It also\n  uses a different approach to calling fzprint-flow-seq with the\n  results zmap, so that it prints all of the seq, not just the rightmost."],"^T","^45","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["^<[","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4299,"^=8",["^S",["^=C","^=M"]],"^9",4299,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Print the two items in a meta node.  Different because it doesn't print\n  a single collection, so it doesn't do any indent or rightmost.  It also\n  uses a different approach to calling fzprint-flow-seq with the\n  results zmap, so that it prints all of the seq, not just the rightmost."],"~$flow-indent",["^ ","^T","^4;","^6","zprint/zprint.cljc","^7",2602,"^8",1,"^9",2602,"^:",17,"^5",["^ ","^6","zprint/zprint.cljc","^7",2602,"^8",6,"^9",2602,"^:",17],"^<Q","^<R"],"~$count-newline-types",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3805,"^8",7,"^9",3805,"^:",26,"^<U",["^2T",["^<V",["^2T",[["~$newline-style-vec"]]]]],"^=2","Analyze a style-vec which contains only newlines, the count of newlines\n  in the style vec.  We assume that each :newline style-vec contains one\n  newline (i.e., it was generated by fzprint-newlines)."],"^T","^3C","^6","zprint/zprint.cljc","^:",26,"^=3",["^2T",[["^EE"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3805,"^=8","^=L","^9",3805,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^EE"]]]]],"^=2","Analyze a style-vec which contains only newlines, the count of newlines\n  in the style vec.  We assume that each :newline style-vec contains one\n  newline (i.e., it was generated by fzprint-newlines)."],"~$find-consecutive-inline-comments",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4939,"^8",7,"^9",4939,"^:",39,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","Given a style-vec, find consecutive inline comments and output\n  the as a sequence of vectors of comments.  Each comment itself\n  is a vector: [indent-index inline-comment-index], yielding a\n  [[[indent-index inline-comment-index] [indent-index inline-comment-index]\n  ...] ...]"],"^T","^3D","^6","zprint/zprint.cljc","^:",39,"^=3",["^2T",[["^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4939,"^=8","^=S","^9",4939,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","Given a style-vec, find consecutive inline comments and output\n  the as a sequence of vectors of comments.  Each comment itself\n  is a vector: [indent-index inline-comment-index], yielding a\n  [[[indent-index inline-comment-index] [indent-index inline-comment-index]\n  ...] ...]"],"~$fzprint-dbg",["^ ","^T","^3E","^6","zprint/zprint.cljc","^7",96,"^8",1,"^9",96,"^:",17,"^5",["^ ","^6","zprint/zprint.cljc","^7",96,"^8",6,"^9",96,"^:",17],"^<Q","~$cljs.core/Atom"],"~$any-zcoll?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3449,"^8",7,"^9",3449,"^:",17,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Return true if there are any collections in the collection."],"^T","^5>","^6","zprint/zprint.cljc","^:",17,"^=3",["^2T",[["^<[","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3449,"^=8",["^S",[null,"^=S"]],"^9",3449,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Return true if there are any collections in the collection."],"~$ensure-end-w-nl",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1870,"^8",7,"^9",1870,"^:",22,"^<U",["^2T",["^<V",["^2T",[["^=I","^=>"]]]]],"^=2","Given a style-vec, ensure it ends with a newline.  If it doesn't,\n  then put one in."],"^T","^5<","^6","zprint/zprint.cljc","^:",22,"^=3",["^2T",[["^=I","^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1870,"^=8",["^S",[null,"^=C","^=M"]],"^9",1870,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=I","^=>"]]]]],"^=2","Given a style-vec, ensure it ends with a newline.  If it doesn't,\n  then put one in."],"~$fzprint-newline",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4400,"^8",7,"^9",4400,"^:",22,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Given an element which contains newlines, split it up into individual\n  newline elements."],"^T","^5:","^6","zprint/zprint.cljc","^:",22,"^=3",["^2T",[["^<[","^=I","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4400,"^=8",["^S",[null,"^=C","^=S"]],"^9",4400,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=U"]]]]],"^=2","Given an element which contains newlines, split it up into individual\n  newline elements."],"~$contains-nil?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",273,"^8",7,"^9",273,"^:",20,"^<U",["^2T",["^<V",["^2T",[["^=J"]]]]],"^=2","Scan a collection, and return the number of nils or empty collections\n  present (if any), and nil otherwise."],"^T","^65","^6","zprint/zprint.cljc","^:",20,"^=3",["^2T",[["^=J"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",273,"^=8",["^S",["^=L","^=M"]],"^9",273,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=J"]]]]],"^=2","Scan a collection, and return the number of nils or empty collections\n  present (if any), and nil otherwise."],"~$fzprint-align-inline-comments",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",5075,"^8",7,"^9",5075,"^:",36,"^<U",["^2T",["^<V",["^2T",[["^<[","^=>"]]]]],"^=2","Given the current style-vec, align all consecutive inline comments."],"^T","^6;","^6","zprint/zprint.cljc","^:",36,"^=3",["^2T",[["^<[","^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",5075,"^=8",["^S",[null,"^=S"]],"^9",5075,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=>"]]]]],"^=2","Given the current style-vec, align all consecutive inline comments."],"~$align-comment-vec",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",5066,"^8",7,"^9",5066,"^:",24,"^<U",["^2T",["^<V",["^2T",[["^=>","^@U"]]]]],"^=2","Given one set of inline comments: \n  [[inline-comment-index start-column spaces-before]\n   [inline-comment-index start-column spaces-before] ...], align them \n   as best as possible, and return the modified style-vec."],"^T","^5E","^6","zprint/zprint.cljc","^:",24,"^=3",["^2T",[["^=>","^@U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",5066,"^=8",["^S",[null,"^=S"]],"^9",5066,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=>","^@U"]]]]],"^=2","Given one set of inline comments: \n  [[inline-comment-index start-column spaces-before]\n   [inline-comment-index start-column spaces-before] ...], align them \n   as best as possible, and return the modified style-vec."],"~$showfn?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",114,"^8",7,"^9",114,"^:",14,"^<U",["^2T",["^<V",["^2T",[["^DK","~$f"]]]]],"^=2","Show this thing as a function?"],"^T","^4Q","^6","zprint/zprint.cljc","^:",14,"^=3",["^2T",[["^DK","~$f"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",114,"^=8",["^S",[null,"^=S","^=M"]],"^9",114,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^DK","~$f"]]]]],"^=2","Show this thing as a function?"],"~$map->r",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^:",13,"^8",12,"^A@",true,"~:factory","~:map","^7",5167,"^9",5167,"^<U",["^2T",["^<V",["^2T",[["~$G__52077"]]]]],"^=2","Factory function for zprint.zprint/r, taking a map of keywords to field values."],"^T","^5D","^6","zprint/zprint.cljc","^:",13,"^=3",["^2T",[["^ES"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^A@",true,"^=7",false,"^EQ","^ER","^7",5167,"^=8","^9P","^9",5167,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^ES"]]]]],"^=2","Factory function for zprint.zprint/r, taking a map of keywords to field values."],"~$generate-ll",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",389,"^8",7,"^9",389,"^:",18,"^<U",["^2T",["^<V",["^2T",[["^CH",["^?Q","^CI","^CJ","^CK","^2W","^CL"],["~$s","~$_","^CM","^2W","^AQ"]]]]]]],"^T","^6=","^6","zprint/zprint.cljc","^:",18,"^=3",["^2T",[["^CH","~$p__51409","~$p__51410"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",389,"^=8","^=?","^9",389,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^CH",["^?Q","^CI","^CJ","^CK","^2W","^CL"],["~$s","~$_","^CM","^2W","^AQ"]]]]]]],"~$->r",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^:",13,"^8",12,"^A@",true,"^EQ","~:positional","^7",5167,"^9",5167,"^<U",["^2T",["^<V",["^2T",[["~$left","~$right"]]]]],"^=2","Positional factory function for zprint.zprint/r."],"^T","^66","^6","zprint/zprint.cljc","^:",13,"^=3",["^2T",[["^EY","^EZ"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^A@",true,"^=7",false,"^EQ","^EX","^7",5167,"^=8","^9P","^9",5167,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^EY","^EZ"]]]]],"^=2","Positional factory function for zprint.zprint/r."],"~$ignore-key-seq",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1225,"^8",7,"^9",1225,"^:",21,"^<U",["^2T",["^<V",["^2T",[["~$m","^E4"]]]]],"^=2","Given a map and a key sequence, remove that key sequence if\n  it appears in the map leaving behind a key :zprint-ignored, \n  and terminate the reduce if it changes the map."],"^T","^5C","^6","zprint/zprint.cljc","^:",21,"^=3",["^2T",[["~$m","^E4"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1225,"^=8",["^S",[null,"^=C","^=S"]],"^9",1225,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$m","^E4"]]]]],"^=2","Given a map and a key sequence, remove that key sequence if\n  it appears in the map leaving behind a key :zprint-ignored, \n  and terminate the reduce if it changes the map."],"~$fzprint",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",5092,"^8",7,"^9",5092,"^:",14,"^<U",["^2T",["^<V",["^2T",[["^<[","^?E","^=U"]]]]],"^=2","The pretty print part of fzprint."],"^T","^5K","^6","zprint/zprint.cljc","^:",14,"^=3",["^2T",[["^<[","^?E","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",5092,"^=8",["^S",[null,"^=C","^=?","^=S","^=M"]],"^9",5092,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^?E","^=U"]]]]],"^=2","The pretty print part of fzprint."],"~$internal-validate",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3546,"^8",7,"^9",3546,"^:",24,"^<U",["^2T",["^<V",["^2T",[["^<[","~$error-str"]]]]],"^=2","Validate an options map that was returned from some internal configuration\n  expression or configuration.  Either returns the options map or throws\n  an error."],"^T","^5L","^6","zprint/zprint.cljc","^:",24,"^=3",["^2T",[["^<[","^F2"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3546,"^9",3546,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^F2"]]]]],"^=2","Validate an options map that was returned from some internal configuration\n  expression or configuration.  Either returns the options map or throws\n  an error."],"~$line-lengths-iter",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",407,"^8",7,"^9",407,"^:",24,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=>"]]]]],"^=2","Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments elsewhere.\n  Note that only vectors with :whitespace, :indent, or :newline are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character. A single comment is counted as two lines. Lots of edge\n  conditions that are really quite important."],"^T","^41","^6","zprint/zprint.cljc","^:",24,"^=3",["^2T",[["^<[","^=I","^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",407,"^=8",["^S",["^=C","^=?"]],"^9",407,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^=I","^=>"]]]]],"^=2","Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments elsewhere.\n  Note that only vectors with :whitespace, :indent, or :newline are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character. A single comment is counted as two lines. Lots of edge\n  conditions that are really quite important."],"~$left-or-up",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2269,"^8",7,"^9",2269,"^:",17,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Take a zloc and move left if possible, or move up if necessary.\n  Return a vector with [up-size new-zloc]"],"^T","^3X","^6","zprint/zprint.cljc","^:",17,"^=3",["^2T",[["^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2269,"^=8","^=?","^9",2269,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","Take a zloc and move left if possible, or move up if necessary.\n  Return a vector with [up-size new-zloc]"],"~$count-constant-pairs",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1789,"^8",7,"^9",1789,"^:",27,"^<U",["^2T",["^<V",["^2T",[["^?I"]]]]],"^=2","Given a seq of zlocs, work backwards from the end, and see how\n  many elements are pairs of constants (using zconstant?).  So that\n  (... :a (stuff) :b (bother)) returns 4, since both :a and :b are\n  zconstant? true. This is made more difficult by having to skip\n  comments along the way as part of the pair check, but keep track\n  of the ones we skip so the count is right in the end.  We don't\n  expect any whitespace in this, because this seq should have been\n  produced by zmap-right or its equivalent, which already skips the\n  whitespace."],"^T","^3Y","^6","zprint/zprint.cljc","^:",27,"^=3",["^2T",[["^?I"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1789,"^=8","^=L","^9",1789,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^?I"]]]]],"^=2","Given a seq of zlocs, work backwards from the end, and see how\n  many elements are pairs of constants (using zconstant?).  So that\n  (... :a (stuff) :b (bother)) returns 4, since both :a and :b are\n  zconstant? true. This is made more difficult by having to skip\n  comments along the way as part of the pair check, but keep track\n  of the ones we skip so the count is right in the end.  We don't\n  expect any whitespace in this, because this seq should have been\n  produced by zmap-right or its equivalent, which already skips the\n  whitespace."],"~$force-vector",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",320,"^8",7,"^9",320,"^:",19,"^<U",["^2T",["^<V",["^2T",[["^=J"]]]]],"^=2","Ensure that whatever we have is a vector."],"^T","^55","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["^=J"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",320,"^=8",["^S",[null,"^=C","^=S"]],"^9",320,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=J"]]]]],"^=2","Ensure that whatever we have is a vector."],"~$compare-ordered-keys",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1142,"^8",7,"^9",1142,"^:",27,"^<U",["^2T",["^<V",["^2T",[["^?O","^1U","~$x","~$y"]]]]],"^=2","Do a key comparison that places ordered keys first."],"^T","^4Y","^6","zprint/zprint.cljc","^:",27,"^=3",["^2T",[["^?O","^1U","~$x","~$y"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1142,"^=8","^=L","^9",1142,"^=:",4,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^?O","^1U","~$x","~$y"]]]]],"^=2","Do a key comparison that places ordered keys first."],"~$inlinecomment?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4621,"^8",7,"^9",4621,"^:",21,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","If this is an inline comment, returns a vector with the amount\n  of space that was between this and the previous element and the\n  starting column of this inline comment.  That means that if we\n  go left, we get something other than whitespace before a newline.\n  If we get only whitespace before a newline, then this is considered\n  an inline comment if the comment at the end of the previous line\n  was an inline comment and we were aligned with that comment.\n  Assumes zloc is a comment."],"^T","^44","^6","zprint/zprint.cljc","^:",21,"^=3",["^2T",[["^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4621,"^=8",["^S",["^=?","^=M"]],"^9",4621,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","If this is an inline comment, returns a vector with the amount\n  of space that was between this and the previous element and the\n  starting column of this inline comment.  That means that if we\n  go left, we get something other than whitespace before a newline.\n  If we get only whitespace before a newline, then this is considered\n  an inline comment if the comment at the end of the previous line\n  was an inline comment and we were aligned with that comment.\n  Assumes zloc is a comment."],"~$show-user-fn?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",135,"^8",7,"^9",135,"^:",20,"^<U",["^2T",["^<V",["^2T",[["^<[","~$f"]]]]],"^=2","Show this thing as a user defined function?  Assumes that we\n  have already handled any clojure defined functions!"],"^T","^64","^6","zprint/zprint.cljc","^:",20,"^=3",["^2T",[["^<[","~$f"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",135,"^=8",["^S",[null,"^=S","^=M"]],"^9",135,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","~$f"]]]]],"^=2","Show this thing as a user defined function?  Assumes that we\n  have already handled any clojure defined functions!"],"~$concat-no-nil",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",305,"^8",7,"^9",305,"^:",20,"^<U",["^2T",["^<V",["^2T",[["~$&","^><"]]]]],"^=2","Concatentate multiple sequences, but if any of them are nil or empty\n  collections, return nil. If any of them are :noseq, just skip them.","^=P",["^ ","^=7",true,"^=Q",0,"^=:",0,"^=3",[["^2T",["^><"]]],"^<U",["^2T",[["~$&","^><"]]],"^=6",["^2T",[null]]]],"^T","^6P","^6","zprint/zprint.cljc","^:",20,"^=P",["^ ","^=7",true,"^=Q",0,"^=:",0,"^=3",[["^2T",["^><"]]],"^<U",["^2T",[["~$&","^><"]]],"^=6",["^2T",[null]]],"^=3",[["^2T",["^><"]]],"^=5",null,"^=Q",0,"^=6",["^2T",[null]],"^8",1,"^=7",true,"^=R",[["^ ","^=Q",0,"^=7",true,"^<Q",["^S",["^=C","^=M"]]]],"^7",305,"^=8","^=S","^9",305,"^=:",0,"^=;",true,"^<U",["^2T",[["~$&","^><"]]],"^=2","Concatentate multiple sequences, but if any of them are nil or empty\n  collections, return nil. If any of them are :noseq, just skip them."],"~$prefix-options",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4421,"^8",7,"^9",4421,"^:",21,"^<U",["^2T",["^<V",["^2T",[["^<[","~$prefix-tag"]]]]],"^=2","Change options as necessary based on prefix tag."],"^T","^60","^6","zprint/zprint.cljc","^:",21,"^=3",["^2T",[["^<[","^F<"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4421,"^=8",["^S",[null,"^=C","^=S"]],"^9",4421,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^<[","^F<"]]]]],"^=2","Change options as necessary based on prefix tag."],"~$indent-shift",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2367,"^8",7,"^9",2367,"^:",19,"^<U",["^2T",["^<V",["^2T",[["^=G","^<[","^=I","^E1","~$svec"]]]]],"^=2","Take a style-vec that was once output from indent-zmap, and fix\n  up all of the :indent elements in it by adding (- actual-ind ind)\n  to them.  If we find a multiple thing in here, call indent-shift\n  recursively with the ind and cur-ind that is approprite.  All of\n  the actual indents are correct already -- all we are doing is\n  setting up their base.  There is no attempt to determine if we\n  are exceeding any configured width."],"^T","^6R","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["^=G","^<[","^=I","^E1","^F>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2367,"^=8",["^S",["^=C","^=?"]],"^9",2367,"^=:",5,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G","^<[","^=I","^E1","^F>"]]]]],"^=2","Take a style-vec that was once output from indent-zmap, and fix\n  up all of the :indent elements in it by adding (- actual-ind ind)\n  to them.  If we find a multiple thing in here, call indent-shift\n  recursively with the ind and cur-ind that is approprite.  All of\n  the actual indents are correct already -- all we are doing is\n  setting up their base.  There is no attempt to determine if we\n  are exceeding any configured width."],"~$tag-l-size",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2245,"^8",7,"^9",2245,"^:",17,"^<U",["^2T",["^<V",["^2T",[["~$t"]]]]],"^=2","Given a tag into which you can go down from rewrite-clj, which must be\n  a collection of some kind, return the size the l-str.  All of the tag\n  values into which you can go down must be in this list for indent-before\n  to work correctly.  It uses these values when it steps up out of one of\n  these things to see how big the thing would have been if it showed up\n  as characters."],"^T","^6T","^6","zprint/zprint.cljc","^:",17,"^=3",["^2T",[["~$t"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2245,"^9",2245,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$t"]]]]],"^=2","Given a tag into which you can go down from rewrite-clj, which must be\n  a collection of some kind, return the size the l-str.  All of the tag\n  values into which you can go down must be in this list for indent-before\n  to work correctly.  It uses these values when it steps up out of one of\n  these things to see how big the thing would have been if it showed up\n  as characters."],"~$next-space",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4674,"^8",7,"^9",4674,"^:",17,"^<U",["^2T",["^<V",["^2T",[["~$s","^C<"]]]]],"^=2","Take a string and an index, and look for the next space *after* the\n  index. If no space is found, return nil. Accept any from-index, \n  including one larger than the length of the string."],"^T","^5Z","^6","zprint/zprint.cljc","^:",17,"^=3",["^2T",[["~$s","^C<"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4674,"^=8",["^S",["^=L","^=M"]],"^9",4674,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$s","^C<"]]]]],"^=2","Take a string and an index, and look for the next space *after* the\n  index. If no space is found, return nil. Accept any from-index, \n  including one larger than the length of the string."],"~$add-newline-to-comment",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2113,"^8",7,"^9",2113,"^:",29,"^<U",["^2T",["^<V",["^2T",[["^?E","~$fzprint*-return"]]]]],"^=2","Given [[[\";stuff\" :none :comment]]] or \n  [[[\";bother\" :none :comment-inline 1]]] add [\"\n\" :none :newline]\n  to the inside of it."],"^T","^6>","^6","zprint/zprint.cljc","^:",29,"^=3",["^2T",[["^?E","^FB"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2113,"^=8",["^S",[null,"^56"]],"^9",2113,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^?E","^FB"]]]]],"^=2","Given [[[\";stuff\" :none :comment]]] or \n  [[[\";bother\" :none :comment-inline 1]]] add [\"\n\" :none :newline]\n  to the inside of it."],"~$middle-element?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1187,"^8",7,"^9",1187,"^:",22,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["^?="],"^2W","^<["],"^=U"]]]]],"^=2","This checks to see if an element should be considered the middle element\n  of a pair.  At some point, we can expand this, but for now there is only\n  one middle element."],"^T","^72","^6","zprint/zprint.cljc","^:",22,"^=3",["^2T",[["~$p__51528","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1187,"^=8",["^S",["^=9","^=M"]],"^9",1187,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["^?="],"^2W","^<["],"^=U"]]]]],"^=2","This checks to see if an element should be considered the middle element\n  of a pair.  At some point, we can expand this, but for now there is only\n  one middle element."],"~$max-aligned-inline-comment-distance",["^ ","^T","^73","^6","zprint/zprint.cljc","^7",4845,"^8",1,"^9",4845,"^:",41,"^5",["^ ","^6","zprint/zprint.cljc","^7",4845,"^8",6,"^9",4845,"^:",41],"^<Q","^=L"],"~$space-before-comment",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4799,"^8",7,"^9",4799,"^:",27,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","Given a style-vec, whose last element in a comment, find the amount\n  of space before that comment on the line."],"^T","^6@","^6","zprint/zprint.cljc","^:",27,"^=3",["^2T",[["^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4799,"^=8","^=S","^9",4799,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=>"]]]]],"^=2","Given a style-vec, whose last element in a comment, find the amount\n  of space before that comment on the line."],"~$fzprint-get-zloc-seq",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2081,"^8",7,"^9",2081,"^:",27,"^<U",["^2T",["^<V",["^2T",[["^=G","^<[","^=U"]]]]],"^=2","Get the zloc seq, with or without newlines, as indicated by the options."],"^T","^67","^6","zprint/zprint.cljc","^:",27,"^=3",["^2T",[["^=G","^<[","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2081,"^=8","^=S","^9",2081,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=G","^<[","^=U"]]]]],"^=2","Get the zloc seq, with or without newlines, as indicated by the options."],"~$length-after-newline",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2236,"^8",7,"^9",2236,"^:",27,"^<U",["^2T",["^<V",["^2T",[["~$s"]]]]],"^=2","Given a string, return the number of characters to the right\n  of any newlines in the string.  Will return nil if no newlines\n  in the string."],"^T","^6Z","^6","zprint/zprint.cljc","^:",27,"^=3",["^2T",[["~$s"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2236,"^=8",["^S",["^=L","^=M"]],"^9",2236,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$s"]]]]],"^=2","Given a string, return the number of characters to the right\n  of any newlines in the string.  Will return nil if no newlines\n  in the string."],"~$get-zloc-seq-right",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2195,"^8",7,"^9",2195,"^:",25,"^<U",["^2T",["^<V",["^2T",[[["~$_","~$_","~$next-count","^>6","^2W","~$input-data"]]]]]],"^=2","Using return from fzprint-up-to-first-zloc or fzprint-up-to-next-zloc,\n  [pre-next-style-vec next-zloc next-count zloc-seq], return a zloc-seq\n  pointer to just beyond the specific zloc which was found by the\n  fzprint-up-to-first or fzprint-up-to-next call.  You don't give this\n  a number, you give it the data structure from the thing that you found."],"^T","^6<","^6","zprint/zprint.cljc","^:",25,"^=3",["^2T",[["~$p__51756"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",2195,"^=8","^?S","^9",2195,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["~$_","~$_","^FJ","^>6","^2W","^FK"]]]]]],"^=2","Using return from fzprint-up-to-first-zloc or fzprint-up-to-next-zloc,\n  [pre-next-style-vec next-zloc next-count zloc-seq], return a zloc-seq\n  pointer to just beyond the specific zloc which was found by the\n  fzprint-up-to-first or fzprint-up-to-next call.  You don't give this\n  a number, you give it the data structure from the thing that you found."],"~$fit-within?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1007,"^8",7,"^9",1007,"^:",18,"^<U",["^2T",["^<V",["^2T",[["~$size","^=J","^BZ"],["^FN","^=J"]]]]],"^=2","Take a size and a collection of vectors with two or more elements\n  per vector.  The elements are zlocs, the vectors are not.  Return\n  the remaining character count or nil if it for sure doesn't fit.\n  In order to be sure it doesn't fit, this version doesn't assume\n  *any* separators, so it really underestimates the size.","^=P",["^ ","^=7",false,"^=Q",3,"^=:",3,"^=3",[["^FN","^=J","^BZ"],["^FN","^=J"]],"^<U",["^2T",[["^FN","^=J","^BZ"],["^FN","^=J"]]],"^=6",["^2T",[null,null]]]],"^T","^5M","^6","zprint/zprint.cljc","^:",18,"^=P",["^ ","^=7",false,"^=Q",3,"^=:",3,"^=3",[["^FN","^=J","^BZ"],["^FN","^=J"]],"^<U",["^2T",[["^FN","^=J","^BZ"],["^FN","^=J"]]],"^=6",["^2T",[null,null]]],"^=3",[["^FN","^=J","^BZ"],["^FN","^=J"]],"^=5",null,"^=Q",3,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^=R",[["^ ","^=Q",3,"^=7",false,"^<Q",["^S",[null,"^=S"]]],["^ ","^=Q",2,"^=7",false,"^<Q",["^S",[null,"^=S"]]]],"^7",1007,"^9",1007,"^=:",3,"^=;",true,"^<U",["^2T",[["^FN","^=J","^BZ"],["^FN","^=J"]]],"^=2","Take a size and a collection of vectors with two or more elements\n  per vector.  The elements are zlocs, the vectors are not.  Return\n  the remaining character count or nil if it for sure doesn't fit.\n  In order to be sure it doesn't fit, this version doesn't assume\n  *any* separators, so it really underestimates the size."],"~$fzprint-pairs",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1529,"^8",7,"^9",1529,"^:",20,"^<U",["^2T",["^<V",["^2T",[[["^9S",[["^ ","^<W",["^>2"]],"~:pair","^2W","^<["]],"^=I","^>6"]]]]],"^=2","Always prints pairs on a different line from other pairs. Takes a zloc-seq"],"^T","^5H","^6","zprint/zprint.cljc","^:",20,"^=3",["^2T",[["~$p__51668","^=I","^>6"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1529,"^=8","^=S","^9",1529,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^9S",[["^ ","^<W",["^>2"]],"^FP","^2W","^<["]],"^=I","^>6"]]]]],"^=2","Always prints pairs on a different line from other pairs. Takes a zloc-seq"],"~$body-map",["^ ","^T","^4U","^6","zprint/zprint.cljc","^7",2803,"^8",1,"^9",2803,"^:",14,"^5",["^ ","^6","zprint/zprint.cljc","^7",2803,"^8",6,"^9",2803,"^:",14],"^<Q","^=E"],"~$fzprint-wrap-comments",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4768,"^8",7,"^9",4768,"^:",28,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["^=A"],"^2W","^<["],"^=>"]]]]],"^=2","Take the final output style-vec, and wrap any comments which run over\n  the width. Looking for "],"^T","^6B","^6","zprint/zprint.cljc","^:",28,"^=3",["^2T",[["~$p__52016","^=>"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4768,"^=8",["^S",[null,"^=S"]],"^9",4768,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["^=A"],"^2W","^<["],"^=>"]]]]],"^=2","Take the final output style-vec, and wrap any comments which run over\n  the width. Looking for "],"~$pair-element?",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1178,"^8",7,"^9",1178,"^:",20,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","This checks to see if an element should be considered part of a\n  pair if it comes between other elements, and a single element on\n  its own if it would otherwise be the first part of a pair.  Mostly\n  this will trigger on comments, but a #_(...) element will also\n  trigger this, as will a newline if one appears."],"^T","^4T","^6","zprint/zprint.cljc","^:",20,"^=3",["^2T",[["^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1178,"^=8","^=S","^9",1178,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^=U"]]]]],"^=2","This checks to see if an element should be considered part of a\n  pair if it comes between other elements, and a single element on\n  its own if it would otherwise be the first part of a pair.  Mostly\n  this will trigger on comments, but a #_(...) element will also\n  trigger this, as will a newline if one appears."],"~$make-record",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",5168,"^8",7,"^9",5168,"^:",18,"^<U",["^2T",["^<V",["^2T",[["~$l","~$r"]]]]]],"^T","^5W","^6","zprint/zprint.cljc","^:",18,"^=3",["^2T",[["~$l","~$r"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",5168,"^=8","~$r","^9",5168,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$l","~$r"]]]]]],"~$fzprint*",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",4461,"^8",7,"^9",4461,"^:",15,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["^=A","^@Z","^DK","~$hex?","~$shift-seq","^=W","^AV","^?X","^?:","~$string-str?","~$string-color","^BZ","~$max-depth","~$trim-comments?","^?=","~$max-hang-depth","~$max-hang-span","~$max-hang-count","~$next-inner"],"^2W","^<["],"^?E","^=U"]]]]],"^=2","The pretty print part of fzprint."],"^T","^5V","^6","zprint/zprint.cljc","^:",15,"^=3",["^2T",[["~$p__52001","^?E","^=U"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",4461,"^=8",["^S",[null,"^=C","^=?","^=S","^=M"]],"^9",4461,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[[["^ ","^<W",["^=A","^@Z","^DK","^FX","^FY","^=W","^AV","^?X","^?:","^FZ","^F[","^BZ","^G0","^G1","^?=","^G2","^G3","^G4","^G5"],"^2W","^<["],"^?E","^=U"]]]]],"^=2","The pretty print part of fzprint."],"~$split-lf",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",48,"^8",7,"^9",48,"^:",15,"^<U",["^2T",["^<V",["^2T",[["~$s"]]]]],"^=2","Do split for newlines, instead of using regular expressions."],"^T","^5U","^6","zprint/zprint.cljc","^:",15,"^=3",["^2T",[["~$s"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",48,"^=8",["^S",["^=C","^=?"]],"^9",48,"^=:",1,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$s"]]]]],"^=2","Do split for newlines, instead of using regular expressions."],"~$ignore-key-seq-silent",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1214,"^8",7,"^9",1214,"^:",28,"^<U",["^2T",["^<V",["^2T",[["~$m","^E4"]]]]],"^=2","Given a map and a key sequence, remove that key sequence if\n  it appears in the map, and terminate the reduce if it changes\n  the map."],"^T","^5Y","^6","zprint/zprint.cljc","^:",28,"^=3",["^2T",[["~$m","^E4"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1214,"^=8",["^S",[null,"^=C","^=S","^=M"]],"^9",1214,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$m","^E4"]]]]],"^=2","Given a map and a key sequence, remove that key sequence if\n  it appears in the map, and terminate the reduce if it changes\n  the map."],"~$compare-keys",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1135,"^8",7,"^9",1135,"^:",19,"^<U",["^2T",["^<V",["^2T",[["~$x","~$y"]]]]],"^=2","Do a key comparison that works well for numbers as well as\n  strings."],"^T","^58","^6","zprint/zprint.cljc","^:",19,"^=3",["^2T",[["~$x","~$y"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",1135,"^=8","^=L","^9",1135,"^=:",2,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["~$x","~$y"]]]]],"^=2","Do a key comparison that works well for numbers as well as\n  strings."],"~$interpose-nl-hf",["^ ","^<T",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3920,"^8",7,"^9",3920,"^:",22,"^<U",["^2T",["^<V",["^2T",[["^D1","^=I","^=J"]]]]],"^=2","Put a single or double line between pairs returned from\n  fzprint-map-two-up.  The second argument is the map resulting\n  from (:map options) or (:pair options) or whatever.  It should\n  have :nl-separator? and :nl-separator-flow? in it."],"^T","^53","^6","zprint/zprint.cljc","^:",22,"^=3",["^2T",[["^D1","^=I","^=J"]]],"^=5",null,"^=6",["^2T",[null,null]],"^8",1,"^=7",false,"^7",3920,"^=8","^=S","^9",3920,"^=:",3,"^=;",true,"^<U",["^2T",["^<V",["^2T",[["^D1","^=I","^=J"]]]]],"^=2","Put a single or double line between pairs returned from\n  fzprint-map-two-up.  The second argument is the map resulting\n  from (:map options) or (:pair options) or whatever.  It should\n  have :nl-separator? and :nl-separator-flow? in it."]],"^1:",["^ ","^M","^M","^11","^11"],"~:cljs.analyzer/constants",["^ ","^18",["^S",["~:in-code?","~:newline-first","~:comment-wrap","~:prefix-tags","~:flow?","~:sort-in-code?","~:nl-separator?","~:hang-size","~:nl-first","~:gt3-force-nl","~:dbg","~:indent-arg","~:arg2-extend","~:arg2-pair","~:key-depth-color","~:wrap-coll?","~:constant-pair?","~:indent","~:max-length","^BG","~:comma?","~:record-type?","~:fn","~:justify?","~:fn-force-nl","~:max-hang-depth","~:dbg-hang","~:arg1-body","~:input-hang","~:unquote-splicing","~:future","~:justify-tuning","~:zprint-not-found","~:arg2","~:max-depth-string","~:whitespace","~:element","~:user-fn-map","~:hash-paren","~:next-inner","~:pair-fn","^@L","~:else","~:force-nl","~:number","~:zipper","~:arg1-extend","^EY","~:unknown","~:promise","~:arg1-pair","~:hang-expand","~:brace","~:unquote","^FP","~:flow","~:noarg1","~:noarg1-body","^W","~:key-value-color","~:constant-pair-min","~:key-value","~:sexpr","~:in-hang?","~:comma","~:dbg-ge","~:value","~:user-fn","~:rightcnt","~:dbg-indent","~:force-nl?","~:width","~:gt2-force-nl","~:respect-nl?","~:uneval","~:key-ignore-silent","~:key-order","~:color-map","~:aligned","~:arg1-pair-body","~:key-ignore","~:agent","~:do-in-hang?","~:string","~:no-arg1?","~:vector","~:hex?","~:array","~:empty","~:inline-align-style","~:object?","~:force-nl-body","~:map-depth","~:arg2-fn","~:hang-avoid","~:dbg-cnt?","~:hang-diff","~:paren","~:dbg-print?","~:option-fn","~:zprint-ignored","^?6","~:count?","~:lift-ns-in-code?","~:fn-gt2-force-nl","~:spec","~:syntax-quote","^DW","~:inline?","~:modifiers","~:hang-type-flow","~:arg1-force-nl","~:wrap?","~:hang-adjust","~:dbg-local?","~:hang","~:dbg?","~:justify-hang","~:list","~:var","~:quote","~:keyword","~:ztype","~:wrap-after-multi?","~:flow-body","~:hang-flow","~:binding?","~:key-color","~:string-color","~:syntax-quote-paren","~:trim-comments?","~:general-hang-adjust","~:nil","~:max-hang-span","~:deref","~:bracket","^AA","~:comment","~:none-hang","~:comment-inline","~:none-hang-one","~:fn-style","~:lift-ns?","~:to-string?","~:right","~:fn-gt3-force-nl","~:one-line?","~:nl-separator-flow?","~:option-fn-first","~:string-str?","~:depth","~:hang-if-equal-flow?","~:fn-format","~:noseq","~:arg1-mixin","~:on","~:max-depth","~:first-indent-only?","~:arg1->","~:vector-fn","~:set","~:dbg-bug?","~:fn-map","~:none-two-up","~:hang?","~:indent-only?","~:pdepth","~:none-body","~:hang-flow-limit","~:shift-seq","^@P","~:hash-brace","~:newline","~:return-altered-zipper","~$...","~:rightmost-pair","~:consecutive","~:max-hang-count","~:parallel?","~:sort?","~:delay","^ER","~:object","^EZ","~:arg1","~:none","~:reader-cond","~:indent-only-style","~:rightmost","~:left"]],"~:order~:ns-specs",["^ "],"~:ns-spec-vars",["^S",[]],"~:compiler-options",["^9S",[["^KB","~:static-fns"],true,["^KB","~:shadow-tweaks"],null,["^KB","~:source-map-inline"],null,["^KB","~:elide-asserts"],false,["^KB","~:optimize-constants"],null,["^KB","^33"],null,["^KB","~:external-config"],null,["^KB","~:tooling-config"],null,["^KB","~:emit-constants"],null,["^KB","~:load-tests"],null,["^KB","~:form-size-threshold"],null,["^KB","~:infer-externs"],true,["^KB","^35"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^KB","~:fn-invoke-direct"],null,["^KB","~:source-map"],"/dev/null"]]]