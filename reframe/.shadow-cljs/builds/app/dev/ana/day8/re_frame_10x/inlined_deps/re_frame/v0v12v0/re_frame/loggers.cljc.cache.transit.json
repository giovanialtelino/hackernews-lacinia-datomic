["^ ","~:output",["^ ","~:js","goog.provide('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers');\ngoog.require('cljs.core');\ngoog.require('clojure.set');\n/**\n * Holds the current set of logging functions.\n * By default, re-frame uses the functions provided by js/console.\n * Use `set-loggers!` to change these defaults\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.loggers = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),console.log.bind(console),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),console.warn.bind(console),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),console.error.bind(console),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),console.debug.bind(console),new cljs.core.Keyword(null,\"group\",\"group\",582596132),(cljs.core.truth_(console.group)?console.group.bind(console):console.log.bind(console)),new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382),(cljs.core.truth_(console.groupEnd)?console.groupEnd.bind(console):(function (){\nreturn cljs.core.List.EMPTY;\n}))], null));\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$loggers$console(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___47748 = arguments.length;\nvar i__4737__auto___47749 = (0);\nwhile(true){\nif((i__4737__auto___47749 < len__4736__auto___47748)){\nargs__4742__auto__.push((arguments[i__4737__auto___47749]));\n\nvar G__47750 = (i__4737__auto___47749 + (1));\ni__4737__auto___47749 = G__47750;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic = (function (level,args){\nif(cljs.core.contains_QMARK_(cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.loggers),level)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"re-frame: log called with unknown level: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(level)].join(''),\"\\n\",\"(contains? (clojure.core/deref loggers) level)\"].join('')));\n}\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2((function (){var G__47745 = cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.loggers);\nreturn (level.cljs$core$IFn$_invoke$arity$1 ? level.cljs$core$IFn$_invoke$arity$1(G__47745) : level.call(null,G__47745));\n})(),args);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$lang$applyTo = (function (seq47739){\nvar G__47740 = cljs.core.first(seq47739);\nvar seq47739__$1 = cljs.core.next(seq47739);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__47740,seq47739__$1);\n}));\n\n/**\n * Change the set (or a subset) of logging functions used by re-frame.\n *   `new-loggers` should be a map with the same keys as `loggers` (above)\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.set_loggers_BANG_ = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$loggers$set_loggers_BANG_(new_loggers){\nif(cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(new_loggers)),cljs.core.set(cljs.core.keys(cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.loggers)))))){\n} else {\nthrow (new Error([\"Assert failed: \",\"Unknown keys in new-loggers\",\"\\n\",\"(empty? (difference (set (keys new-loggers)) (-> (clojure.core/deref loggers) keys set)))\"].join('')));\n}\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.loggers,cljs.core.merge,new_loggers);\n});\n/**\n * Get the current logging functions used by re-frame.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.get_loggers = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$loggers$get_loggers(){\nreturn cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.loggers);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",69],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^S","~$cljs.core","^T","~$goog","^U"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$difference","^S"],"~:require-macros",["^ ","^T","^T"],"~:form",["~#list",["~$ns","^N",["^10",["^W",["^S","~:refer",["^Y"]]]]]],"~:flags",["^ ","^W",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^U","^T","^S"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc"],"~:compiled-at",1598576886437,"~:resource-name","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc","~:warnings",[],"~:source","(ns day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers\n  (:require\n   [clojure.set :refer [difference]]\n   #?@(:clj [[clojure.string :as str]\n             [clojure.tools.logging :as log]])))\n\n#?(:clj (defn log [level & args]\n          (log/log level (if (= 1 (count args))\n                           (first args)\n                           (str/join \" \" args)))))\n\n\n;; XXX should loggers be put in the registrar ??\n(def ^:private loggers\n  \"Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  \"\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\n                  :warn      (js/console.warn.bind  js/console)\n                  :error     (js/console.error.bind js/console)\n                  :debug     (js/console.debug.bind js/console)\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\n                               (js/console.group.bind js/console)\n                               (js/console.log.bind   js/console))\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\n                               (js/console.groupEnd.bind js/console)\n                               #())})\n        ;; clojure versions\n        #?(:clj {:log      (partial log :info)\n                 :warn     (partial log :warn)\n                 :error    (partial log :error)\n                 :debug    (partial log :debug)\n                 :group    (partial log :info)\n                 :groupEnd  #()})))\n\n(defn console\n  [level & args]\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\n  (apply (level @loggers) args))\n\n\n(defn set-loggers!\n  \"Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)\"\n  [new-loggers]\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\n  (swap! loggers merge new-loggers))\n\n(defn get-loggers\n  \"Get the current logging functions used by re-frame.\"\n  []\n  @loggers)\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;AAaA;;;;;;AAAeA,AAKb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAA0B,AAACC,AAAsBC,AACvB,AAACC,AAAsBD,AACvB,AAACE,AAAsBF,AACvB,AAACG,AAAsBH,AACvB,AAAI,AAASA,AACX,AAACI,AAAsBJ,AACvB,AAACD,AAAsBC,AACzB,AAAA,AAAI,AAAYA,AACd,AAACK,AAAyBL;AAD5B,AAAA;;AAW7B,AAAA,AAAA,AAAAM,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACHM,AAAQC;AADX,AAEE,AAAQ,AAAA,AAAAE,AAACC,AAAWzB,AAAQqB;AAA5B;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAmC,AAAA,AAAiDF;;;AACpF,AAACK,AAAM,AAAAC,AAAA,AAAAH,AAAQxB;AAAR,AAAA,AAAA2B,AAAAA,AAACN,AAAAA,AAAAA;AAAgBC;;;AAH1B,AAAA,AAAA,AAAMP;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAMA;;;;AAAA,AAAMY,AAGHC;AAHH,AAIE,AAAS,AAACC,AAAO,AAACC,AAAW,AAACC,AAAI,AAACC,AAAKJ,AAAc,AAAA,AAAA,AAAAL,AAAKxB,AAAQiC,AAAKD;AAAxE;AAAA,AAAA,AAAA,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAACW,AAAMlC,AAAQmC,AAAMN;;AAEvB;;;AAAA,AAAMO;AAAN,AAAA,AAAAZ,AAGGxB","names",["day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers/loggers","cljs.core.atom","js/console.log.bind","js/console","js/console.warn.bind","js/console.error.bind","js/console.debug.bind","js/console.group.bind","js/console.groupEnd.bind","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers/console","seq47739","G__47740","cljs.core/first","cljs.core/next","self__4723__auto__","level","args","js/Error","cljs.core/deref","cljs.core/contains?","cljs.core.apply","G__47745","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers/set-loggers!","new-loggers","cljs.core/empty?","clojure.set.difference","cljs.core/set","cljs.core/keys","cljs.core.swap_BANG_","cljs.core/merge","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers/get-loggers"]],"~:used-vars",["^L",["~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers/set-loggers!","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers/get-loggers","~$cljs.core/keys","~$cljs.core/deref","~$js/console.group.bind","~$cljs.core/apply","~$cljs.core/atom","~$js/console","~$cljs.core/set","~$cljs.core/empty?","~$js/console.warn.bind","~$cljs.core/contains?","~$js/console.debug.bind","~$js/console.error.bind","~$cljs.core/swap!","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers/console","~$js/console.groupEnd.bind","~$clojure.set/difference","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers/loggers","~$js/console.log.bind","~$cljs.core/merge","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^17","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^U","~$goog.dom.HtmlElement"]]],["^17","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","~$goog.array","~$goog.asserts"]]],["^17","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U"]]],["^17","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^24","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^17","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^25","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^28"]]],["^17","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^25"]]],["^17","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U"]]],["^17","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U"]]],["^17","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U"]]],["^17","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U"]]],["^17","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^25"]]],"~:SHADOW-TIMESTAMP",[1598571556000,1598571556000,1598571537000],["^17","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^25","~$goog.reflect"]]],["^17","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^25","~$goog.html.trustedtypes","^2;","^2<","^2=","^2>"]]],["^17","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U"]]],["^17","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U"]]],["^17","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^24","^25","~$goog.html.SafeUrl","^2=","^2>","^28"]]],["^17","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^25","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^2B","^2:","~$goog.html.uncheckedconversions","^2=","^28"]]],["^17","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^17","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^24","^25","~$goog.dom.TagName","~$goog.dom.tags","^2F","^2G","~$goog.html.SafeStyleSheet","^2B","^2:","^2A","^2;","^2<","~$goog.labs.userAgent.browser","^27","^2=","^2>","^28"]]],["^17","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^27"]]],["^17","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^17","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^24","^25","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^17","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U"]]],["^17","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U"]]],["^17","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",[]]],["^17","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^24","^27"]]],["^17","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","~$goog.dom.safe","^2H","^2=","^28"]]],["^17","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U"]]],["^17","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^28"]]],["^17","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U"]]],["^17","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^24","^25","^2D","~$goog.math"]]],["^17","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^T","^S"]]],["^17","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^25","^2E","^2F","^2G","^2M","^2B","^2:","^2=","^28"]]],["^17","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U"]]],["^17","cljs/core.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","~$goog.math.Long","~$goog.math.Integer","^2Q","^27","^24","~$goog.Uri","~$goog.string.StringBuffer"]]],["^17","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^25","^2A","^2=","^2>"]]],["^17","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^24","^25","^2G","^27","^2=","^2>","^28"]]],["^17","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^2@"]]],["^17","clojure/set.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^T"]]],["^17","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^24","^25","^2Q"]]],["^17","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1[",["^ ","^20",null,"^21",["^L",[]],"^22",["^U","^25","^2>"]]]]],"~:clj-info",["^ ","jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/compiler.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64.clj",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map.clj",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/tagged_literals.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1596724258000,"jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/analyzer.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/core.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/util.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/externs.clj",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64_vlq.clj",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/binaryage/devtools/1.0.0/devtools-1.0.0.jar!/devtools/defaults.clj",1596725445000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/env.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/js_deps.cljc",1598571537000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc","^7",1,"^8",5,"^9",1,"^:",69],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","^T","^T","^U","^U"],"^V",["^L",["^W"]],"~:shadow/js-access-global",["^L",["Error"]],"^X",["^ ","^Y","^S"],"~:defs",["^ ","~$loggers",["^ ","^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc","^7",14,"^8",16,"^9",14,"^:",23,"~:private",true],"^3O",true,"^M","^1U","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc","^:",23,"^8",1,"^7",14,"^9",14,"~:tag","~$cljs.core/Atom","~:doc","Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  "],"~$console",["^ ","~:protocol-inline",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc","^7",37,"^8",7,"^9",37,"^:",14,"~:arglists",["^10",["~$quote",["^10",[["~$level","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^10",["^3W","^3X"]]],"^3U",["^10",[["^3W","~$&","^3X"]]],"~:arglists-meta",["^10",[null]]]],"^M","^1R","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc","^:",14,"^3Y",["^ ","^3Z",true,"^3[",1,"^40",1,"^41",[["^10",["^3W","^3X"]]],"^3U",["^10",[["^3W","~$&","^3X"]]],"^42",["^10",[null]]],"^41",[["^10",["^3W","^3X"]]],"~:protocol-impl",null,"^3[",1,"^42",["^10",[null]],"^8",1,"^3Z",true,"~:methods",[["^ ","^3[",1,"^3Z",true,"^3P","~$any"]],"^7",37,"~:ret-tag","^45","^9",37,"^40",1,"~:fn-var",true,"^3U",["^10",[["^3W","~$&","^3X"]]]],"~$set-loggers!",["^ ","^3T",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc","^7",43,"^8",7,"^9",43,"^:",19,"^3U",["^10",["^3V",["^10",[["~$new-loggers"]]]]],"^3R","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"^M","^1C","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc","^:",19,"^41",["^10",[["^49"]]],"^43",null,"^42",["^10",[null,null]],"^8",1,"^3Z",false,"^7",43,"^46",["^L",[null,"^45"]],"^9",43,"^40",1,"^47",true,"^3U",["^10",["^3V",["^10",[["^49"]]]]],"^3R","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"~$get-loggers",["^ ","^3T",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc","^7",50,"^8",7,"^9",50,"^:",18,"^3U",["^10",["^3V",["^10",[[]]]]],"^3R","Get the current logging functions used by re-frame."],"^M","^1D","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc","^:",18,"^41",["^10",[[]]],"^43",null,"^42",["^10",[null,null]],"^8",1,"^3Z",false,"^7",50,"^46","^45","^9",50,"^40",0,"^47",true,"^3U",["^10",["^3V",["^10",[[]]]]],"^3R","Get the current logging functions used by re-frame."]],"^Z",["^ ","^T","^T"],"~:cljs.analyzer/constants",["^ ","^V",["^L",["~:group","~:warn","~:debug","~:error","~:groupEnd","~:log"]],"~:order",["^4A","^4=","^4?","^4>","^4<","^4@"]],"^13",["^ ","^W",["^L",[]]],"^14",["^ "],"^15",["^U","^T","^S"]],"^P","^N","~:ns-specs",["^ "],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^1Z",[["^4E","~:static-fns"],true,["^4E","~:shadow-tweaks"],null,["^4E","~:source-map-inline"],null,["^4E","~:elide-asserts"],false,["^4E","~:optimize-constants"],null,["^4E","^1:"],null,["^4E","~:external-config"],null,["^4E","~:tooling-config"],null,["^4E","~:emit-constants"],null,["^4E","~:load-tests"],null,["^4E","~:form-size-threshold"],null,["^4E","~:infer-externs"],true,["^4E","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4E","~:fn-invoke-direct"],null,["^4E","~:source-map"],"/dev/null"]]]