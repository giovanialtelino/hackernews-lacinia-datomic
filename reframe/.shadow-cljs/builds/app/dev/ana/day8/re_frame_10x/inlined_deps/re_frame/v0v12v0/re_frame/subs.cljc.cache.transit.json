["^ ","~:output",["^ ","~:js","goog.provide('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs');\ngoog.require('cljs.core');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace');\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind = new cljs.core.Keyword(null,\"sub\",\"sub\",-2093760025);\nif(cljs.core.truth_((day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind) : day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.kinds.call(null,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind)))){\n} else {\nthrow (new Error(\"Assert failed: (registrar/kinds kind)\"));\n}\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.query__GT_reaction = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n/**\n * Causes all subscriptions to be removed from the cache.\n *   Does this by:\n *   1. running `on-dispose` on all cached subscriptions\n *   2. Each `on-dispose` will perform the removal of themselves.\n * \n *   This is for development time use. Useful when reloading Figwheel code\n *   after a React exception, because React components won't have been\n *   cleaned up properly. And this, in turn, means the subscriptions within those\n *   components won't have been cleaned up correctly. So this forces the issue.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.clear_subscription_cache_BANG_ = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$clear_subscription_cache_BANG_(){\nvar seq__48320_48452 = cljs.core.seq(cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.query__GT_reaction));\nvar chunk__48321_48453 = null;\nvar count__48322_48454 = (0);\nvar i__48323_48455 = (0);\nwhile(true){\nif((i__48323_48455 < count__48322_48454)){\nvar vec__48349_48456 = chunk__48321_48453.cljs$core$IIndexed$_nth$arity$2(null,i__48323_48455);\nvar k_48457 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48349_48456,(0),null);\nvar rxn_48458 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48349_48456,(1),null);\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.dispose_BANG_(rxn_48458);\n\n\nvar G__48459 = seq__48320_48452;\nvar G__48460 = chunk__48321_48453;\nvar G__48461 = count__48322_48454;\nvar G__48462 = (i__48323_48455 + (1));\nseq__48320_48452 = G__48459;\nchunk__48321_48453 = G__48460;\ncount__48322_48454 = G__48461;\ni__48323_48455 = G__48462;\ncontinue;\n} else {\nvar temp__5735__auto___48463 = cljs.core.seq(seq__48320_48452);\nif(temp__5735__auto___48463){\nvar seq__48320_48464__$1 = temp__5735__auto___48463;\nif(cljs.core.chunked_seq_QMARK_(seq__48320_48464__$1)){\nvar c__4556__auto___48465 = cljs.core.chunk_first(seq__48320_48464__$1);\nvar G__48466 = cljs.core.chunk_rest(seq__48320_48464__$1);\nvar G__48467 = c__4556__auto___48465;\nvar G__48468 = cljs.core.count(c__4556__auto___48465);\nvar G__48469 = (0);\nseq__48320_48452 = G__48466;\nchunk__48321_48453 = G__48467;\ncount__48322_48454 = G__48468;\ni__48323_48455 = G__48469;\ncontinue;\n} else {\nvar vec__48361_48470 = cljs.core.first(seq__48320_48464__$1);\nvar k_48471 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48361_48470,(0),null);\nvar rxn_48472 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48361_48470,(1),null);\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.dispose_BANG_(rxn_48472);\n\n\nvar G__48473 = cljs.core.next(seq__48320_48464__$1);\nvar G__48474 = null;\nvar G__48475 = (0);\nvar G__48476 = (0);\nseq__48320_48452 = G__48473;\nchunk__48321_48453 = G__48474;\ncount__48322_48454 = G__48475;\ni__48323_48455 = G__48476;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(cljs.core.not_empty(cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.query__GT_reaction)))){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Subscription cache should be empty after clearing it.\"], 0));\n} else {\nreturn null;\n}\n});\n/**\n * Unregisters all existing subscription handlers\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.clear_all_handlers_BANG_ = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$clear_all_handlers_BANG_(){\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind);\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.clear_subscription_cache_BANG_();\n});\n/**\n * cache the reaction r\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_and_return = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$cache_and_return(query_v,dynv,r){\nvar cache_key = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_v,dynv], null);\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.add_on_dispose_BANG_(r,(function (){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__48374 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__48375 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query_v),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"dispose\",\"sub/dispose\",365440536),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_v,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(r)], null)], null));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__48375);\n\ntry{try{return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.query__GT_reaction,(function (query_cache){\nif(((cljs.core.contains_QMARK_(query_cache,cache_key)) && ((r === cljs.core.get.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key))))){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key);\n} else {\nreturn query_cache;\n}\n}));\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__48269__auto___48477 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now();\nvar duration__48270__auto___48478 = (end__48269__auto___48477 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__48270__auto___48478,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.run_tracing_callbacks_BANG_(end__48269__auto___48477);\n} else {\n}\n}}finally {(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__48374);\n}} else {\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.query__GT_reaction,(function (query_cache){\nif(((cljs.core.contains_QMARK_(query_cache,cache_key)) && ((r === cljs.core.get.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key))))){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key);\n} else {\nreturn query_cache;\n}\n}));\n}\n}));\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.query__GT_reaction,(function (query_cache){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.debug_enabled_QMARK_){\nif(cljs.core.contains_QMARK_(query_cache,cache_key)){\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\",cache_key], 0));\n} else {\n}\n} else {\n}\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(query_cache,cache_key,r);\n}));\n\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48479 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(r)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(r)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48479);\n\n} else {\n}\n\nreturn r;\n});\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$cache_lookup(var_args){\nvar G__48379 = arguments.length;\nswitch (G__48379) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1 = (function (query_v){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query_v,cljs.core.PersistentVector.EMPTY);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2 = (function (query_v,dyn_v){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.query__GT_reaction),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_v,dyn_v], null));\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$lang$maxFixedArity = 2);\n\n/**\n * Given a `query`, returns a Reagent `reaction` which, over\n *   time, reactively delivers a stream of values. So in FRP-ish terms,\n *   it returns a `Signal`.\n * \n *   To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n * \n *   `query` is a vector of at least one element. The first element is the\n *   `query-id`, typically a namespaced keyword. The rest of the vector's\n *   elements are optional, additional values which parameterise the query\n *   performed.\n * \n *   `dynv` is an optional 3rd argument, which is a vector of further input\n *   signals (atoms, reactions, etc), NOT values. This argument exists for\n *   historical reasons and is borderline deprecated these days.\n * \n *   Example Usage:\n *   --------------\n * \n *  (subscribe [:items])\n *  (subscribe [:items \"blue\" :small])\n *  (subscribe [:items {:colour \"blue\"  :size :small}])\n * \n *   Note: for any given call to `subscribe` there must have been a previous call\n *   to `reg-sub`, registering the query handler (function) for the `query-id` given.\n * \n *   Hint\n *   ----\n * \n *   When used in a view function BE SURE to `deref` the returned value.\n *   In fact, to avoid any mistakes, some prefer to define:\n * \n *   (def <sub  (comp deref re-frame.core/subscribe))\n * \n *   And then, within their views, they call  `(<sub [:items :small])` rather\n *   than using `subscribe` directly.\n * \n *   De-duplication\n *   --------------\n * \n *   XXX\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subscribe(var_args){\nvar G__48386 = arguments.length;\nswitch (G__48386) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1 = (function (query){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__48388 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__48389 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"create\",\"sub/create\",-1301317560),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query], null)], null));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__48389);\n\ntry{try{var temp__5733__auto__ = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1(query);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48482 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48482);\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query);\nvar handler_fn = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind,query_id);\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48483 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48483);\n\n} else {\n}\n\nif((handler_fn == null)){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48484 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48484);\n\n} else {\n}\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_and_return(query,cljs.core.PersistentVector.EMPTY,(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db,query) : handler_fn.call(null,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db,query)));\n}\n}\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__48269__auto___48485 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now();\nvar duration__48270__auto___48486 = (end__48269__auto___48485 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__48270__auto___48486,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.run_tracing_callbacks_BANG_(end__48269__auto___48485);\n} else {\n}\n}}finally {(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__48388);\n}} else {\nvar temp__5733__auto__ = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1(query);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48487 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48487);\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query);\nvar handler_fn = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind,query_id);\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48493 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48493);\n\n} else {\n}\n\nif((handler_fn == null)){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48494 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48494);\n\n} else {\n}\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_and_return(query,cljs.core.PersistentVector.EMPTY,(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db,query) : handler_fn.call(null,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db,query)));\n}\n}\n}\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2 = (function (query,dynv){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__48397 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__48398 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"create\",\"sub/create\",-1301317560),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query,new cljs.core.Keyword(null,\"dyn-v\",\"dyn-v\",949994592),dynv], null)], null));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__48398);\n\ntry{try{var temp__5733__auto__ = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query,dynv);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48499 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48499);\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query);\nvar handler_fn = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind,query_id);\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48500 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48500);\n\n} else {\n}\n\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.debug_enabled_QMARK_){\nvar temp__5735__auto___48506 = cljs.core.not_empty(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.ratom_QMARK_,dynv));\nif(cljs.core.truth_(temp__5735__auto___48506)){\nvar not_reactive_48507 = temp__5735__auto___48506;\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\",not_reactive_48507], 0));\n} else {\n}\n} else {\n}\n\nif((handler_fn == null)){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48508 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48508);\n\n} else {\n}\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nvar dyn_vals = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,dynv);\n}));\nvar sub = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nvar G__48409 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db;\nvar G__48410 = query;\nvar G__48411 = cljs.core.deref(dyn_vals);\nreturn (handler_fn.cljs$core$IFn$_invoke$arity$3 ? handler_fn.cljs$core$IFn$_invoke$arity$3(G__48409,G__48410,G__48411) : handler_fn.call(null,G__48409,G__48410,G__48411));\n}));\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_and_return(query,dynv,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nreturn cljs.core.deref(cljs.core.deref(sub));\n})));\n}\n}\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__48269__auto___48509 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now();\nvar duration__48270__auto___48510 = (end__48269__auto___48509 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__48270__auto___48510,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.run_tracing_callbacks_BANG_(end__48269__auto___48509);\n} else {\n}\n}}finally {(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__48397);\n}} else {\nvar temp__5733__auto__ = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query,dynv);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48511 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48511);\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query);\nvar handler_fn = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind,query_id);\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48513 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48513);\n\n} else {\n}\n\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.debug_enabled_QMARK_){\nvar temp__5735__auto___48515 = cljs.core.not_empty(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.ratom_QMARK_,dynv));\nif(cljs.core.truth_(temp__5735__auto___48515)){\nvar not_reactive_48516 = temp__5735__auto___48515;\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\",not_reactive_48516], 0));\n} else {\n}\n} else {\n}\n\nif((handler_fn == null)){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48517 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48517);\n\n} else {\n}\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nvar dyn_vals = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,dynv);\n}));\nvar sub = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nvar G__48418 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db;\nvar G__48419 = query;\nvar G__48420 = cljs.core.deref(dyn_vals);\nreturn (handler_fn.cljs$core$IFn$_invoke$arity$3 ? handler_fn.cljs$core$IFn$_invoke$arity$3(G__48418,G__48419,G__48420) : handler_fn.call(null,G__48418,G__48419,G__48420));\n}));\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_and_return(query,dynv,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nreturn cljs.core.deref(cljs.core.deref(sub));\n})));\n}\n}\n}\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe.cljs$lang$maxFixedArity = 2);\n\n/**\n * Returns a new version of 'm' in which 'f' has been applied to each value.\n *   (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.map_vals = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$map_vals(f,m){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.empty(m),cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__48423){\nvar vec__48425 = p__48423;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48425,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48425,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(v) : f.call(null,v))], null);\n})),m);\n});\n/**\n * Runs f over signals. Signals may take several\n *   forms, this function handles all of them.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.map_signals = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$map_signals(f,signals){\nif(cljs.core.sequential_QMARK_(signals)){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(f,signals);\n} else {\nif(cljs.core.map_QMARK_(signals)){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.map_vals(f,signals);\n} else {\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.deref_QMARK_(signals)){\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(signals) : f.call(null,signals));\n} else {\nreturn cljs.core.List.EMPTY;\n\n}\n}\n}\n});\n/**\n * Coerces x to a seq if it isn't one already\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.to_seq = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$to_seq(x){\nif(cljs.core.sequential_QMARK_(x)){\nreturn x;\n} else {\nreturn (new cljs.core.List(null,x,null,(1),null));\n}\n});\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.deref_input_signals = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$deref_input_signals(signals,query_id){\nvar dereffed_signals = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.map_signals(cljs.core.deref,signals);\nif(cljs.core.sequential_QMARK_(signals)){\ncljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,signals);\n} else {\nif(cljs.core.map_QMARK_(signals)){\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.map_vals(cljs.core.deref,signals);\n} else {\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.deref_QMARK_(signals)){\ncljs.core.deref(signals);\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: in the reg-sub for\",query_id,\", the input-signals function returns:\",signals], 0));\n\n}\n}\n}\n\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48522 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"input-signals\",\"input-signals\",563633497),cljs.core.doall.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.to_seq(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.map_signals(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id,signals)))], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"input-signals\",\"input-signals\",563633497),cljs.core.doall.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.to_seq(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.map_signals(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id,signals)))], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48522);\n\n} else {\n}\n\nreturn dereffed_signals;\n});\n/**\n * For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n *   \n *   During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n *   will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n *   needs to know how to create the node.   By calling `reg-sub`, you are registering \n *   'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n * \n *   Repeating: calling `reg-sub` does not create a node. It only creates the template\n *   from which nodes can be created later. \n *   \n *   `reg-sub` arguments are:  \n *  - a `query-id` (typically a namespaced keyword)\n *  - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n *  - a function which computes the value of this kind of node \n * \n *   The `computation function` is always the last argument supplied and it is expected to have the signature: \n *  `(input-values, query-vector) -> a-value`\n *   \n *   When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n *   the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n *   then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n * \n *   The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n *   but whatever is there defines the `input signals` part of the template, controlling what input \n *  values \"flow into\" the `computation function` gets when it is called. \n * \n *   `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n *   But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n *   two are really just sugary variations. \n * \n *   1. No input signals given:\n *    ```clj\n *   (reg-sub\n *     :query-id\n *     a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n *   ```\n * \n *   In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n *   and, as a result, the value within `app-db` (a map) is\n *   is given as the 1st argument when `a-computation-fn` is called.   \n *  \n * \n *   2. A signal function is explicitly supplied:\n *   ```clj\n *   (reg-sub\n *     :query-id\n *     signal-fn     ;; <-- here\n *     computation-fn)\n *   ```\n *   \n *   This is the most canonical and instructive of the three variations.\n *   \n *   When a node is created from the template, the `signal-fn` will be called and it\n *   is expected to return the input signal(s) as either a singleton, if there is only\n *   one, or a sequence if there are many, or a map with the signals as the values.\n * \n *   The values from returned nominated signals will be supplied as the 1st argument to  \n *   the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n *   this value will be either a singleton, sequence or map of them (paralleling\n *   the structure returned by the `signal-fn`).\n * \n *   This example `signal-fn` returns a vector of input signals.\n *     ```clj\n *     (fn [query-vec dynamic-vec]\n *       [(subscribe [:a-sub])\n *        (subscribe [:b-sub])])\n *     ```\n *   The associated computation function must be written\n *   to expect a vector of values for its first argument:\n *     ```clj\n *     (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n *       ....)\n *      ```\n * \n *   If, on the other hand, the signal function was simpler and returned a singleton, like this:\n *      ```clj\n *      (fn [query-vec dynamic-vec]\n *        (subscribe [:a-sub]))\n *      ```\n *   then the associated computation function must be written to expect a single value\n *   as the 1st argument:\n *      ```clj\n *      (fn [a query-vec]       ;; 1st argument is a single value\n *        ...)\n *      ```\n *  \n *   Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n *     ```clj\n *   (reg-sub\n *     :query-id\n *     a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n *   ```\n *   is the equivalent of using this\n *   2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n *   ```clj\n *   (reg-sub\n *     :query-id\n *     (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n *     a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n *   ```\n *  \n *   3. Syntax Sugar\n * \n *   ```clj\n *   (reg-sub\n *     :a-b-sub\n *     :<- [:a-sub]\n *     :<- [:b-sub]\n *     (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n *       {:a a :b b}))\n *   ```\n * \n *   This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n *   `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n * \n *   If you supply only one pair a singleton will be supplied to the computation function, \n *   as if you had supplied a `signal-fn` returning only a single value:\n * \n *   ```clj\n *   (reg-sub\n *     :a-sub\n *     :<- [:a-sub]\n *     (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n *       ...))\n *   ```\n * \n *   For further understanding, read `/docs`, and look at the detailed comments in\n *   /examples/todomvc/src/subs.cljs\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.reg_sub = (function day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$reg_sub(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___48523 = arguments.length;\nvar i__4737__auto___48524 = (0);\nwhile(true){\nif((i__4737__auto___48524 < len__4736__auto___48523)){\nargs__4742__auto__.push((arguments[i__4737__auto___48524]));\n\nvar G__48525 = (i__4737__auto___48524 + (1));\ni__4737__auto___48524 = G__48525;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.reg_sub.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.reg_sub.cljs$core$IFn$_invoke$arity$variadic = (function (query_id,args){\nvar computation_fn = cljs.core.last(args);\nvar input_args = cljs.core.butlast(args);\nvar err_header = [\"re-frame: reg-sub for \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\", \"].join('');\nvar inputs_fn = (function (){var G__48434 = cljs.core.count(input_args);\nswitch (G__48434) {\ncase (0):\nreturn (function() {\nvar G__48527 = null;\nvar G__48527__1 = (function (_){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db;\n});\nvar G__48527__2 = (function (_,___$1){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.db.app_db;\n});\nG__48527 = function(_,___$1){\nswitch(arguments.length){\ncase 1:\nreturn G__48527__1.call(this,_);\ncase 2:\nreturn G__48527__2.call(this,_,___$1);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__48527.cljs$core$IFn$_invoke$arity$1 = G__48527__1;\nG__48527.cljs$core$IFn$_invoke$arity$2 = G__48527__2;\nreturn G__48527;\n})()\n\nbreak;\ncase (1):\nvar f = cljs.core.first(input_args);\nif(cljs.core.fn_QMARK_(f)){\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"2nd argument expected to be an inputs function, got:\",f], 0));\n}\n\nreturn f;\n\nbreak;\ncase (2):\nvar vec__48435 = input_args;\nvar marker = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48435,(0),null);\nvar vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48435,(1),null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"<-\",\"<-\",760412998),marker)){\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"expected :<-, got:\",marker], 0));\n}\n\nreturn (function() {\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn = null;\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__1 = (function (_){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(vec);\n});\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__2 = (function (_,___$1){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(vec);\n});\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn = function(_,___$1){\nswitch(arguments.length){\ncase 1:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__1.call(this,_);\ncase 2:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__2.call(this,_,___$1);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$1 = day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__1;\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$2 = day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__2;\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn;\n})()\n\nbreak;\ndefault:\nvar pairs = cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),input_args);\nvar markers = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,pairs);\nvar vecs = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.last,pairs);\nif(((cljs.core.every_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"<-\",\"<-\",760412998),null], null), null),markers)) && (cljs.core.every_QMARK_(cljs.core.vector_QMARK_,vecs)))){\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"expected pairs of :<- and vectors, got:\",pairs], 0));\n}\n\nreturn (function() {\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn = null;\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__1 = (function (_){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe,vecs);\n});\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__2 = (function (_,___$1){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe,vecs);\n});\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn = function(_,___$1){\nswitch(arguments.length){\ncase 1:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__1.call(this,_);\ncase 2:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__2.call(this,_,___$1);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$1 = day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__1;\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$2 = day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn__2;\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$inp_fn;\n})()\n\n}\n})();\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.register_handler(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.kind,query_id,(function() {\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn = null;\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn__2 = (function (db,query_vec){\nvar subscriptions = (inputs_fn.cljs$core$IFn$_invoke$arity$1 ? inputs_fn.cljs$core$IFn$_invoke$arity$1(query_vec) : inputs_fn.call(null,query_vec));\nvar reaction_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nvar reaction = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__48438 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__48439 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query_vec),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"run\",\"sub/run\",-1821315581),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_vec,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),cljs.core.deref(reaction_id)], null)], null));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__48439);\n\ntry{try{var subscription = (function (){var G__48440 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__48441 = query_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$2 ? computation_fn.cljs$core$IFn$_invoke$arity$2(G__48440,G__48441) : computation_fn.call(null,G__48440,G__48441));\n})();\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48531 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48531);\n\n} else {\n}\n\nreturn subscription;\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__48269__auto___48539 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now();\nvar duration__48270__auto___48540 = (end__48269__auto___48539 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__48270__auto___48540,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.run_tracing_callbacks_BANG_(end__48269__auto___48539);\n} else {\n}\n}}finally {(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__48438);\n}} else {\nvar subscription = (function (){var G__48442 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__48443 = query_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$2 ? computation_fn.cljs$core$IFn$_invoke$arity$2(G__48442,G__48443) : computation_fn.call(null,G__48442,G__48443));\n})();\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48545 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48545);\n\n} else {\n}\n\nreturn subscription;\n}\n}));\ncljs.core.reset_BANG_(reaction_id,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(reaction));\n\nreturn reaction;\n});\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn__3 = (function (db,query_vec,dyn_vec){\nvar subscriptions = (inputs_fn.cljs$core$IFn$_invoke$arity$2 ? inputs_fn.cljs$core$IFn$_invoke$arity$2(query_vec,dyn_vec) : inputs_fn.call(null,query_vec,dyn_vec));\nvar reaction_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nvar reaction = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.make_reaction((function (){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__48444 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__48445 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.utils.first_in_vector(query_vec),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"run\",\"sub/run\",-1821315581),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_vec,new cljs.core.Keyword(null,\"dyn-v\",\"dyn-v\",949994592),dyn_vec,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),cljs.core.deref(reaction_id)], null)], null));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__48445);\n\ntry{try{var subscription = (function (){var G__48446 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__48447 = query_vec;\nvar G__48448 = dyn_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$3 ? computation_fn.cljs$core$IFn$_invoke$arity$3(G__48446,G__48447,G__48448) : computation_fn.call(null,G__48446,G__48447,G__48448));\n})();\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48554 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48554);\n\n} else {\n}\n\nreturn subscription;\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__48269__auto___48561 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now();\nvar duration__48270__auto___48562 = (end__48269__auto___48561 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__48270__auto___48562,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.run_tracing_callbacks_BANG_(end__48269__auto___48561);\n} else {\n}\n}}finally {(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__48444);\n}} else {\nvar subscription = (function (){var G__48449 = day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__48450 = query_vec;\nvar G__48451 = dyn_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$3 ? computation_fn.cljs$core$IFn$_invoke$arity$3(G__48449,G__48450,G__48451) : computation_fn.call(null,G__48449,G__48450,G__48451));\n})();\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__48271__auto___48566 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.trace._STAR_current_trace_STAR_ = new_trace__48271__auto___48566);\n\n} else {\n}\n\nreturn subscription;\n}\n}));\ncljs.core.reset_BANG_(reaction_id,day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.interop.reagent_id(reaction));\n\nreturn reaction;\n});\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn = function(db,query_vec,dyn_vec){\nswitch(arguments.length){\ncase 2:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn__2.call(this,db,query_vec);\ncase 3:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn__3.call(this,db,query_vec,dyn_vec);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn.cljs$core$IFn$_invoke$arity$2 = day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn__2;\nday8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn.cljs$core$IFn$_invoke$arity$3 = day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn__3;\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v12v0$re_frame$subs$subs_handler_fn;\n})()\n);\n}));\n\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.reg_sub.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.reg_sub.cljs$lang$applyTo = (function (seq48432){\nvar G__48433 = cljs.core.first(seq48432);\nvar seq48432__$1 = cljs.core.next(seq48432);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__48433,seq48432__$1);\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",66],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar","^S","~$cljs.core","^T","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers","^U","~$goog","^V","~$registrar","^S","~$trace","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop","^Z","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.db","^[","^Y","^Y","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.utils","^10"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$reagent-id","^Z","~$console","^U","~$app-db","^[","~$dispose!","^Z","~$add-on-dispose!","^Z","~$make-reaction","^Z","~$get-handler","^S","~$first-in-vector","^10","~$deref?","^Z","~$ratom?","^Z","~$debug-enabled?","^Z","~$clear-handlers","^S","~$register-handler","^S"],"~:require-macros",["^ ","^Y","^Y","^X","^Y","^T","^T"],"~:form",["~#list",["~$ns","^N",["^1C",["^12",["^[","~:refer",["^16"]],["^Z","^1E",["^18","^1>","^19","^1=","^1<","^17","^14"]],["^U","^1E",["^15"]],["^10","^1E",["^1;"]],["^S","~:as","^W","^1E",["^1:","^1?","^1@"]],["^Y","^1F","^X","~:include-macros",true]]]]],"~:flags",["^ ","^12",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^V","^T","^[","^Z","^U","^10","^S","^Y"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc"],"~:compiled-at",1598576887131,"~:resource-name","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","~:warnings",[],"~:source","(ns day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs\n (:require\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.db        :refer [app-db]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop   :refer [add-on-dispose! debug-enabled? make-reaction ratom? deref? dispose! reagent-id]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers   :refer [console]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.utils     :refer [first-in-vector]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar :as registrar :refer [get-handler clear-handlers register-handler]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace     :as trace :include-macros true]))\n\n(def kind :sub)\n(assert (registrar/kinds kind))\n\n;; -- cache -------------------------------------------------------------------\n;;\n;; De-duplicate subscriptions. If two or more equal subscriptions\n;; are concurrently active, we want only one handler running.\n;; Two subscriptions are \"equal\" if their query vectors test \"=\".\n(def query->reaction (atom {}))\n\n(defn clear-subscription-cache!\n  \"Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue.\"\n  []\n  (doseq [[k rxn] @query->reaction]\n    (dispose! rxn))\n  (if (not-empty @query->reaction)\n    (console :warn \"Subscription cache should be empty after clearing it.\")))\n\n(defn clear-all-handlers!\n  \"Unregisters all existing subscription handlers\"\n  []\n  (clear-handlers kind)\n  (clear-subscription-cache!))\n\n(defn cache-and-return\n  \"cache the reaction r\"\n  [query-v dynv r]\n  (let [cache-key [query-v dynv]]\n    ;; when this reaction is no longer being used, remove it from the cache\n    (add-on-dispose! r #(trace/with-trace {:operation (first-in-vector query-v)\n                                           :op-type   :sub/dispose\n                                           :tags      {:query-v  query-v\n                                                       :reaction (reagent-id r)}}\n                                          (swap! query->reaction\n                                                 (fn [query-cache]\n                                                   (if (and (contains? query-cache cache-key) (identical? r (get query-cache cache-key)))\n                                                     (dissoc query-cache cache-key)\n                                                     query-cache)))))\n    ;; cache this reaction, so it can be used to deduplicate other, later \"=\" subscriptions\n    (swap! query->reaction (fn [query-cache]\n                             (when debug-enabled?\n                               (when (contains? query-cache cache-key)\n                                 (console :warn \"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\" cache-key)))\n                             (assoc query-cache cache-key r)))\n    (trace/merge-trace! {:tags {:reaction (reagent-id r)}})\n    r)) ;; return the actual reaction\n\n(defn cache-lookup\n  ([query-v]\n   (cache-lookup query-v []))\n  ([query-v dyn-v]\n   (get @query->reaction [query-v dyn-v])))\n\n\n;; -- subscribe ---------------------------------------------------------------\n\n(defn subscribe\n  \"Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \\\"blue\\\" :small])\n    (subscribe [:items {:colour \\\"blue\\\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  \"\n\n  ([query]\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query}}\n     (if-let [cached (cache-lookup query)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (cache-and-return query [] (handler-fn app-db query)))))))\n\n  ([query dynv]\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query\n                                  :dyn-v   dynv}}\n     (if-let [cached (cache-lookup query dynv)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (when debug-enabled?\n           (when-let [not-reactive (not-empty (remove ratom? dynv))]\n             (console :warn \"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\" not-reactive)))\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (let [dyn-vals (make-reaction (fn [] (mapv deref dynv)))\n                 sub      (make-reaction (fn [] (handler-fn app-db query @dyn-vals)))]\n             ;; handler-fn returns a reaction which is then wrapped in the sub reaction\n             ;; need to double deref it to get to the actual value.\n             ;(console :log \"Subscription created: \" v dynv)\n             (cache-and-return query dynv (make-reaction (fn [] @@sub))))))))))\n\n;; -- reg-sub -----------------------------------------------------------------\n\n(defn- map-vals\n  \"Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\"\n  [f m]\n  (into (empty m)\n        (map (fn [[k v]] [k (f v)]))\n        m))\n\n(defn map-signals\n  \"Runs f over signals. Signals may take several\n  forms, this function handles all of them.\"\n  [f signals]\n  (cond\n    (sequential? signals) (map f signals)\n    (map? signals) (map-vals f signals)\n    (deref? signals) (f signals)\n    :else '()))\n\n(defn to-seq\n  \"Coerces x to a seq if it isn't one already\"\n  [x]\n  (if (sequential? x)\n    x\n    (list x)))\n\n(defn- deref-input-signals\n  [signals query-id]\n  (let [dereffed-signals (map-signals deref signals)]\n    (cond\n      (sequential? signals) (map deref signals)\n      (map? signals) (map-vals deref signals)\n      (deref? signals) (deref signals)\n      :else (console :error \"re-frame: in the reg-sub for\" query-id \", the input-signals function returns:\" signals))\n    (trace/merge-trace! {:tags {:input-signals (doall (to-seq (map-signals reagent-id signals)))}})\n    dereffed-signals))\n\n\n(defn reg-sub\n  \"For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \\\"blue\\\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \\\"blue\\\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \\\"blue\\\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \\\"flow into\\\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  \"\n  [query-id & args]\n  (let [computation-fn (last args)\n        input-args     (butlast args) ;; may be empty, or one signal fn, or pairs of  :<- / vector\n        err-header     (str \"re-frame: reg-sub for \" query-id \", \")\n        inputs-fn      (case (count input-args)\n                         ;; no `inputs` function provided - give the default\n                         0 (fn\n                             ([_] app-db)\n                             ([_ _] app-db))\n\n                         ;; a single `inputs` fn\n                         1 (let [f (first input-args)]\n                             (when-not (fn? f)\n                               (console :error err-header \"2nd argument expected to be an inputs function, got:\" f))\n                             f)\n\n                         ;; one sugar pair\n                         2 (let [[marker vec] input-args]\n                             (when-not (= :<- marker)\n                               (console :error err-header \"expected :<-, got:\" marker))\n                             (fn inp-fn\n                               ([_] (subscribe vec))\n                               ([_ _] (subscribe vec))))\n\n                         ;; multiple sugar pairs\n                         (let [pairs   (partition 2 input-args)\n                               markers (map first pairs)\n                               vecs    (map last pairs)]\n                           (when-not (and (every? #{:<-} markers) (every? vector? vecs))\n                             (console :error err-header \"expected pairs of :<- and vectors, got:\" pairs))\n                           (fn inp-fn\n                             ([_] (map subscribe vecs))\n                             ([_ _] (map subscribe vecs)))))]\n    (register-handler\n      kind\n      query-id\n      (fn subs-handler-fn\n        ([db query-vec]\n         (let [subscriptions (inputs-fn query-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v    query-vec\n                                                                :reaction   @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))\n        ([db query-vec dyn-vec]\n         (let [subscriptions (inputs-fn query-vec dyn-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v   query-vec\n                                                                :dyn-v     dyn-vec\n                                                                :reaction  @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec dyn-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))))))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/kind","js/Error","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/kinds","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/query->reaction","cljs.core.atom","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/clear-subscription-cache!","seq__48320","cljs.core/seq","cljs.core/deref","chunk__48321","count__48322","i__48323","vec__48349","cljs.core.nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__48361","cljs.core/first","cljs.core/next","k","rxn","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/dispose!","cljs.core/not-empty","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.loggers.console","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/clear-all-handlers!","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.clear_handlers","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/cache-and-return","query-v","dynv","r","cache-key","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/add-on-dispose!","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__48374","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/*current-trace*","*current-trace*-temp-val__48375","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/start-trace","end__48269__auto__","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/now","duration__48270__auto__","cljs.core.swap_BANG_","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/run-tracing-callbacks!","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.utils/first-in-vector","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/reagent-id","query-cache","cljs.core/contains?","cljs.core.get","cljs.core.dissoc","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/debug-enabled?","new-trace__48271__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","var_args","G__48379","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/cache-lookup","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.cache_lookup","dyn-v","G__48386","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/subscribe","query","*current-trace*-orig-val__48388","*current-trace*-temp-val__48389","temp__5733__auto__","cached","query-id","handler-fn","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.registrar.get_handler","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.db/app-db","*current-trace*-orig-val__48397","*current-trace*-temp-val__48398","not-reactive","cljs.core.remove","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/ratom?","dyn-vals","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/make-reaction","cljs.core.mapv","sub","G__48409","G__48410","G__48411","G__48418","G__48419","G__48420","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/map-vals","f","m","cljs.core.into","cljs.core/empty","cljs.core.map","p__48423","vec__48425","v","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/map-signals","signals","cljs.core/sequential?","cljs.core/map?","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/deref?","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/to-seq","x","cljs.core/List","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/deref-input-signals","dereffed-signals","cljs.core.doall","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/reg-sub","seq48432","G__48433","self__4723__auto__","args","computation-fn","cljs.core/last","input-args","cljs.core/butlast","err-header","inputs-fn","G__48434","_","cljs.core/fn?","vec__48435","marker","vec","cljs.core._EQ_","day8.re_frame_10x.inlined_deps.re_frame.v0v12v0.re_frame.subs.subscribe","pairs","cljs.core.partition","markers","vecs","cljs.core/every?","cljs.core/vector?","day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/register-handler","db","query-vec","subscriptions","reaction-id","reaction","*current-trace*-orig-val__48438","*current-trace*-temp-val__48439","subscription","G__48440","G__48441","G__48442","G__48443","cljs.core/reset!","dyn-vec","*current-trace*-orig-val__48444","*current-trace*-temp-val__48445","G__48446","G__48447","G__48448","G__48449","G__48450","G__48451"]],"~:used-vars",["^L",["~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/kinds","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/traces","~$cljs.core/sequential?","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/query->reaction","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/map-vals","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/map-signals","~$cljs.core/count","~$cljs.core/deref","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/kind","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/make-reaction","~$cljs.core/dissoc","~$cljs.core/chunk-rest","~$cljs.core/atom","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/to-seq","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.db/app-db","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/cache-and-return","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/reagent-id","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/dispose!","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/reg-sub","~$cljs.core/contains?","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/*current-trace*","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/reset!","~$cljs.core/conj","~$cljs.core/map","~$cljs.core/List","~$cljs.core/empty","~$cljs.core/swap!","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/clear-all-handlers!","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.loggers/console","~$cljs.core/get","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/add-on-dispose!","~$cljs.core/not-empty","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/register-handler","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/debug-enabled?","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/now","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/clear-subscription-cache!","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/run-tracing-callbacks!","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/cache-lookup","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.registrar/clear-handlers","~$cljs.core/next","~$cljs.core/assoc","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/subscribe","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.trace/is-trace-enabled?","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.subs/deref-input-signals","~$js/Error","~$day8.re-frame-10x.inlined-deps.re-frame.v0v12v0.re-frame.interop/deref?","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1598571556000,1598571556000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1L","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","~$goog.dom.HtmlElement"]]],["^1L","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/ratom.cljs"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.util","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.debug","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.batching","~$clojure.set","~$goog.object"]]],["^1L","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","~$goog.labs.userAgent.util","~$goog.string"]]],["^1L","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","~$goog.array","~$goog.asserts"]]],["^1L","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V"]]],["^1L","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3C","^3A","^3@","~$goog.string.internal"]]],["^1L","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3D","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3E"]]],["^1L","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3D"]]],["^33","node_modules/prop-types/checkPropTypes.js"],[1598571556000,1598571556000,1549836454000,"^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^38","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1L","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3A","~$goog.reflect","^3B"]]],["^1L","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V"]]],["^1L","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V"]]],["^33","node_modules/scheduler/cjs/scheduler.development.js"],[1598571556000,1598571556000,499162500000,"^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^38"]]],["^33","node_modules/scheduler/cjs/scheduler.production.min.js"],[1598571556000,1598571556000,499162500000,"^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^38"]]],["^1L","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V"]]],["^33","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1598571556000,1598571556000,499162500000,"^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^38"]]],["^33","node_modules/react/index.js"],[1598571556000,1598571556000,499162500000,"^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^38","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1L","shadow/js.js"],["a9b6248f5bcd9480b4be9de7fccb49898ed962b8","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V"]]],["^1L","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V"]]],["^1L","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3D"]]],["^33","node_modules/react-dom/cjs/react-dom.production.min.js"],[1598571556000,1598571556000,499162500000,"^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^38","^?","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1598571556000,1598571556000,1598571537000],["^33","node_modules/react/cjs/react.development.js"],[1598571556000,1598571556000,499162500000,"^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^38","^3S","~$module$node_modules$prop_types$checkPropTypes"]]],["^1L","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3D","^3P"]]],["^1L","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/util.cljs"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T","~$clojure.string"]]],["^1L","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3D","~$goog.html.trustedtypes","^3H","^3I","^3J","^3K"]]],["^1L","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/core.cljs"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T","^?","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.template","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.impl.component","^3<","^3>","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.ratom","^3=","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.dom"]]],["^1L","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V"]]],["^33","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1598571556000,1598571556000,499162500000,"^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^38"]]],["^1L","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V"]]],["^1L","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3C","^3D","~$goog.html.SafeUrl","^3J","^3K","^3E"]]],["^1L","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3D","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^41","^3G","~$goog.html.uncheckedconversions","^3J","^3E"]]],["^1L","clojure/walk.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T"]]],["^1L","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1L","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3C","^3D","~$goog.dom.TagName","~$goog.dom.tags","^45","^46","~$goog.html.SafeStyleSheet","^41","^3G","^3X","^3H","^3I","^3M","^3@","^3J","^3K","^3E"]]],["^1L","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3@"]]],["^1L","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V"]]],["^1L","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/batching.cljs"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T","^3=","^3<"]]],["^33","node_modules/scheduler/index.js"],[1598571556000,1598571556000,499162500000,"^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^38","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1L","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3C","^3A","^3B"]]],["^1L","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T","^[","^Z","^U","^10","^S","^Y"]]],["^1L","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3C","^3D","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4:","~$goog.dom.safe","^44","^47","~$goog.math.Coordinate","~$goog.math.Size","^3@","^3B","~$goog.string.Unicode","~$goog.userAgent"]]],["^1L","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","~$goog.debug.Error","^4@"]]],["^1L","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3C","^3D","^3B","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1L","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/dom.cljs"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T","^A","^3<","^3Y","^3>","^3["]]],["^1L","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interop.cljs"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T","~$goog.async.nextTick","~$day8.re-frame-10x.inlined-deps.reagent.v0v10v0.reagent.core","^3["]]],["^1L","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V"]]],["^33","node_modules/object-assign/index.js"],[1598571556000,1598571556000,1484580833000,"^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^38"]]],["^1L","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V"]]],["^1L","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/trace.cljc"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T","^Z","^U","^43"]]],["^1L","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",[]]],["^1L","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3C","^3@"]]],["^1L","clojure/string.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T","^3B","~$goog.string.StringBuffer"]]],["^33","node_modules/react/cjs/react.production.min.js"],[1598571556000,1598571556000,499162500000,"^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^38","^3S"]]],["^1L","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3D"]]],["^1L","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^4A","^47","^3J","^3E"]]],["^1L","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V"]]],["^1L","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3E"]]],["^1L","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V"]]],["^1L","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","~$goog.math"]]],["^1L","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/template.cljs"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T","^?","^3W","~$clojure.walk","^3<","^3Z","^3>","^3[","^3=","^3@"]]],["^1L","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3C","^3D","^43","^4O"]]],["^1L","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/db.cljc"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T","^Z"]]],["^1L","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/loggers.cljc"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T","^3?"]]],["^1L","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","~$goog.debug.entryPointRegistry","~$goog.dom","^4:","^4A","^43","^44","^3G","^3M","^3N","^3J"]]],["^1L","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3D","^44","^45","^46","^4<","^41","^3G","^3J","^3E"]]],["^1L","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/debug.cljs"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T"]]],["^33","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1598571556000,1598571556000,1549571078000,"^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^38"]]],["^1L","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V"]]],["^1L","cljs/core.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","~$goog.math.Long","~$goog.math.Integer","^3B","^3@","^3C","~$goog.Uri","^4N"]]],["^1L","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3D","^3X","^3J","^3K"]]],["^1L","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3C","^3D","^46","^3@","^3J","^3K","^3E"]]],["^1L","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/utils.cljc"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T","^U"]]],["^1L","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3P"]]],["^1L","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^4E"]]],["^33","node_modules/scheduler/tracing.js"],[1598571556000,1598571556000,499162500000,"^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^38","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^33","node_modules/react-dom/cjs/react-dom.development.js"],[1598571556000,1598571556000,499162500000,"^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^38","^?","^3S","^3T","^3V","~$module$node_modules$scheduler$tracing"]]],["^1L","clojure/set.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T"]]],["^1L","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3C","^3D","^3B"]]],["^1L","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^3D","^3K"]]],["^1L","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/registrar.cljc"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T","^Z","^U"]]],["^1L","day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/impl/component.cljs"],["9e1c7814cfb4a87b41eeac35505284ee12d0f823","^34",["^ ","^35",null,"^36",["^L",[]],"^37",["^V","^T","^3@","^?","^3<","^3>","^3[","^3="]]]]],"~:clj-info",["^ ","jar:file:/home/giovani/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1598571553000,"jar:file:/home/giovani/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/debug.clj",1598571553000,"jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/compiler.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64.clj",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map.clj",1598571537000,"jar:file:/home/giovani/.m2/repository/day8/re-frame/re-frame-10x/0.6.4/re-frame-10x-0.6.4.jar!/day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/trace.cljc",1598571556000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/day8/re-frame/re-frame-10x/0.6.4/re-frame-10x-0.6.4.jar!/day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/ratom.clj",1598571556000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/tagged_literals.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1596724258000,"jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/reagent/reagent/0.10.0/reagent-0.10.0.jar!/reagent/interop.clj",1598571553000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/analyzer.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/core.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/util.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/externs.clj",1598571537000,"jar:file:/home/giovani/.m2/repository/day8/re-frame/re-frame-10x/0.6.4/re-frame-10x-0.6.4.jar!/day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/debug.clj",1598571556000,"jar:file:/home/giovani/.m2/repository/day8/re-frame/re-frame-10x/0.6.4/re-frame-10x-0.6.4.jar!/day8/re_frame_10x/inlined_deps/reagent/v0v10v0/reagent/core.clj",1598571556000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64_vlq.clj",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/binaryage/devtools/1.0.0/devtools-1.0.0.jar!/devtools/defaults.clj",1596725445000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/env.cljc",1598571537000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/day8/re-frame/re-frame-10x/0.6.4/re-frame-10x-0.6.4.jar!/day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/interop.clj",1598571556000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1596724260000,"jar:file:/home/giovani/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1596724288000,"jar:file:/home/giovani/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/js_deps.cljc",1598571537000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",1,"^8",5,"^9",1,"^:",66],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","^T","^T","^U","^U","^V","^V","^W","^S","^X","^Y","^Z","^Z","^[","^[","^Y","^Y","^10","^10"],"^11",["^L",["^12"]],"~:shadow/js-access-global",["^L",["Error"]],"^13",["^ ","^14","^Z","^15","^U","^16","^[","^17","^Z","^18","^Z","^19","^Z","^1:","^S","^1;","^10","^1<","^Z","^1=","^Z","^1>","^Z","^1?","^S","^1@","^S"],"~:defs",["^ ","~$to-seq",["^ ","~:protocol-inline",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",181,"^8",7,"^9",181,"^:",13,"~:arglists",["^1C",["~$quote",["^1C",[["~$x"]]]]],"~:doc","Coerces x to a seq if it isn't one already"],"^M","^29","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",13,"~:method-params",["^1C",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^1C",[null,null]],"^8",1,"~:variadic?",false,"^7",181,"~:ret-tag","~$clj","^9",181,"~:max-fixed-arity",1,"~:fn-var",true,"^5T",["^1C",["^5U",["^1C",[["~$x"]]]]],"^5V","Coerces x to a seq if it isn't one already"],"~$cache-and-return",["^ ","^5S",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",42,"^8",7,"^9",42,"^:",23,"^5T",["^1C",["^5U",["^1C",[["~$query-v","~$dynv","~$r"]]]]],"^5V","cache the reaction r"],"^M","^2;","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",23,"^5W",["^1C",[["^64","^65","~$r"]]],"^5X",null,"^5Y",["^1C",[null,null]],"^8",1,"^5Z",false,"^7",42,"^9",42,"^61",3,"^62",true,"^5T",["^1C",["^5U",["^1C",[["^64","^65","~$r"]]]]],"^5V","cache the reaction r"],"~$deref-input-signals",["^ ","^5S",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",188,"^8",8,"^9",188,"^:",27,"~:private",true,"^5T",["^1C",["^5U",["^1C",[["~$signals","~$query-id"]]]]]],"^67",true,"^M","^2Y","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",27,"^5W",["^1C",[["^68","^69"]]],"^5X",null,"^5Y",["^1C",[null,null]],"^8",1,"^5Z",false,"^7",188,"^5[",["^L",["^60","~$cljs.core/IList","~$any","~$cljs.core/LazySeq"]],"^9",188,"^61",2,"^62",true,"^5T",["^1C",["^5U",["^1C",[["^68","^69"]]]]]],"~$subscribe",["^ ","^5S",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",74,"^8",7,"^9",74,"^:",16,"^5T",["^1C",["^5U",["^1C",[["~$query"],["^6>","^65"]]]]],"^5V","Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  ","~:top-fn",["^ ","^5Z",false,"~:fixed-arity",2,"^61",2,"^5W",[["^6>"],["^6>","^65"]],"^5T",["^1C",[["^6>"],["^6>","^65"]]],"^5Y",["^1C",[null,null]]]],"^M","^2W","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",16,"^6?",["^ ","^5Z",false,"^6@",2,"^61",2,"^5W",[["^6>"],["^6>","^65"]],"^5T",["^1C",[["^6>"],["^6>","^65"]]],"^5Y",["^1C",[null,null]]],"^5W",[["^6>"],["^6>","^65"]],"^5X",null,"^6@",2,"^5Y",["^1C",[null,null]],"^8",1,"^5Z",false,"~:methods",[["^ ","^6@",1,"^5Z",false,"~:tag",["^L",[null,"^6;"]]],["^ ","^6@",2,"^5Z",false,"^6B",["^L",[null,"^6;"]]]],"^7",74,"^9",74,"^61",2,"^62",true,"^5T",["^1C",[["^6>"],["^6>","^65"]]],"^5V","Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  "],"~$reg-sub",["^ ","^5S",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",200,"^8",7,"^9",200,"^:",14,"^5T",["^1C",["^5U",["^1C",[["^69","~$&","~$args"]]]]],"^5V","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \"flow into\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  ","^6?",["^ ","^5Z",true,"^6@",1,"^61",1,"^5W",[["^1C",["^69","^6D"]]],"^5T",["^1C",[["^69","~$&","^6D"]]],"^5Y",["^1C",[null]]]],"^M","^2>","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",14,"^6?",["^ ","^5Z",true,"^6@",1,"^61",1,"^5W",[["^1C",["^69","^6D"]]],"^5T",["^1C",[["^69","~$&","^6D"]]],"^5Y",["^1C",[null]]],"^5W",[["^1C",["^69","^6D"]]],"^5X",null,"^6@",1,"^5Y",["^1C",[null]],"^8",1,"^5Z",true,"^6A",[["^ ","^6@",1,"^5Z",true,"^6B","^6;"]],"^7",200,"^5[","^6;","^9",200,"^61",1,"^62",true,"^5T",["^1C",[["^69","~$&","^6D"]]],"^5V","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \"flow into\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  "],"~$query->reaction",["^ ","^M","^1[","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",18,"^8",1,"^9",18,"^:",21,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",18,"^8",6,"^9",18,"^:",21],"^6B","~$cljs.core/Atom"],"~$clear-all-handlers!",["^ ","^5S",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",36,"^8",7,"^9",36,"^:",26,"^5T",["^1C",["^5U",["^1C",[[]]]]],"^5V","Unregisters all existing subscription handlers"],"^M","^2I","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",26,"^5W",["^1C",[[]]],"^5X",null,"^5Y",["^1C",[null,null]],"^8",1,"^5Z",false,"^7",36,"^5[",["^L",["^6;","~$clj-nil"]],"^9",36,"^61",0,"^62",true,"^5T",["^1C",["^5U",["^1C",[[]]]]],"^5V","Unregisters all existing subscription handlers"],"~$cache-lookup",["^ ","^5S",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",65,"^8",7,"^9",65,"^:",19,"^5T",["^1C",["^5U",["^1C",[["^64"],["^64","~$dyn-v"]]]]],"^6?",["^ ","^5Z",false,"^6@",2,"^61",2,"^5W",[["^64"],["^64","^6J"]],"^5T",["^1C",[["^64"],["^64","^6J"]]],"^5Y",["^1C",[null,null]]]],"^M","^2S","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",19,"^6?",["^ ","^5Z",false,"^6@",2,"^61",2,"^5W",[["^64"],["^64","^6J"]],"^5T",["^1C",[["^64"],["^64","^6J"]]],"^5Y",["^1C",[null,null]]],"^5W",[["^64"],["^64","^6J"]],"^5X",null,"^6@",2,"^5Y",["^1C",[null,null]],"^8",1,"^5Z",false,"^6A",[["^ ","^6@",1,"^5Z",false,"^6B","^6;"],["^ ","^6@",2,"^5Z",false,"^6B",["^L",["^6;","^6H"]]]],"^7",65,"^9",65,"^61",2,"^62",true,"^5T",["^1C",[["^64"],["^64","^6J"]]]],"~$map-vals",["^ ","^5S",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",163,"^8",8,"^9",163,"^:",16,"^67",true,"^5T",["^1C",["^5U",["^1C",[["~$f","~$m"]]]]],"^5V","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"^67",true,"^M","^20","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",16,"^5W",["^1C",[["~$f","~$m"]]],"^5X",null,"^5Y",["^1C",[null,null]],"^8",1,"^5Z",false,"^7",163,"^5[",["^L",["^60","^6;"]],"^9",163,"^61",2,"^62",true,"^5T",["^1C",["^5U",["^1C",[["~$f","~$m"]]]]],"^5V","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"~$kind",["^ ","^M","^24","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",10,"^8",1,"^9",10,"^:",10,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",10,"^8",6,"^9",10,"^:",10],"^6B","~$cljs.core/Keyword"],"~$clear-subscription-cache!",["^ ","^5S",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",20,"^8",7,"^9",20,"^:",32,"^5T",["^1C",["^5U",["^1C",[[]]]]],"^5V","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"^M","^2Q","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",32,"^5W",["^1C",[[]]],"^5X",null,"^5Y",["^1C",[null,null]],"^8",1,"^5Z",false,"^7",20,"^5[",["^L",["^6;","^6H"]],"^9",20,"^61",0,"^62",true,"^5T",["^1C",["^5U",["^1C",[[]]]]],"^5V","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"~$map-signals",["^ ","^5S",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^7",171,"^8",7,"^9",171,"^:",18,"^5T",["^1C",["^5U",["^1C",[["~$f","^68"]]]]],"^5V","Runs f over signals. Signals may take several\n  forms, this function handles all of them."],"^M","^21","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v12v0/re_frame/subs.cljc","^:",18,"^5W",["^1C",[["~$f","^68"]]],"^5X",null,"^5Y",["^1C",[null,null]],"^8",1,"^5Z",false,"^7",171,"^5[",["^L",["^60","^6:","^6;","^6<"]],"^9",171,"^61",2,"^62",true,"^5T",["^1C",["^5U",["^1C",[["~$f","^68"]]]]],"^5V","Runs f over signals. Signals may take several\n  forms, this function handles all of them."]],"^1A",["^ ","^Y","^Y","^X","^Y","^T","^T"],"~:cljs.analyzer/constants",["^ ","^11",["^L",["~:dyn-v","~:tags","~:sub/run","~:else","~:<-","~:sub","~:sub/create","~:warn","~:value","~:operation","~:start","~:duration","~:query-v","~:cached?","~:sub/dispose","~:error","~:input-signals","~:end","~:reaction","~:op-type"]],"~:order",["^6V","^6X","^6Z","^78","^6R","^73","^71","^77","^6[","^70","^76","^6W","^72","^74","^6Q","^6T","^75","^6U","^6S","^6Y"]],"^1H",["^ ","^12",["^L",[]]],"^1I",["^ "],"^1J",["^V","^T","^[","^Z","^U","^10","^S","^Y"]],"^P","^N","~:ns-specs",["^ "],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^32",[["^7<","~:static-fns"],true,["^7<","~:shadow-tweaks"],null,["^7<","~:source-map-inline"],null,["^7<","~:elide-asserts"],false,["^7<","~:optimize-constants"],null,["^7<","^1O"],null,["^7<","~:external-config"],null,["^7<","~:tooling-config"],null,["^7<","~:emit-constants"],null,["^7<","~:load-tests"],null,["^7<","~:form-size-threshold"],null,["^7<","~:infer-externs"],true,["^7<","^1Q"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^7<","~:fn-invoke-direct"],null,["^7<","~:source-map"],"/dev/null"]]]