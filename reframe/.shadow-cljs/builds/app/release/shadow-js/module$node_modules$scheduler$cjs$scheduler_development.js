["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/scheduler/cjs/scheduler.development.js"],"~:js","shadow$provide[7]=function(r,m,y,g){}","~:source","shadow$provide[7] = function(global,require,module,exports) {\n/** @license React v0.19.1\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar enableSchedulerDebugging = false;\nvar enableProfiling = true;\n\nvar requestHostCallback;\nvar requestHostTimeout;\nvar cancelHostTimeout;\nvar shouldYieldToHost;\nvar requestPaint;\n\nif ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n// implementation using setTimeout.\ntypeof window === 'undefined' || // Check if MessageChannel is supported, too.\ntypeof MessageChannel !== 'function') {\n  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n  // fallback to a naive implementation.\n  var _callback = null;\n  var _timeoutID = null;\n\n  var _flushCallback = function () {\n    if (_callback !== null) {\n      try {\n        var currentTime = exports.unstable_now();\n        var hasRemainingTime = true;\n\n        _callback(hasRemainingTime, currentTime);\n\n        _callback = null;\n      } catch (e) {\n        setTimeout(_flushCallback, 0);\n        throw e;\n      }\n    }\n  };\n\n  var initialTime = Date.now();\n\n  exports.unstable_now = function () {\n    return Date.now() - initialTime;\n  };\n\n  requestHostCallback = function (cb) {\n    if (_callback !== null) {\n      // Protect against re-entrancy.\n      setTimeout(requestHostCallback, 0, cb);\n    } else {\n      _callback = cb;\n      setTimeout(_flushCallback, 0);\n    }\n  };\n\n  requestHostTimeout = function (cb, ms) {\n    _timeoutID = setTimeout(cb, ms);\n  };\n\n  cancelHostTimeout = function () {\n    clearTimeout(_timeoutID);\n  };\n\n  shouldYieldToHost = function () {\n    return false;\n  };\n\n  requestPaint = exports.unstable_forceFrameRate = function () {};\n} else {\n  // Capture local references to native APIs, in case a polyfill overrides them.\n  var performance = window.performance;\n  var _Date = window.Date;\n  var _setTimeout = window.setTimeout;\n  var _clearTimeout = window.clearTimeout;\n\n  if (typeof console !== 'undefined') {\n    // TODO: Scheduler no longer requires these methods to be polyfilled. But\n    // maybe we want to continue warning if they don't exist, to preserve the\n    // option to rely on it in the future?\n    var requestAnimationFrame = window.requestAnimationFrame;\n    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link\n\n    if (typeof requestAnimationFrame !== 'function') {\n      // Using console['error'] to evade Babel and ESLint\n      console['error'](\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n    }\n\n    if (typeof cancelAnimationFrame !== 'function') {\n      // Using console['error'] to evade Babel and ESLint\n      console['error'](\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n    }\n  }\n\n  if (typeof performance === 'object' && typeof performance.now === 'function') {\n    exports.unstable_now = function () {\n      return performance.now();\n    };\n  } else {\n    var _initialTime = _Date.now();\n\n    exports.unstable_now = function () {\n      return _Date.now() - _initialTime;\n    };\n  }\n\n  var isMessageLoopRunning = false;\n  var scheduledHostCallback = null;\n  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n  // thread, like user events. By default, it yields multiple times per frame.\n  // It does not attempt to align with frame boundaries, since most tasks don't\n  // need to be frame aligned; for those that do, use requestAnimationFrame.\n\n  var yieldInterval = 5;\n  var deadline = 0; // TODO: Make this configurable\n\n  {\n    // `isInputPending` is not available. Since we have no way of knowing if\n    // there's pending input, always yield at the end of the frame.\n    shouldYieldToHost = function () {\n      return exports.unstable_now() >= deadline;\n    }; // Since we yield every frame regardless, `requestPaint` has no effect.\n\n\n    requestPaint = function () {};\n  }\n\n  exports.unstable_forceFrameRate = function (fps) {\n    if (fps < 0 || fps > 125) {\n      // Using console['error'] to evade Babel and ESLint\n      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');\n      return;\n    }\n\n    if (fps > 0) {\n      yieldInterval = Math.floor(1000 / fps);\n    } else {\n      // reset the framerate\n      yieldInterval = 5;\n    }\n  };\n\n  var performWorkUntilDeadline = function () {\n    if (scheduledHostCallback !== null) {\n      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync\n      // cycle. This means there's always time remaining at the beginning of\n      // the message event.\n\n      deadline = currentTime + yieldInterval;\n      var hasTimeRemaining = true;\n\n      try {\n        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n\n        if (!hasMoreWork) {\n          isMessageLoopRunning = false;\n          scheduledHostCallback = null;\n        } else {\n          // If there's more work, schedule the next message event at the end\n          // of the preceding one.\n          port.postMessage(null);\n        }\n      } catch (error) {\n        // If a scheduler task throws, exit the current browser task so the\n        // error can be observed.\n        port.postMessage(null);\n        throw error;\n      }\n    } else {\n      isMessageLoopRunning = false;\n    } // Yielding to the browser will give it a chance to paint, so we can\n  };\n\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n\n  requestHostCallback = function (callback) {\n    scheduledHostCallback = callback;\n\n    if (!isMessageLoopRunning) {\n      isMessageLoopRunning = true;\n      port.postMessage(null);\n    }\n  };\n\n  requestHostTimeout = function (callback, ms) {\n    taskTimeoutID = _setTimeout(function () {\n      callback(exports.unstable_now());\n    }, ms);\n  };\n\n  cancelHostTimeout = function () {\n    _clearTimeout(taskTimeoutID);\n\n    taskTimeoutID = -1;\n  };\n}\n\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nfunction peek(heap) {\n  var first = heap[0];\n  return first === undefined ? null : first;\n}\nfunction pop(heap) {\n  var first = heap[0];\n\n  if (first !== undefined) {\n    var last = heap.pop();\n\n    if (last !== first) {\n      heap[0] = last;\n      siftDown(heap, last, 0);\n    }\n\n    return first;\n  } else {\n    return null;\n  }\n}\n\nfunction siftUp(heap, node, i) {\n  var index = i;\n\n  while (true) {\n    var parentIndex = index - 1 >>> 1;\n    var parent = heap[parentIndex];\n\n    if (parent !== undefined && compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  var index = i;\n  var length = heap.length;\n\n  while (index < length) {\n    var leftIndex = (index + 1) * 2 - 1;\n    var left = heap[leftIndex];\n    var rightIndex = leftIndex + 1;\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (left !== undefined && compare(left, node) < 0) {\n      if (right !== undefined && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (right !== undefined && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  var diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n\n// TODO: Use symbols?\nvar NoPriority = 0;\nvar ImmediatePriority = 1;\nvar UserBlockingPriority = 2;\nvar NormalPriority = 3;\nvar LowPriority = 4;\nvar IdlePriority = 5;\n\nvar runIdCounter = 0;\nvar mainThreadIdCounter = 0;\nvar profilingStateSize = 4;\nvar sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer\ntypeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer\ntypeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\n;\nvar profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\n\nvar PRIORITY = 0;\nvar CURRENT_TASK_ID = 1;\nvar CURRENT_RUN_ID = 2;\nvar QUEUE_SIZE = 3;\n\n{\n  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\n  // array might include canceled tasks.\n\n  profilingState[QUEUE_SIZE] = 0;\n  profilingState[CURRENT_TASK_ID] = 0;\n} // Bytes per element is 4\n\n\nvar INITIAL_EVENT_LOG_SIZE = 131072;\nvar MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\nvar eventLogSize = 0;\nvar eventLogBuffer = null;\nvar eventLog = null;\nvar eventLogIndex = 0;\nvar TaskStartEvent = 1;\nvar TaskCompleteEvent = 2;\nvar TaskErrorEvent = 3;\nvar TaskCancelEvent = 4;\nvar TaskRunEvent = 5;\nvar TaskYieldEvent = 6;\nvar SchedulerSuspendEvent = 7;\nvar SchedulerResumeEvent = 8;\n\nfunction logEvent(entries) {\n  if (eventLog !== null) {\n    var offset = eventLogIndex;\n    eventLogIndex += entries.length;\n\n    if (eventLogIndex + 1 > eventLogSize) {\n      eventLogSize *= 2;\n\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n        // Using console['error'] to evade Babel and ESLint\n        console['error'](\"Scheduler Profiling: Event log exceeded maximum size. Don't \" + 'forget to call `stopLoggingProfilingEvents()`.');\n        stopLoggingProfilingEvents();\n        return;\n      }\n\n      var newEventLog = new Int32Array(eventLogSize * 4);\n      newEventLog.set(eventLog);\n      eventLogBuffer = newEventLog.buffer;\n      eventLog = newEventLog;\n    }\n\n    eventLog.set(entries, offset);\n  }\n}\n\nfunction startLoggingProfilingEvents() {\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n  eventLog = new Int32Array(eventLogBuffer);\n  eventLogIndex = 0;\n}\nfunction stopLoggingProfilingEvents() {\n  var buffer = eventLogBuffer;\n  eventLogSize = 0;\n  eventLogBuffer = null;\n  eventLog = null;\n  eventLogIndex = 0;\n  return buffer;\n}\nfunction markTaskStart(task, ms) {\n  {\n    profilingState[QUEUE_SIZE]++;\n\n    if (eventLog !== null) {\n      // performance.now returns a float, representing milliseconds. When the\n      // event is logged, it's coerced to an int. Convert to microseconds to\n      // maintain extra degrees of precision.\n      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n    }\n  }\n}\nfunction markTaskCompleted(task, ms) {\n  {\n    profilingState[PRIORITY] = NoPriority;\n    profilingState[CURRENT_TASK_ID] = 0;\n    profilingState[QUEUE_SIZE]--;\n\n    if (eventLog !== null) {\n      logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n    }\n  }\n}\nfunction markTaskCanceled(task, ms) {\n  {\n    profilingState[QUEUE_SIZE]--;\n\n    if (eventLog !== null) {\n      logEvent([TaskCancelEvent, ms * 1000, task.id]);\n    }\n  }\n}\nfunction markTaskErrored(task, ms) {\n  {\n    profilingState[PRIORITY] = NoPriority;\n    profilingState[CURRENT_TASK_ID] = 0;\n    profilingState[QUEUE_SIZE]--;\n\n    if (eventLog !== null) {\n      logEvent([TaskErrorEvent, ms * 1000, task.id]);\n    }\n  }\n}\nfunction markTaskRun(task, ms) {\n  {\n    runIdCounter++;\n    profilingState[PRIORITY] = task.priorityLevel;\n    profilingState[CURRENT_TASK_ID] = task.id;\n    profilingState[CURRENT_RUN_ID] = runIdCounter;\n\n    if (eventLog !== null) {\n      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\nfunction markTaskYield(task, ms) {\n  {\n    profilingState[PRIORITY] = NoPriority;\n    profilingState[CURRENT_TASK_ID] = 0;\n    profilingState[CURRENT_RUN_ID] = 0;\n\n    if (eventLog !== null) {\n      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\nfunction markSchedulerSuspended(ms) {\n  {\n    mainThreadIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\nfunction markSchedulerUnsuspended(ms) {\n  {\n    if (eventLog !== null) {\n      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n\n/* eslint-disable no-var */\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  var timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n\n      {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n  {\n    markSchedulerUnsuspended(initialTime);\n  } // We'll need a host callback the next time work is scheduled.\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  var previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          var currentTime = exports.unstable_now();\n          markTaskErrored(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod codepath.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n\n    {\n      var _currentTime = exports.unstable_now();\n\n      markSchedulerSuspended(_currentTime);\n    }\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  var currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n\n    var callback = currentTask.callback;\n\n    if (callback !== null) {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      markTaskRun(currentTask, currentTime);\n      var continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = exports.unstable_now();\n\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n        markTaskYield(currentTask, currentTime);\n      } else {\n        {\n          markTaskCompleted(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    var firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction timeoutForPriorityLevel(priorityLevel) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      return IMMEDIATE_PRIORITY_TIMEOUT;\n\n    case UserBlockingPriority:\n      return USER_BLOCKING_PRIORITY;\n\n    case IdlePriority:\n      return IDLE_PRIORITY;\n\n    case LowPriority:\n      return LOW_PRIORITY_TIMEOUT;\n\n    case NormalPriority:\n    default:\n      return NORMAL_PRIORITY_TIMEOUT;\n  }\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = exports.unstable_now();\n  var startTime;\n  var timeout;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n\n    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\n  } else {\n    timeout = timeoutForPriorityLevel(priorityLevel);\n    startTime = currentTime;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: startTime,\n    expirationTime: expirationTime,\n    sortIndex: -1\n  };\n\n  {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n\n    {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    } // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n}\n\nfunction unstable_continueExecution() {\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  {\n    if (task.isQueued) {\n      var currentTime = exports.unstable_now();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  } // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nfunction unstable_shouldYield() {\n  var currentTime = exports.unstable_now();\n  advanceTimers(currentTime);\n  var firstTask = peek(taskQueue);\n  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\n}\n\nvar unstable_requestPaint = requestPaint;\nvar unstable_Profiling =  {\n  startLoggingProfilingEvents: startLoggingProfilingEvents,\n  stopLoggingProfilingEvents: stopLoggingProfilingEvents,\n  sharedProfilingBuffer: sharedProfilingBuffer\n} ;\n\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_Profiling = unstable_Profiling;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\nexports.unstable_next = unstable_next;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_requestPaint = unstable_requestPaint;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_shouldYield = unstable_shouldYield;\nexports.unstable_wrapCallback = unstable_wrapCallback;\n  })();\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1598576982511,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$scheduler$cjs$scheduler_development.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAe,CAAf,CAAA,CAAoB,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAuBC,CAAvB,CAAgC;\",\n\"sources\":[\"node_modules/scheduler/cjs/scheduler.development.js\"],\n\"sourcesContent\":[\"shadow$provide[7] = function(global,require,module,exports) {\\n/** @license React v0.19.1\\n * scheduler.development.js\\n *\\n * Copyright (c) Facebook, Inc. and its affiliates.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n'use strict';\\n\\n\\n\\nif (process.env.NODE_ENV !== \\\"production\\\") {\\n  (function() {\\n'use strict';\\n\\nvar enableSchedulerDebugging = false;\\nvar enableProfiling = true;\\n\\nvar requestHostCallback;\\nvar requestHostTimeout;\\nvar cancelHostTimeout;\\nvar shouldYieldToHost;\\nvar requestPaint;\\n\\nif ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\\n// implementation using setTimeout.\\ntypeof window === 'undefined' || // Check if MessageChannel is supported, too.\\ntypeof MessageChannel !== 'function') {\\n  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\\n  // fallback to a naive implementation.\\n  var _callback = null;\\n  var _timeoutID = null;\\n\\n  var _flushCallback = function () {\\n    if (_callback !== null) {\\n      try {\\n        var currentTime = exports.unstable_now();\\n        var hasRemainingTime = true;\\n\\n        _callback(hasRemainingTime, currentTime);\\n\\n        _callback = null;\\n      } catch (e) {\\n        setTimeout(_flushCallback, 0);\\n        throw e;\\n      }\\n    }\\n  };\\n\\n  var initialTime = Date.now();\\n\\n  exports.unstable_now = function () {\\n    return Date.now() - initialTime;\\n  };\\n\\n  requestHostCallback = function (cb) {\\n    if (_callback !== null) {\\n      // Protect against re-entrancy.\\n      setTimeout(requestHostCallback, 0, cb);\\n    } else {\\n      _callback = cb;\\n      setTimeout(_flushCallback, 0);\\n    }\\n  };\\n\\n  requestHostTimeout = function (cb, ms) {\\n    _timeoutID = setTimeout(cb, ms);\\n  };\\n\\n  cancelHostTimeout = function () {\\n    clearTimeout(_timeoutID);\\n  };\\n\\n  shouldYieldToHost = function () {\\n    return false;\\n  };\\n\\n  requestPaint = exports.unstable_forceFrameRate = function () {};\\n} else {\\n  // Capture local references to native APIs, in case a polyfill overrides them.\\n  var performance = window.performance;\\n  var _Date = window.Date;\\n  var _setTimeout = window.setTimeout;\\n  var _clearTimeout = window.clearTimeout;\\n\\n  if (typeof console !== 'undefined') {\\n    // TODO: Scheduler no longer requires these methods to be polyfilled. But\\n    // maybe we want to continue warning if they don't exist, to preserve the\\n    // option to rely on it in the future?\\n    var requestAnimationFrame = window.requestAnimationFrame;\\n    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link\\n\\n    if (typeof requestAnimationFrame !== 'function') {\\n      // Using console['error'] to evade Babel and ESLint\\n      console['error'](\\\"This browser doesn't support requestAnimationFrame. \\\" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\\n    }\\n\\n    if (typeof cancelAnimationFrame !== 'function') {\\n      // Using console['error'] to evade Babel and ESLint\\n      console['error'](\\\"This browser doesn't support cancelAnimationFrame. \\\" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\\n    }\\n  }\\n\\n  if (typeof performance === 'object' && typeof performance.now === 'function') {\\n    exports.unstable_now = function () {\\n      return performance.now();\\n    };\\n  } else {\\n    var _initialTime = _Date.now();\\n\\n    exports.unstable_now = function () {\\n      return _Date.now() - _initialTime;\\n    };\\n  }\\n\\n  var isMessageLoopRunning = false;\\n  var scheduledHostCallback = null;\\n  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\\n  // thread, like user events. By default, it yields multiple times per frame.\\n  // It does not attempt to align with frame boundaries, since most tasks don't\\n  // need to be frame aligned; for those that do, use requestAnimationFrame.\\n\\n  var yieldInterval = 5;\\n  var deadline = 0; // TODO: Make this configurable\\n\\n  {\\n    // `isInputPending` is not available. Since we have no way of knowing if\\n    // there's pending input, always yield at the end of the frame.\\n    shouldYieldToHost = function () {\\n      return exports.unstable_now() >= deadline;\\n    }; // Since we yield every frame regardless, `requestPaint` has no effect.\\n\\n\\n    requestPaint = function () {};\\n  }\\n\\n  exports.unstable_forceFrameRate = function (fps) {\\n    if (fps < 0 || fps > 125) {\\n      // Using console['error'] to evade Babel and ESLint\\n      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');\\n      return;\\n    }\\n\\n    if (fps > 0) {\\n      yieldInterval = Math.floor(1000 / fps);\\n    } else {\\n      // reset the framerate\\n      yieldInterval = 5;\\n    }\\n  };\\n\\n  var performWorkUntilDeadline = function () {\\n    if (scheduledHostCallback !== null) {\\n      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync\\n      // cycle. This means there's always time remaining at the beginning of\\n      // the message event.\\n\\n      deadline = currentTime + yieldInterval;\\n      var hasTimeRemaining = true;\\n\\n      try {\\n        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\\n\\n        if (!hasMoreWork) {\\n          isMessageLoopRunning = false;\\n          scheduledHostCallback = null;\\n        } else {\\n          // If there's more work, schedule the next message event at the end\\n          // of the preceding one.\\n          port.postMessage(null);\\n        }\\n      } catch (error) {\\n        // If a scheduler task throws, exit the current browser task so the\\n        // error can be observed.\\n        port.postMessage(null);\\n        throw error;\\n      }\\n    } else {\\n      isMessageLoopRunning = false;\\n    } // Yielding to the browser will give it a chance to paint, so we can\\n  };\\n\\n  var channel = new MessageChannel();\\n  var port = channel.port2;\\n  channel.port1.onmessage = performWorkUntilDeadline;\\n\\n  requestHostCallback = function (callback) {\\n    scheduledHostCallback = callback;\\n\\n    if (!isMessageLoopRunning) {\\n      isMessageLoopRunning = true;\\n      port.postMessage(null);\\n    }\\n  };\\n\\n  requestHostTimeout = function (callback, ms) {\\n    taskTimeoutID = _setTimeout(function () {\\n      callback(exports.unstable_now());\\n    }, ms);\\n  };\\n\\n  cancelHostTimeout = function () {\\n    _clearTimeout(taskTimeoutID);\\n\\n    taskTimeoutID = -1;\\n  };\\n}\\n\\nfunction push(heap, node) {\\n  var index = heap.length;\\n  heap.push(node);\\n  siftUp(heap, node, index);\\n}\\nfunction peek(heap) {\\n  var first = heap[0];\\n  return first === undefined ? null : first;\\n}\\nfunction pop(heap) {\\n  var first = heap[0];\\n\\n  if (first !== undefined) {\\n    var last = heap.pop();\\n\\n    if (last !== first) {\\n      heap[0] = last;\\n      siftDown(heap, last, 0);\\n    }\\n\\n    return first;\\n  } else {\\n    return null;\\n  }\\n}\\n\\nfunction siftUp(heap, node, i) {\\n  var index = i;\\n\\n  while (true) {\\n    var parentIndex = index - 1 >>> 1;\\n    var parent = heap[parentIndex];\\n\\n    if (parent !== undefined && compare(parent, node) > 0) {\\n      // The parent is larger. Swap positions.\\n      heap[parentIndex] = node;\\n      heap[index] = parent;\\n      index = parentIndex;\\n    } else {\\n      // The parent is smaller. Exit.\\n      return;\\n    }\\n  }\\n}\\n\\nfunction siftDown(heap, node, i) {\\n  var index = i;\\n  var length = heap.length;\\n\\n  while (index < length) {\\n    var leftIndex = (index + 1) * 2 - 1;\\n    var left = heap[leftIndex];\\n    var rightIndex = leftIndex + 1;\\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\\n\\n    if (left !== undefined && compare(left, node) < 0) {\\n      if (right !== undefined && compare(right, left) < 0) {\\n        heap[index] = right;\\n        heap[rightIndex] = node;\\n        index = rightIndex;\\n      } else {\\n        heap[index] = left;\\n        heap[leftIndex] = node;\\n        index = leftIndex;\\n      }\\n    } else if (right !== undefined && compare(right, node) < 0) {\\n      heap[index] = right;\\n      heap[rightIndex] = node;\\n      index = rightIndex;\\n    } else {\\n      // Neither child is smaller. Exit.\\n      return;\\n    }\\n  }\\n}\\n\\nfunction compare(a, b) {\\n  // Compare sort index first, then task id.\\n  var diff = a.sortIndex - b.sortIndex;\\n  return diff !== 0 ? diff : a.id - b.id;\\n}\\n\\n// TODO: Use symbols?\\nvar NoPriority = 0;\\nvar ImmediatePriority = 1;\\nvar UserBlockingPriority = 2;\\nvar NormalPriority = 3;\\nvar LowPriority = 4;\\nvar IdlePriority = 5;\\n\\nvar runIdCounter = 0;\\nvar mainThreadIdCounter = 0;\\nvar profilingStateSize = 4;\\nvar sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer\\ntypeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer\\ntypeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\\n;\\nvar profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\\n\\nvar PRIORITY = 0;\\nvar CURRENT_TASK_ID = 1;\\nvar CURRENT_RUN_ID = 2;\\nvar QUEUE_SIZE = 3;\\n\\n{\\n  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\\n  // array might include canceled tasks.\\n\\n  profilingState[QUEUE_SIZE] = 0;\\n  profilingState[CURRENT_TASK_ID] = 0;\\n} // Bytes per element is 4\\n\\n\\nvar INITIAL_EVENT_LOG_SIZE = 131072;\\nvar MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\\n\\nvar eventLogSize = 0;\\nvar eventLogBuffer = null;\\nvar eventLog = null;\\nvar eventLogIndex = 0;\\nvar TaskStartEvent = 1;\\nvar TaskCompleteEvent = 2;\\nvar TaskErrorEvent = 3;\\nvar TaskCancelEvent = 4;\\nvar TaskRunEvent = 5;\\nvar TaskYieldEvent = 6;\\nvar SchedulerSuspendEvent = 7;\\nvar SchedulerResumeEvent = 8;\\n\\nfunction logEvent(entries) {\\n  if (eventLog !== null) {\\n    var offset = eventLogIndex;\\n    eventLogIndex += entries.length;\\n\\n    if (eventLogIndex + 1 > eventLogSize) {\\n      eventLogSize *= 2;\\n\\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\\n        // Using console['error'] to evade Babel and ESLint\\n        console['error'](\\\"Scheduler Profiling: Event log exceeded maximum size. Don't \\\" + 'forget to call `stopLoggingProfilingEvents()`.');\\n        stopLoggingProfilingEvents();\\n        return;\\n      }\\n\\n      var newEventLog = new Int32Array(eventLogSize * 4);\\n      newEventLog.set(eventLog);\\n      eventLogBuffer = newEventLog.buffer;\\n      eventLog = newEventLog;\\n    }\\n\\n    eventLog.set(entries, offset);\\n  }\\n}\\n\\nfunction startLoggingProfilingEvents() {\\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\\n  eventLog = new Int32Array(eventLogBuffer);\\n  eventLogIndex = 0;\\n}\\nfunction stopLoggingProfilingEvents() {\\n  var buffer = eventLogBuffer;\\n  eventLogSize = 0;\\n  eventLogBuffer = null;\\n  eventLog = null;\\n  eventLogIndex = 0;\\n  return buffer;\\n}\\nfunction markTaskStart(task, ms) {\\n  {\\n    profilingState[QUEUE_SIZE]++;\\n\\n    if (eventLog !== null) {\\n      // performance.now returns a float, representing milliseconds. When the\\n      // event is logged, it's coerced to an int. Convert to microseconds to\\n      // maintain extra degrees of precision.\\n      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\\n    }\\n  }\\n}\\nfunction markTaskCompleted(task, ms) {\\n  {\\n    profilingState[PRIORITY] = NoPriority;\\n    profilingState[CURRENT_TASK_ID] = 0;\\n    profilingState[QUEUE_SIZE]--;\\n\\n    if (eventLog !== null) {\\n      logEvent([TaskCompleteEvent, ms * 1000, task.id]);\\n    }\\n  }\\n}\\nfunction markTaskCanceled(task, ms) {\\n  {\\n    profilingState[QUEUE_SIZE]--;\\n\\n    if (eventLog !== null) {\\n      logEvent([TaskCancelEvent, ms * 1000, task.id]);\\n    }\\n  }\\n}\\nfunction markTaskErrored(task, ms) {\\n  {\\n    profilingState[PRIORITY] = NoPriority;\\n    profilingState[CURRENT_TASK_ID] = 0;\\n    profilingState[QUEUE_SIZE]--;\\n\\n    if (eventLog !== null) {\\n      logEvent([TaskErrorEvent, ms * 1000, task.id]);\\n    }\\n  }\\n}\\nfunction markTaskRun(task, ms) {\\n  {\\n    runIdCounter++;\\n    profilingState[PRIORITY] = task.priorityLevel;\\n    profilingState[CURRENT_TASK_ID] = task.id;\\n    profilingState[CURRENT_RUN_ID] = runIdCounter;\\n\\n    if (eventLog !== null) {\\n      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\\n    }\\n  }\\n}\\nfunction markTaskYield(task, ms) {\\n  {\\n    profilingState[PRIORITY] = NoPriority;\\n    profilingState[CURRENT_TASK_ID] = 0;\\n    profilingState[CURRENT_RUN_ID] = 0;\\n\\n    if (eventLog !== null) {\\n      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\\n    }\\n  }\\n}\\nfunction markSchedulerSuspended(ms) {\\n  {\\n    mainThreadIdCounter++;\\n\\n    if (eventLog !== null) {\\n      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\\n    }\\n  }\\n}\\nfunction markSchedulerUnsuspended(ms) {\\n  {\\n    if (eventLog !== null) {\\n      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\\n    }\\n  }\\n}\\n\\n/* eslint-disable no-var */\\n// Math.pow(2, 30) - 1\\n// 0b111111111111111111111111111111\\n\\nvar maxSigned31BitInt = 1073741823; // Times out immediately\\n\\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\\n\\nvar USER_BLOCKING_PRIORITY = 250;\\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\\n\\nvar IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\\n\\nvar taskQueue = [];\\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\\n\\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\\nvar currentTask = null;\\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\\n\\nvar isPerformingWork = false;\\nvar isHostCallbackScheduled = false;\\nvar isHostTimeoutScheduled = false;\\n\\nfunction advanceTimers(currentTime) {\\n  // Check for tasks that are no longer delayed and add them to the queue.\\n  var timer = peek(timerQueue);\\n\\n  while (timer !== null) {\\n    if (timer.callback === null) {\\n      // Timer was cancelled.\\n      pop(timerQueue);\\n    } else if (timer.startTime <= currentTime) {\\n      // Timer fired. Transfer to the task queue.\\n      pop(timerQueue);\\n      timer.sortIndex = timer.expirationTime;\\n      push(taskQueue, timer);\\n\\n      {\\n        markTaskStart(timer, currentTime);\\n        timer.isQueued = true;\\n      }\\n    } else {\\n      // Remaining timers are pending.\\n      return;\\n    }\\n\\n    timer = peek(timerQueue);\\n  }\\n}\\n\\nfunction handleTimeout(currentTime) {\\n  isHostTimeoutScheduled = false;\\n  advanceTimers(currentTime);\\n\\n  if (!isHostCallbackScheduled) {\\n    if (peek(taskQueue) !== null) {\\n      isHostCallbackScheduled = true;\\n      requestHostCallback(flushWork);\\n    } else {\\n      var firstTimer = peek(timerQueue);\\n\\n      if (firstTimer !== null) {\\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\\n      }\\n    }\\n  }\\n}\\n\\nfunction flushWork(hasTimeRemaining, initialTime) {\\n  {\\n    markSchedulerUnsuspended(initialTime);\\n  } // We'll need a host callback the next time work is scheduled.\\n\\n\\n  isHostCallbackScheduled = false;\\n\\n  if (isHostTimeoutScheduled) {\\n    // We scheduled a timeout but it's no longer needed. Cancel it.\\n    isHostTimeoutScheduled = false;\\n    cancelHostTimeout();\\n  }\\n\\n  isPerformingWork = true;\\n  var previousPriorityLevel = currentPriorityLevel;\\n\\n  try {\\n    if (enableProfiling) {\\n      try {\\n        return workLoop(hasTimeRemaining, initialTime);\\n      } catch (error) {\\n        if (currentTask !== null) {\\n          var currentTime = exports.unstable_now();\\n          markTaskErrored(currentTask, currentTime);\\n          currentTask.isQueued = false;\\n        }\\n\\n        throw error;\\n      }\\n    } else {\\n      // No catch in prod codepath.\\n      return workLoop(hasTimeRemaining, initialTime);\\n    }\\n  } finally {\\n    currentTask = null;\\n    currentPriorityLevel = previousPriorityLevel;\\n    isPerformingWork = false;\\n\\n    {\\n      var _currentTime = exports.unstable_now();\\n\\n      markSchedulerSuspended(_currentTime);\\n    }\\n  }\\n}\\n\\nfunction workLoop(hasTimeRemaining, initialTime) {\\n  var currentTime = initialTime;\\n  advanceTimers(currentTime);\\n  currentTask = peek(taskQueue);\\n\\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\\n      // This currentTask hasn't expired, and we've reached the deadline.\\n      break;\\n    }\\n\\n    var callback = currentTask.callback;\\n\\n    if (callback !== null) {\\n      currentTask.callback = null;\\n      currentPriorityLevel = currentTask.priorityLevel;\\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\\n      markTaskRun(currentTask, currentTime);\\n      var continuationCallback = callback(didUserCallbackTimeout);\\n      currentTime = exports.unstable_now();\\n\\n      if (typeof continuationCallback === 'function') {\\n        currentTask.callback = continuationCallback;\\n        markTaskYield(currentTask, currentTime);\\n      } else {\\n        {\\n          markTaskCompleted(currentTask, currentTime);\\n          currentTask.isQueued = false;\\n        }\\n\\n        if (currentTask === peek(taskQueue)) {\\n          pop(taskQueue);\\n        }\\n      }\\n\\n      advanceTimers(currentTime);\\n    } else {\\n      pop(taskQueue);\\n    }\\n\\n    currentTask = peek(taskQueue);\\n  } // Return whether there's additional work\\n\\n\\n  if (currentTask !== null) {\\n    return true;\\n  } else {\\n    var firstTimer = peek(timerQueue);\\n\\n    if (firstTimer !== null) {\\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\\n    }\\n\\n    return false;\\n  }\\n}\\n\\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\\n  switch (priorityLevel) {\\n    case ImmediatePriority:\\n    case UserBlockingPriority:\\n    case NormalPriority:\\n    case LowPriority:\\n    case IdlePriority:\\n      break;\\n\\n    default:\\n      priorityLevel = NormalPriority;\\n  }\\n\\n  var previousPriorityLevel = currentPriorityLevel;\\n  currentPriorityLevel = priorityLevel;\\n\\n  try {\\n    return eventHandler();\\n  } finally {\\n    currentPriorityLevel = previousPriorityLevel;\\n  }\\n}\\n\\nfunction unstable_next(eventHandler) {\\n  var priorityLevel;\\n\\n  switch (currentPriorityLevel) {\\n    case ImmediatePriority:\\n    case UserBlockingPriority:\\n    case NormalPriority:\\n      // Shift down to normal priority\\n      priorityLevel = NormalPriority;\\n      break;\\n\\n    default:\\n      // Anything lower than normal priority should remain at the current level.\\n      priorityLevel = currentPriorityLevel;\\n      break;\\n  }\\n\\n  var previousPriorityLevel = currentPriorityLevel;\\n  currentPriorityLevel = priorityLevel;\\n\\n  try {\\n    return eventHandler();\\n  } finally {\\n    currentPriorityLevel = previousPriorityLevel;\\n  }\\n}\\n\\nfunction unstable_wrapCallback(callback) {\\n  var parentPriorityLevel = currentPriorityLevel;\\n  return function () {\\n    // This is a fork of runWithPriority, inlined for performance.\\n    var previousPriorityLevel = currentPriorityLevel;\\n    currentPriorityLevel = parentPriorityLevel;\\n\\n    try {\\n      return callback.apply(this, arguments);\\n    } finally {\\n      currentPriorityLevel = previousPriorityLevel;\\n    }\\n  };\\n}\\n\\nfunction timeoutForPriorityLevel(priorityLevel) {\\n  switch (priorityLevel) {\\n    case ImmediatePriority:\\n      return IMMEDIATE_PRIORITY_TIMEOUT;\\n\\n    case UserBlockingPriority:\\n      return USER_BLOCKING_PRIORITY;\\n\\n    case IdlePriority:\\n      return IDLE_PRIORITY;\\n\\n    case LowPriority:\\n      return LOW_PRIORITY_TIMEOUT;\\n\\n    case NormalPriority:\\n    default:\\n      return NORMAL_PRIORITY_TIMEOUT;\\n  }\\n}\\n\\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\\n  var currentTime = exports.unstable_now();\\n  var startTime;\\n  var timeout;\\n\\n  if (typeof options === 'object' && options !== null) {\\n    var delay = options.delay;\\n\\n    if (typeof delay === 'number' && delay > 0) {\\n      startTime = currentTime + delay;\\n    } else {\\n      startTime = currentTime;\\n    }\\n\\n    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\\n  } else {\\n    timeout = timeoutForPriorityLevel(priorityLevel);\\n    startTime = currentTime;\\n  }\\n\\n  var expirationTime = startTime + timeout;\\n  var newTask = {\\n    id: taskIdCounter++,\\n    callback: callback,\\n    priorityLevel: priorityLevel,\\n    startTime: startTime,\\n    expirationTime: expirationTime,\\n    sortIndex: -1\\n  };\\n\\n  {\\n    newTask.isQueued = false;\\n  }\\n\\n  if (startTime > currentTime) {\\n    // This is a delayed task.\\n    newTask.sortIndex = startTime;\\n    push(timerQueue, newTask);\\n\\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\\n      // All tasks are delayed, and this is the task with the earliest delay.\\n      if (isHostTimeoutScheduled) {\\n        // Cancel an existing timeout.\\n        cancelHostTimeout();\\n      } else {\\n        isHostTimeoutScheduled = true;\\n      } // Schedule a timeout.\\n\\n\\n      requestHostTimeout(handleTimeout, startTime - currentTime);\\n    }\\n  } else {\\n    newTask.sortIndex = expirationTime;\\n    push(taskQueue, newTask);\\n\\n    {\\n      markTaskStart(newTask, currentTime);\\n      newTask.isQueued = true;\\n    } // Schedule a host callback, if needed. If we're already performing work,\\n    // wait until the next time we yield.\\n\\n\\n    if (!isHostCallbackScheduled && !isPerformingWork) {\\n      isHostCallbackScheduled = true;\\n      requestHostCallback(flushWork);\\n    }\\n  }\\n\\n  return newTask;\\n}\\n\\nfunction unstable_pauseExecution() {\\n}\\n\\nfunction unstable_continueExecution() {\\n\\n  if (!isHostCallbackScheduled && !isPerformingWork) {\\n    isHostCallbackScheduled = true;\\n    requestHostCallback(flushWork);\\n  }\\n}\\n\\nfunction unstable_getFirstCallbackNode() {\\n  return peek(taskQueue);\\n}\\n\\nfunction unstable_cancelCallback(task) {\\n  {\\n    if (task.isQueued) {\\n      var currentTime = exports.unstable_now();\\n      markTaskCanceled(task, currentTime);\\n      task.isQueued = false;\\n    }\\n  } // Null out the callback to indicate the task has been canceled. (Can't\\n  // remove from the queue because you can't remove arbitrary nodes from an\\n  // array based heap, only the first one.)\\n\\n\\n  task.callback = null;\\n}\\n\\nfunction unstable_getCurrentPriorityLevel() {\\n  return currentPriorityLevel;\\n}\\n\\nfunction unstable_shouldYield() {\\n  var currentTime = exports.unstable_now();\\n  advanceTimers(currentTime);\\n  var firstTask = peek(taskQueue);\\n  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\\n}\\n\\nvar unstable_requestPaint = requestPaint;\\nvar unstable_Profiling =  {\\n  startLoggingProfilingEvents: startLoggingProfilingEvents,\\n  stopLoggingProfilingEvents: stopLoggingProfilingEvents,\\n  sharedProfilingBuffer: sharedProfilingBuffer\\n} ;\\n\\nexports.unstable_IdlePriority = IdlePriority;\\nexports.unstable_ImmediatePriority = ImmediatePriority;\\nexports.unstable_LowPriority = LowPriority;\\nexports.unstable_NormalPriority = NormalPriority;\\nexports.unstable_Profiling = unstable_Profiling;\\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\\nexports.unstable_cancelCallback = unstable_cancelCallback;\\nexports.unstable_continueExecution = unstable_continueExecution;\\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\\nexports.unstable_next = unstable_next;\\nexports.unstable_pauseExecution = unstable_pauseExecution;\\nexports.unstable_requestPaint = unstable_requestPaint;\\nexports.unstable_runWithPriority = unstable_runWithPriority;\\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\\nexports.unstable_shouldYield = unstable_shouldYield;\\nexports.unstable_wrapCallback = unstable_wrapCallback;\\n  })();\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\"]\n}\n"]